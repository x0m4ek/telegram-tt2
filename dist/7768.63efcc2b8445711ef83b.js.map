{"version":3,"file":"7768.63efcc2b8445711ef83b.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/middleSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/payments/stripe.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/stars.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/bots.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/middleSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/helpers/meta.ts","webpack://telegram-t/./src/global/actions/ui/stars.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/ui/statistics.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/getSingularPaidMedia.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/common/embedded/EmbeddedStory.tsx","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/Contact.module.scss?fec1","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/FactCheck.module.scss?3842","webpack://telegram-t/./src/components/middle/message/FactCheck.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/Giveaway.module.scss?9b0c","webpack://telegram-t/./src/components/middle/message/Giveaway.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/MessageAppendix.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/PaidMediaOverlay.module.scss?e3d6","webpack://telegram-t/./src/components/middle/message/PaidMediaOverlay.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.module.scss?30d0","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/Story.tsx","webpack://telegram-t/./src/components/middle/message/StoryMention.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.tsx","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.module.scss?0f2f","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.module.scss?13d1","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/panes/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.module.scss?7a09","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/panes/BotAdPane.module.scss?ff1a","webpack://telegram-t/./src/components/middle/panes/BotAdPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.module.scss?a09a","webpack://telegram-t/./src/components/middle/panes/ChatReportPane.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.module.scss?d2aa","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/ModalContainer.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.async.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/WebAppsCloseConfirmationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.async.tsx","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/upgrade/GiftUpgradeModal.async.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/withdraw/GiftWithdrawModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/status/GiftStatusInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/transfer/GiftTransferModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/common/gift/SavedGift.module.scss?4193","webpack://telegram-t/./src/components/common/gift/SavedGift.tsx","webpack://telegram-t/./src/components/common/PreviewMedia.tsx","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.async.tsx","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.module.scss?4abc","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.module.scss?a4ff","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.module.scss?b372","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts","webpack://telegram-t/./src/components/common/BadgeButton.module.scss?da7b","webpack://telegram-t/./src/components/common/BadgeButton.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/hooks/useVerticalScroll.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReactionWithPaid } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReactionWithPaid[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    if (reaction.type === 'paid') return;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, true);\n}\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport {\n  addPaidReaction,\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deletePeerPhoto,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updatePeerFullInfo,\n  updatePoll,\n  updatePollVote,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateSnapEffect,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\nconst SNAP_ANIMATION_DELAY = 1000;\nconst VIDEO_PROCESSING_NOTIFICATION_DELAY = 1000;\nlet lastVideoProcessingNotificationTime = 0;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted, poll,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (message.reportDeliveryUntilDate && message.reportDeliveryUntilDate > getServerTime()) {\n        actions.reportMessageDelivery({ chatId, messageId: id });\n      }\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!isLocal && !chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (!isLocal && selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message, poll } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateVideoProcessingPending': {\n      const {\n        chatId, localId, newScheduledMessageId,\n      } = update;\n\n      global = deleteChatMessages(global, chatId, [localId]);\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const currentMessageList = selectCurrentMessageList(global, tabId);\n        if (currentMessageList?.chatId !== chatId) return;\n\n        const now = Date.now();\n        if (now - lastVideoProcessingNotificationTime < VIDEO_PROCESSING_NOTIFICATION_DELAY) {\n          return;\n        }\n        lastVideoProcessingNotificationTime = now;\n\n        actions.showNotification({\n          message: {\n            key: 'VideoConversionText',\n          },\n          title: {\n            key: 'VideoConversionTitle',\n          },\n          tabId,\n        });\n\n        actions.focusMessage({\n          chatId,\n          messageId: newScheduledMessageId,\n          messageListType: 'scheduled',\n          tabId,\n        });\n      });\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      const chat = selectChat(global, chatId);\n      // Reload dialogs if chat is not present in the list\n      if (!chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        threadInfo,\n      } = update;\n\n      global = updateThreadInfos(global, [threadInfo]);\n      const { chatId, threadId } = threadInfo;\n      if (!chatId || !threadId) return;\n\n      const chat = selectChat(global, chatId);\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: Number(threadId) });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (!chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, newIds, chatId } = update;\n\n      const hadVideoProcessing = ids?.some((id) => (\n        selectScheduledMessage(global, chatId, id)?.isVideoProcessingPending\n      ));\n      const processedVideoId = newIds?.find((id) => {\n        const message = selectChatMessage(global, chatId, id);\n        return message?.content.video;\n      });\n\n      if (hadVideoProcessing && processedVideoId) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showNotification({\n            message: {\n              key: 'VideoConversionDone',\n            },\n            actionText: {\n              key: 'VideoConversionView',\n            },\n            action: {\n              action: 'focusMessage',\n              payload: {\n                chatId,\n                messageId: processedVideoId,\n                tabId,\n              },\n            },\n            tabId,\n          });\n        });\n      }\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'deleteParticipantHistory': {\n      const { chatId, peerId } = update;\n\n      global = getGlobal();\n      deleteParticipantHistory(global, chatId, peerId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      global = updatePoll(global, pollId, pollUpdate);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      global = updatePollVote(global, pollId, peerId, options);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...content,\n            },\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  const localPaidReaction = currentReactions?.results.find((r) => r.localAmount);\n  // Save local count on update, but reset if we sent reaction\n  if (localPaidReaction?.localAmount) {\n    reactions.results = addPaidReaction(reactions.results, localPaidReaction.localAmount);\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteParticipantHistory<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  peerId: string,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n\n  const messageIds = Object.values(byId).filter((message) => {\n    return message.senderId === peerId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (selectTopic(global, chatId, id)) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      if (message.content.action?.photo) {\n        global = deletePeerPhoto(global, chatId, message.content.action.photo.id, true);\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) {\n        if (chat.isForum && threadId !== MAIN_THREAD_ID) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n        return;\n      }\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      // Prevent local deletion of sent messages in case of desync\n      const stillDeletedIds = ids.filter((id) => selectChatMessage(global, chatId, id)?.isDeleting);\n      global = deleteChatMessages(global, chatId, stillDeletedIds);\n      setGlobal(global);\n    }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      if (message?.content.action?.photo) {\n        global = deletePeerPhoto(global, commonBoxChatId, message.content.action.photo.id, true);\n      }\n\n      const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiDraft,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiPeer,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport type { MessageKey } from '../../../util/keys/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection, type ThreadId, type WebPageMediaSize } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_ID_REQUIRED_ERROR,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n  splitMessagesForForwarding,\n} from '../../helpers';\nimport { isApiPeerUser } from '../../helpers/peers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addUnreadMentions,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updatePeerFullInfo,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanForwardMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerStory,\n  selectPinnedIds,\n  selectPollFromMessage,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    if (historyIds?.length) {\n      const {\n        newViewportIds, areSomeLocal, areAllLocal,\n      } = getViewportSlice(historyIds, offsetId, direction);\n\n      if (areSomeLocal) {\n        global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n      }\n\n      onTickEnd(() => {\n        void loadWithBudget(\n          global,\n          actions,\n          areAllLocal,\n          isOutlying,\n          isBudgetPreload,\n          chat,\n          threadId!,\n          direction,\n          offsetId,\n          onLoaded,\n          tabId,\n        );\n      });\n    }\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return undefined;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n  const lastMessageId = selectChatLastMessageId(global, chatId!);\n\n  const params = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    let hasSentCaption = false;\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;\n\n        if (group[0].quick && !group[0].shouldSendAsFile) {\n          const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n          sendMessage(global, {\n            ...commonParams,\n            text: isFirst && !hasSentCaption ? text : undefined,\n            entities: isFirst && !hasSentCaption ? entities : undefined,\n            attachment: firstAttachment,\n            groupedId: restAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          });\n          hasSentCaption = true;\n\n          restAttachments.forEach((attachment: ApiAttachment) => {\n            sendMessage(global, {\n              ...commonParams,\n              attachment,\n              groupedId,\n            });\n          });\n        } else {\n          const firstAttachments = groupedAttachments[i].slice(0, -1);\n          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];\n          firstAttachments.forEach((attachment: ApiAttachment) => {\n            sendMessage(global, {\n              ...commonParams,\n              attachment,\n              groupedId,\n            });\n          });\n\n          sendMessage(global, {\n            ...commonParams,\n            text: isLast && !hasSentCaption ? text : undefined,\n            entities: isLast && !hasSentCaption ? entities : undefined,\n            attachment: lastAttachment,\n            groupedId: firstAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          });\n          hasSentCaption = true;\n        }\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  if (!text) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n} : {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, isUnpin, isOneSide, isSilent,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteParticipantHistory', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, peerId,\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n  const peer = selectPeer(global, peerId)!;\n\n  void callApi('deleteParticipantHistory', { chat, peer });\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, description = '', option = '', chatId, tabId = getCurrentTabId(),\n  } = payload!;\n  const chat = selectChat(global, chatId)!;\n\n  const response = await callApi('reportMessages', {\n    peer: chat, messageIds, description, option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('reportChannelSpam', (global, actions, payload): ActionReturnType => {\n  const { participantId, chatId, messageIds } = payload;\n  const peer = selectPeer(global, participantId);\n  const chat = selectChat(global, chatId);\n  if (!peer || !chat) {\n    return;\n  }\n\n  void callApi('reportChannelSpam', { peer, chat, messageIds });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  const topic = selectTopic(global, chatId, threadId);\n  if (chat.isForum && topic) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const poll = message && selectPollFromMessage(global, message);\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  const forwardableRealMessages = realMessages.filter((message) => selectCanForwardMessage(global, message));\n  if (forwardableRealMessages.length) {\n    const messageBatches = global.config?.maxForwardedCount\n      ? splitMessagesForForwarding(forwardableRealMessages, global.config.maxForwardedCount)\n      : [forwardableRealMessages];\n    (async () => {\n      await rafPromise(); // Wait one frame for any previous `sendMessage` to be processed\n      messageBatches.forEach((batch) => {\n        callApi('forwardMessages', {\n          fromChat,\n          toChat,\n          toThreadId,\n          messages: batch,\n          isSilent,\n          scheduledAt,\n          sendAs,\n          withMyScore,\n          noAuthors,\n          noCaptions,\n          isCurrentUserPremium,\n          wasDrafted: Boolean(draft),\n          lastMessageId,\n        });\n      });\n    })();\n  }\n\n  serviceMessages\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker } = message.content;\n\n      const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyInfo,\n        text,\n        entities,\n        sticker,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        lastMessageId,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (!ids.length) {\n    global = updatePeerFullInfo(global, chat.id, { hasScheduledMessages: false });\n  }\n\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyInfo?: ApiInputReplyInfo;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  story?: ApiStory | ApiStorySkipped;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiPeer;\n  groupedId?: string;\n  wasDrafted?: boolean;\n  lastMessageId?: number;\n  isInvertedMedia?: true;\n  effectId?: string;\n  webPageMediaSize?: WebPageMediaSize;\n}) {\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (isApiPeerUser(peer) && selectIsChatBotNotStarted(global, peer.id)) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, peerId, result.messages[0]);\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const message = selectSponsoredMessage(global, peerId);\n  if (!peer || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { peer, random: message.randomId });\n});\n\naddActionHandler('clickSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { peerId, isMedia, isFullscreen } = payload;\n  const peer = selectPeer(global, peerId);\n  const message = selectSponsoredMessage(global, peerId);\n  if (!peer || !message) {\n    return;\n  }\n\n  void callApi('clickSponsoredMessage', {\n    peer, random: message.randomId, isMedia, isFullscreen,\n  });\n});\n\naddActionHandler('reportSponsoredMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('reportSponsoredMessage', { peer, randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    global = deleteSponsoredMessage(global, peerId);\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId: peerId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chat.id, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const {\n    url, shouldSkipModal, ignoreDeepLinks, tabId = getCurrentTabId(),\n  } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (!ignoreDeepLinks && isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.closeStoryViewer({ tabId });\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const replyingInfo = tabState.replyingMessage;\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n  global = getGlobal();\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const newReplyInfo = {\n    type: 'message',\n    replyToMsgId: replyingInfo.messageId,\n    replyToTopId: replyingInfo.toThreadId,\n    replyToPeerId: currentChatId,\n    quoteText: replyingInfo.quoteText,\n  } as ApiInputMessageReplyInfo;\n\n  const currentReplyInfo = replyingInfo.messageId\n    ? newReplyInfo : selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n    },\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    }, true);\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadPaidReactionPrivacy', (): ActionReturnType => {\n  callApi('fetchPaidReactionPrivacy');\n  return undefined;\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nconst MESSAGES_TO_REPORT_DELIVERY = new Map<string, number[]>();\nlet reportDeliveryTimeout: number | undefined;\naddActionHandler('reportMessageDelivery', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const currentIds = MESSAGES_TO_REPORT_DELIVERY.get(chatId) || [];\n  currentIds.push(messageId);\n  MESSAGES_TO_REPORT_DELIVERY.set(chatId, currentIds);\n\n  if (!reportDeliveryTimeout) {\n    // Slightly unsafe in the multitab environment, but there is no better way to do it now.\n    // Not critical if user manages to close the tab in a show window before the report is sent.\n    reportDeliveryTimeout = window.setTimeout(() => {\n      reportDeliveryTimeout = undefined;\n\n      MESSAGES_TO_REPORT_DELIVERY.forEach((messageIds, cId) => {\n        const chat = selectChat(global, cId);\n        if (!chat) return;\n\n        callApi('reportMessagesDelivery', { chat, messageIds });\n      });\n      MESSAGES_TO_REPORT_DELIVERY.clear();\n    }, 500);\n  }\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET, RESTRICTED_EMOJI_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState } from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions): Promise<void> => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadUserCollectibleStatuses', async (global, actions): Promise<void> => {\n  setGlobal(global);\n\n  const { hash } = global.collectibleEmojiStatuses || {};\n\n  const result = await callApi('fetchCollectibleEmojiStatuses', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    collectibleEmojiStatuses: {\n      hash: result.hash,\n      statuses: result.statuses,\n    },\n  };\n  setGlobal(global);\n  const documentIds = result.statuses.map(({ documentId }) => documentId);\n\n  actions.loadCustomEmojis({ ids: documentIds });\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadRestrictedEmojiStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: RESTRICTED_EMOJI_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    restrictedEmoji: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error: unknown) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showNotification({\n          message: oldTranslate('StickerPack.ErrorNotFound'),\n          tabId,\n        });\n\n        if ('shortName' in stickerSetInfo\n          && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n          global = updateTabState(global, {\n            openedStickerSetShortName: undefined,\n          }, tabId);\n          setGlobal(global);\n        }\n      });\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, shouldIgnoreCache, tabId = getCurrentTabId() } = payload;\n  if (shouldIgnoreCache || !selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiMessageSearchContext, ApiPeer, ApiTopic,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup, toChannelId } from '../../helpers/chats';\nimport { isApiPeerChat } from '../../helpers/peers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addUserStatuses,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectPeer, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds,\n      } = result;\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    minDate: date,\n    maxDate,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.searchMessagesGlobal({ type: 'text', tabId });\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const {\n    type, context, shouldResetResultsByType, shouldCheckFetchingMessagesStatus, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (shouldCheckFetchingMessagesStatus) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: true }, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n\n  const {\n    query, resultsByType, chatId,\n  } = selectTabState(global, tabId).globalSearch;\n  const {\n    totalCount, foundIds, nextOffsetId, nextOffsetPeerId, nextOffsetRate,\n  } = (!shouldResetResultsByType && resultsByType?.[type]) || {};\n\n  // Stop loading if we have all the messages or server returned 0\n  if (totalCount !== undefined && (!totalCount || (foundIds && foundIds.length >= totalCount))) {\n    return;\n  }\n\n  const chat = chatId ? selectPeer(global, chatId) : undefined;\n  const offsetPeer = nextOffsetPeerId ? selectPeer(global, nextOffsetPeerId) : undefined;\n\n  searchMessagesGlobal(global, {\n    query,\n    type,\n    context,\n    shouldResetResultsByType,\n    offsetRate: nextOffsetRate,\n    offsetId: nextOffsetId,\n    offsetPeer,\n    peer: chat,\n    tabId,\n  });\n});\n\naddActionHandler('searchPopularBotApps', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const popularBotApps = selectTabState(global, tabId).globalSearch.popularBotApps;\n  const offset = popularBotApps?.nextOffset;\n  if (popularBotApps?.peerIds && !offset) return; // Already fetched all\n\n  global = updateGlobalSearchFetchingStatus(global, { botApps: true }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchPopularAppBots', { offset });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    popularBotApps: {\n      peerIds: [...(popularBotApps?.peerIds || []), ...result.peerIds],\n      nextOffset: result.nextOffset,\n    },\n  }, tabId);\n  global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n\n  setGlobal(global);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(global: T, params: {\n  query?: string;\n  type: ApiGlobalMessageSearchType;\n  context?: ApiMessageSearchContext;\n  offsetRate?: number;\n  offsetId?: number;\n  offsetPeer?: ApiPeer;\n  peer?: ApiPeer;\n  maxDate?: number;\n  minDate?: number;\n  tabId: TabArgs<T>[0];\n  shouldResetResultsByType?: boolean;\n}) {\n  const {\n    query = '', type, context, offsetRate, offsetId, offsetPeer,\n    peer, maxDate, minDate, shouldResetResultsByType, tabId = getCurrentTabId(),\n  } = params;\n  let result: {\n    messages: ApiMessage[];\n    userStatusesById?: Record<number, ApiUserStatus>;\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextOffsetRate?: number;\n    nextOffsetId?: number;\n    nextOffsetPeerId?: string;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (peer) {\n    const inChatResultRequest = callApi('searchMessagesInChat', {\n      peer,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId,\n      minDate,\n      maxDate,\n    });\n    const isChat = isApiPeerChat(peer);\n    const topicsRequest = isChat && peer.isForum ? callApi('fetchTopics', {\n      chat: peer,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [inChatResult, topics] = await Promise.all([inChatResultRequest, topicsRequest]);\n\n    if (inChatResult) {\n      const {\n        messages, totalCount, nextOffsetId,\n      } = inChatResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        totalCount,\n        nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      offsetId,\n      offsetPeer,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      context,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (shouldResetResultsByType) {\n    global = updateGlobalSearch(global, {\n      resultsByType: {\n        ...(selectTabState(global, tabId).globalSearch || {}).resultsByType,\n        [type]: undefined,\n      },\n    }, tabId);\n  }\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, userStatusesById, totalCount, nextOffsetRate, nextOffsetId, nextOffsetPeerId,\n  } = result;\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextOffsetRate,\n    nextOffsetId,\n    nextOffsetPeerId,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, peer!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { getSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { callApi } from '../../../api/gramjs';\nimport { getChatMediaMessageIds, getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  addUserStatuses,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateMiddleSearch,\n  updateMiddleSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectCurrentSharedMediaSearch,\n  selectPeer,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('performMiddleSearch', async (global, actions, payload): Promise<void> => {\n  const {\n    query, chatId, threadId = MAIN_THREAD_ID, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = realChatId ? selectPeer(global, realChatId) : undefined;\n  let currentSearch = selectCurrentMiddleSearch(global, tabId);\n  if (!peer) {\n    return;\n  }\n\n  if (!currentSearch) {\n    global = updateMiddleSearch(global, realChatId, threadId, {}, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n  currentSearch = selectCurrentMiddleSearch(global, tabId)!;\n\n  const {\n    results, savedTag, type, isHashtag,\n  } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n  const offsetRate = results?.nextOffsetRate;\n  const offsetPeerId = results?.nextOffsetPeerId;\n  const offsetPeer = offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  const shouldHaveQuery = isHashtag || !savedTag;\n  if (shouldHaveQuery && !query) {\n    global = updateMiddleSearch(global, realChatId, threadId, {\n      fetchingQuery: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateMiddleSearch(global, realChatId, threadId, {\n    fetchingQuery: query,\n  }, tabId);\n  setGlobal(global);\n\n  let result;\n  if (type === 'chat') {\n    result = await callApi('searchMessagesInChat', {\n      peer,\n      type: 'text',\n      query: isHashtag ? `#${query}` : query,\n      threadId,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      isSavedDialog,\n      savedTag,\n    });\n  }\n\n  if (type === 'myChats') {\n    result = await callApi('searchMessagesGlobal', {\n      type: 'text',\n      query: isHashtag ? `#${query}` : query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetRate,\n      offsetPeer,\n    });\n  }\n\n  if (type === 'channels') {\n    result = await callApi('searchHashtagPosts', {\n      hashtag: query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetPeer,\n      offsetRate,\n    });\n  }\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId, nextOffsetRate, nextOffsetPeerId,\n  } = result;\n\n  const newFoundIds = messages.map(getSearchResultKey);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentMiddleSearch(global, tabId);\n  const hasTagChanged = currentSearch?.savedTag && !isSameReaction(savedTag, currentSearch.savedTag);\n  const hasSearchChanged = currentSearch?.fetchingQuery !== query;\n  if (!currentSearch || hasSearchChanged || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : peer.id;\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addMessages(global, messages);\n  global = updateMiddleSearch(global, resultChatId, threadId, {\n    fetchingQuery: undefined,\n  }, tabId);\n  global = updateMiddleSearchResults(global, resultChatId, threadId, {\n    foundIds: newFoundIds,\n    totalCount,\n    nextOffsetId,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    query: query || '',\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchHashtag', (global, actions, payload): ActionReturnType => {\n  const { hashtag, tabId = getCurrentTabId() } = payload;\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (!messageList) {\n    return;\n  }\n\n  const cleanQuery = hashtag.replace(/^#/, '');\n\n  actions.updateMiddleSearch({\n    chatId: messageList.chatId,\n    threadId: messageList.threadId,\n    update: {\n      isHashtag: true,\n      requestedQuery: cleanQuery,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = selectPeer(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!peer || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, peer, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n    global = getGlobal();\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, peer, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n) : number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction : LoadMoreDirection,\n  limit : number, newFoundIdsCount : number,\n  currentSegment?: ChatMediaSearchSegment,\n) : LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, userStatusesById,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getChatMediaMessageIds(byId, newFoundIds, false);\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites } = result;\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPane', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPane', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { Thread, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n  selectTopics,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages, loadAllStories, loadAllHiddenStories,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    whenFirstBatchDone: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived' });\n      loadAllChats({ listType: 'saved' });\n      preloadTopChatMessages();\n      loadAllStories();\n      loadAllHiddenStories();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topics = selectTopics(global, currentChatId);\n        const topicLastMessages = topics ? Object.values(topics)\n          .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n          .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { webAuthorizations } = result;\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_VERIFICATION_PEERS_LIMIT } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChats,\n  updateManagementProgress,\n  updatePeerPhotos,\n  updatePeerPhotosIsLoading,\n  updateUser,\n  updateUserCommonChats,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPhotos,\n  selectTabState,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const profilePhotos = selectPeerPhotos(global, userId);\n  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatar\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (profilePhotos?.count && hasChangedPhoto)) {\n    actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  const commonChats = selectUserCommonChats(global, userId);\n  if (!user || isUserBot(user) || commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchCommonChats', user, commonChats?.maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chatIds, count } = result;\n\n  const ids = unique((commonChats?.ids || []).concat(chatIds));\n\n  global = getGlobal();\n  global = updateUserCommonChats(global, user.id, {\n    maxId: chatIds.length ? chatIds[chatIds.length - 1] : undefined,\n    ids,\n    isFullyLoaded: ids.length >= count,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadMoreProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { peerId, shouldInvalidateCache, isPreload } = payload;\n  const isPrivate = isUserId(peerId);\n\n  const user = isPrivate ? selectUser(global, peerId) : undefined;\n  const chat = !isPrivate ? selectChat(global, peerId) : undefined;\n  const peer = user || chat;\n  const profilePhotos = selectPeerPhotos(global, peerId);\n  if (!peer?.avatarPhotoId) {\n    return;\n  }\n\n  if (profilePhotos && !shouldInvalidateCache && (isPreload || !profilePhotos.nextOffset)) return;\n\n  global = updatePeerPhotosIsLoading(global, peerId, true);\n  setGlobal(global);\n\n  global = getGlobal();\n\n  let userFullInfo = selectUserFullInfo(global, peerId);\n  let chatFullInfo = selectChatFullInfo(global, peerId);\n  if (user && !userFullInfo) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const peerFullInfo = userFullInfo || chatFullInfo;\n  if (!peerFullInfo) return;\n\n  const offset = profilePhotos?.nextOffset;\n  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;\n\n  const result = await callApi('fetchProfilePhotos', {\n    peer,\n    offset,\n    limit,\n  });\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const {\n    photos, count, nextOffsetId,\n  } = result;\n\n  global = updatePeerPhotos(global, peerId, {\n    newPhotos: photos,\n    count,\n    nextOffset: nextOffsetId,\n    fullInfo: peerFullInfo,\n    shouldInvalidateCache,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      accountResultIds, globalResultIds,\n    } = result;\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', async (global, actions, payload): Promise<void> => {\n  const {\n    emojiStatus, referrerWebAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    if (referrerWebAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n        tabId,\n      });\n    }\n\n    actions.openPremiumModal({ initialSection: 'emoji_status', tabId });\n    return;\n  }\n\n  const result = await callApi('updateEmojiStatus', emojiStatus);\n\n  if (referrerWebAppKey) {\n    if (!result) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SERVER_ERROR',\n          },\n        },\n        tabId,\n      });\n      return;\n    }\n\n    actions.sendWebAppEvent({\n      webAppKey: referrerWebAppKey,\n      event: {\n        eventType: 'emoji_status_set',\n      },\n      tabId,\n    });\n    actions.showNotification({\n      message: {\n        key: 'BotSuggestedStatusUpdated',\n      },\n      customEmojiIconId: emojiStatus.documentId,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openSuggestedStatusModal', async (global, actions, payload): Promise<void> => {\n  const {\n    customEmojiId, duration, botId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: [customEmojiId],\n  });\n  if (!customEmoji?.[0]) {\n    if (webAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SUGGESTED_EMOJI_INVALID',\n          },\n        },\n        tabId,\n      });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    suggestedStatusModal: {\n      customEmojiId,\n      duration,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('markBotVerificationInfoShown', (global, actions, payload): ActionReturnType => {\n  const { peerId } = payload;\n\n  const currentPeerIds = global.settings.botVerificationShownPeerIds;\n  const newPeerIds = unique([peerId, ...currentPeerIds]).slice(0, BOT_VERIFICATION_PEERS_LIMIT);\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      botVerificationShownPeerIds: newPeerIds,\n    },\n  };\n\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { WebApp, WebAppModalStateType } from '../../types/webapp';\nimport type {\n  GlobalState, TabArgs,\n} from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { getWebAppKey } from '../helpers/bots';\nimport { selectActiveWebApp, selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n\nexport function updateWebApp <T extends GlobalState>(\n  global: T, key: string, webAppUpdate: Partial<WebApp>,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  const originalWebApp = openedWebApps[key];\n\n  if (!originalWebApp) return global;\n\n  const updatedValue = {\n    ...originalWebApp,\n    ...webAppUpdate,\n  };\n\n  const updatedWebAppKey = getWebAppKey(updatedValue);\n  if (!updatedWebAppKey) return global;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      openedWebApps: {\n        ...openedWebApps,\n        [updatedWebAppKey]: updatedValue,\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function activateWebAppIfOpen<T extends GlobalState>(\n  global: T, webAppKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  if (!openedWebApps[webAppKey]) {\n    return global;\n  }\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: webAppKey,\n      modalState: 'maximized',\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function addWebAppToOpenList<T extends GlobalState>(\n  global: T, webApp: WebApp,\n  makeActive: boolean = true, openModalIfNotOpen: boolean = true,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const key = getWebAppKey(webApp);\n\n  if (!key) return global;\n  const newOpenedKeys = [...currentTabState.webApps.openedOrderedKeys];\n  if (!newOpenedKeys.includes(key)) newOpenedKeys.push(key);\n\n  const newSessionKeys = [...currentTabState.webApps.sessionKeys];\n  if (!newSessionKeys.includes(key)) newSessionKeys.push(key);\n\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...makeActive && { activeWebAppKey: key },\n      isMoreAppsTabActive: false,\n      isModalOpen: openModalIfNotOpen,\n      modalState: 'maximized',\n      openedWebApps: {\n        ...openedWebApps,\n        [key]: webApp,\n      },\n      openedOrderedKeys: newOpenedKeys,\n      sessionKeys: newSessionKeys,\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function removeActiveWebAppFromOpenList<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const activeWebAppKey = currentTabState.webApps.activeWebAppKey;\n\n  if (!activeWebAppKey) return global;\n\n  return removeWebAppFromOpenList(global, activeWebAppKey, false, tabId);\n}\n\nexport function removeWebAppFromOpenList<T extends GlobalState>(\n  global: T, key: string, skipClosingConfirmation?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const { openedWebApps, openedOrderedKeys, activeWebAppKey } = currentTabState.webApps;\n  const webApp = openedWebApps[key];\n  if (!webApp) return global;\n\n  if (!skipClosingConfirmation && webApp.shouldConfirmClosing) {\n    return updateWebApp(global, key, { isCloseModalOpen: true }, tabId);\n  }\n\n  const updatedOpenedWebApps = { ...openedWebApps };\n  const removingWebAppKey = getWebAppKey(webApp);\n\n  let newOpenedKeys = openedOrderedKeys;\n\n  if (removingWebAppKey) {\n    delete updatedOpenedWebApps[removingWebAppKey];\n    newOpenedKeys = openedOrderedKeys.filter((k) => k !== removingWebAppKey);\n  }\n\n  const isRemovedAppActive = activeWebAppKey === getWebAppKey(webApp);\n\n  const openedWebAppsKeys = Object.keys(updatedOpenedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...isRemovedAppActive && {\n        activeWebAppKey: openedWebAppsCount\n          ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      },\n      openedWebApps: updatedOpenedWebApps,\n      openedOrderedKeys: newOpenedKeys,\n      ...!openedWebAppsCount && {\n        sessionKeys: [],\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function clearOpenedWebApps<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const webAppsNotAllowedToClose = Object.fromEntries(\n    Object.entries(currentTabState.webApps.openedWebApps).filter(\n      ([, webApp]) => webApp.shouldConfirmClosing,\n    ),\n  );\n\n  const webAppsNotAllowedToCloseValues = Object.values(webAppsNotAllowedToClose);\n  const hasNotAllowedToCloseApps = webAppsNotAllowedToCloseValues.length > 0;\n\n  if (!hasNotAllowedToCloseApps) {\n    return updateTabState(global, {\n      webApps: {\n        ...currentTabState.webApps,\n        activeWebAppKey: undefined,\n        openedWebApps: {},\n        openedOrderedKeys: [],\n        sessionKeys: [],\n      },\n    }, tabId);\n  }\n\n  const currentActiveWebApp = selectActiveWebApp(global, tabId);\n\n  const newActiveWebApp = currentActiveWebApp?.shouldConfirmClosing\n    ? currentActiveWebApp : webAppsNotAllowedToCloseValues[0];\n\n  const newActiveWebAppKey = getWebAppKey(newActiveWebApp);\n\n  if (newActiveWebAppKey) {\n    webAppsNotAllowedToClose[newActiveWebAppKey] = {\n      ...newActiveWebApp,\n      isCloseModalOpen: true,\n    };\n  }\n  const newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((k) => webAppsNotAllowedToClose[k]);\n\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      activeWebAppKey: newActiveWebAppKey,\n      isMoreAppsTabActive: false,\n      openedWebApps: webAppsNotAllowedToClose,\n      openedOrderedKeys: newOpenedKeys,\n    },\n  }, tabId);\n}\n\nexport function hasOpenedWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 0;\n}\n\nexport function hasOpenedMoreThanOneWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 1;\n}\n\nexport function replaceWebAppModalState<T extends GlobalState>(\n  global: T, modalState: WebAppModalStateType,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      modalState,\n    },\n  }, tabId);\n}\n\nexport function replaceIsWebAppModalOpen<T extends GlobalState>(\n  global: T, value: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isModalOpen: value,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { WebApp } from '../../../types/webapp';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport {\n  type ApiChat,\n  type ApiContact,\n  type ApiInputMessageReplyInfo,\n  type ApiPeer,\n  type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getWebAppKey,\n} from '../../helpers/bots';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  removeBlockedUser,\n  updateBotAppPermissions,\n  updateManagementProgress,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  activateWebAppIfOpen,\n  addWebAppToOpenList,\n  replaceInlineBotSettings,\n  replaceInlineBotsIsLoading,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectSender,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { fetchChatByUsername } from './chats';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'copy': {\n      copyTextToClipboard(button.copyText);\n      actions.showNotification({ message: oldTranslate('ExactTextCopied', button.copyText), tabId });\n      break;\n    }\n    case 'callback': {\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      if (!sender) {\n        return;\n      }\n\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: sender.id, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      const botId = message.viaBotId || sender?.id;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTopBotApps', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topBotApps;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopBotApps');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topBotApps: {\n      ...global.topBotApps,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    const sender = selectSender(global, message);\n    botId = message.viaBotId || sender?.id;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${botSender.usernames![0].username} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    appName: bot.firstName,\n    url: webViewUrl,\n    botId,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam, isFullscreen,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n    isFullscreen,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullScreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    replyInfo,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullScreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('requestMainWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, theme, startParam, mode, shouldMarkBotTrusted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    if (shouldMarkBotTrusted) {\n      actions.markBotTrusted({ botId, isWriteAllowed: true, tabId });\n    } else {\n      global = updateTabState(global, {\n        botTrustRequest: {\n          botId,\n          type: 'webApp',\n          onConfirm: {\n            action: 'requestMainWebView',\n            payload,\n          },\n        },\n      }, tabId);\n      setGlobal(global);\n      return;\n    }\n  }\n\n  const result = await callApi('requestMainWebView', {\n    bot,\n    peer,\n    theme,\n    startParam,\n    mode,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullscreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('loadPreviewMedias', async (global, actions, payload): Promise<void> => {\n  const {\n    botId,\n  } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const medias = await callApi('fetchPreviewMedias', {\n    bot,\n  });\n\n  global = getGlobal();\n  if (medias) {\n    global = {\n      ...global,\n      users: {\n        ...global.users,\n        previewMediaByBotId: {\n          ...global.users.previewMediaByBotId,\n          [botId]: medias,\n        },\n      },\n    };\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('openWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipInFuture, tabId = getCurrentTabId() } = payload || {};\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      byKey: {\n        ...global.settings.byKey,\n        shouldSkipWebAppCloseConfirmation: Boolean(shouldSkipInFuture),\n      },\n    },\n  };\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, mode, theme, isWriteAllowed, isFromConfirm, shouldSkipBotTrustRequest,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, appName)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      global = getGlobal();\n\n      const attachBot = result.bot;\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  const shouldRequestBotTrust = !shouldSkipBotTrustRequest && (botApp.isInactive || !selectIsTrustedBot(global, botId));\n\n  if (shouldRequestBotTrust) {\n    payload.shouldSkipBotTrustRequest = true;\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const { url, isFullscreen } = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    mode,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = getGlobal();\n\n  const peerId = (peer ? peer.id : bot!.id);\n\n  const newActiveApp: WebApp = {\n    url,\n    appName: appName && bot.firstName,\n    peerId,\n    botId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeActiveWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nexport function isWepAppOpened<T extends GlobalState>(\n  global: T, webApp: Partial<WebApp>, tabId: number,\n) {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n  const key = getWebAppKey(webApp);\n  if (!key) return false;\n  return openedWebApps[key];\n}\n\nexport function checkIfOpenOrActivate<T extends GlobalState>(\n  global: T, botId: string, tabId: number, requestUrl?: string, webAppName?: string,\n) {\n  const webAppForCheck = { botId, requestUrl, webAppName };\n  if (isWepAppOpened(global, webAppForCheck, tabId)) {\n    const key = getWebAppKey(webAppForCheck);\n    if (key) {\n      global = activateWebAppIfOpen(global, key, tabId);\n      setGlobal(global);\n    }\n    return true;\n  }\n  return false;\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = global.settings.byKey.language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserEmojiStatusPermission', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, isEnabled, isBotAccessEmojiGranted,\n  } = payload;\n\n  const bot = selectBot(global, botId);\n\n  if (!botId || !bot) {\n    return;\n  }\n\n  const result = await callApi('toggleUserEmojiStatusPermission', {\n    bot, isEnabled,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, botId, {\n    isBotCanManageEmojiStatus: isEnabled,\n    isBotAccessEmojiGranted,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserLocationPermission', (global, actions, payload): ActionReturnType => {\n  const {\n    botId, isAccessGranted,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  global = getGlobal();\n  global = updateBotAppPermissions(global, bot.id, { geolocation: isAccessGranted });\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: email,\n  }, tabId);\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { errorKey: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type {\n  ApiInputInvoice, ApiInputInvoiceStarGift, ApiRequestInputInvoice,\n} from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { RegularLangFnParameters } from '../../../util/localization';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport {\n  getRequestInputInvoice,\n  getRequestInputSavedStarGift,\n} from '../../helpers/payments';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  closeInvoice,\n  openStarsTransactionFromReceipt,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo,\n  setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectPaymentInputInvoice,\n  selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStarsPayment,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n\n  if ('error' in form) {\n    setGlobal(global);\n    return;\n  }\n\n  if (form.type === 'regular') {\n    global = updatePayment(global, {\n      inputInvoice: payload,\n      form,\n      isPaymentModalOpen: true,\n      isExtendedMedia: (payload as any).isExtendedMedia,\n      status: undefined,\n    }, tabId);\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice,\n        form,\n        status: 'pending',\n      },\n    }, tabId);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('sendStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, message, shouldHideName, shouldUpgrade, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGift = {\n    type: 'stargift',\n    peerId,\n    giftId: gift.id,\n    message,\n    shouldHideName,\n    shouldUpgrade: shouldUpgrade || undefined,\n  };\n\n  payInputStarInvoice(global, inputInvoice, gift.stars, tabId);\n});\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (result.receipt.type === 'stars') {\n    global = openStarsTransactionFromReceipt(global, result.receipt, tabId);\n  } else {\n    global = setReceipt(global, result.receipt, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment.form!;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const paymentState = selectTabState(global, tabId).payment;\n  const { form, temporaryPassword, inputInvoice } = paymentState;\n\n  if (!inputInvoice || !form) {\n    return;\n  }\n\n  const { nativeProvider, formId } = form;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    paymentState,\n    tabId,\n  });\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { directInfo, tabId = getCurrentTabId() } = payload;\n  const starPayment = selectStarsPayment(global, tabId);\n  const inputInvoice = starPayment?.inputInvoice || directInfo?.inputInvoice;\n  if (!inputInvoice) return;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const formId = (starPayment.form?.formId || starPayment.subscriptionInfo?.subscriptionFormId || directInfo?.formId)!;\n\n  global = updateStarsPayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateStarsPayment(global, { status: 'failed' }, tabId);\n    setGlobal(global);\n    actions.closeStarsPaymentModal({ tabId });\n    actions.closeGiftModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStarsPayment(global, { status: 'paid' }, tabId);\n  setGlobal(global);\n  actions.closeStarsPaymentModal({ tabId });\n\n  if ('channelId' in result) {\n    actions.openChat({ id: result.channelId, tabId });\n  }\n\n  actions.apiUpdate({\n    '@type': 'updateStarPaymentStateCompleted',\n    paymentState: directInfo ? { inputInvoice } : starPayment,\n    tabId,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.form?.nativeParams.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n      && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { descriptionKey: { key: 'ErrorUnexpected' } satisfies RegularLangFnParameters };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  const starOptions = await callApi('fetchStarsGiveawayOptions');\n\n  if (!result || !starOptions) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen: true,\n      prepaidGiveaway,\n      starOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n  if (!gifts) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftModal: {\n      forPeerId: forUserId,\n      gifts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStarsGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starsGiftOptions = await callApi('getStarsGiftOptions', {});\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    starsGiftModal: {\n      isOpen: true,\n      forUserId,\n      starsGiftOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { messageKey: { key: 'ErrorUnexpected' }, field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { messageKey: result.messageKey, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    monetizationStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = Math.floor(Date.now() / 1000);\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('launchPrepaidStarsGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'starsgiveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n      stars: paymentPurpose.stars,\n      users: paymentPurpose.users,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('upgradeGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, shouldKeepOriginalDetails, upgradeStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftUpgrade: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftUpgradeModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!upgradeStars) {\n    callApi('upgradeStarGift', {\n      inputSavedGift: requestSavedGift,\n      shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftUpgrade',\n    inputSavedGift: gift,\n    shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n  };\n\n  payInputStarInvoice(global, invoice, upgradeStars, tabId);\n});\n\naddActionHandler('transferGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, recipientId, transferStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectChat(global, recipientId);\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!peer || !requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftTransfer: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftTransferModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!transferStars) {\n    callApi('transferStarGift', {\n      inputSavedGift: requestSavedGift,\n      toPeer: peer,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftTransfer',\n    inputSavedGift: gift,\n    recipientId,\n  };\n\n  payInputStarInvoice(global, invoice, transferStars, tabId);\n});\n\nasync function payInputStarInvoice<T extends GlobalState>(\n  global: T, inputInvoice: ApiInputInvoice, price: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const actions = getActions();\n  const balance = global.stars?.balance;\n\n  if (balance === undefined) return;\n\n  if (balance.amount < price) {\n    actions.openStarsBalanceModal({ tabId });\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n  setGlobal(global);\n\n  if ('error' in form) {\n    return;\n  }\n\n  actions.sendStarPaymentForm({\n    directInfo: {\n      inputInvoice,\n      formId: form.formId,\n    },\n    tabId,\n  });\n}\n\naddActionHandler('openUniqueGiftBySlug', async (global, actions, payload): Promise<void> => {\n  const {\n    slug, tabId = getCurrentTabId(),\n  } = payload;\n\n  const gift = await callApi('fetchUniqueStarGift', { slug });\n\n  if (!gift) {\n    actions.showNotification({\n      message: {\n        key: 'GiftWasNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.openGiftInfoModal({ gift, tabId });\n});\n\naddActionHandler('processStarGiftWithdrawal', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, password, tabId = getCurrentTabId(),\n  } = payload;\n\n  let giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  global = updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      isLoading: true,\n      errorKey: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const inputGift = getRequestInputSavedStarGift(global, gift);\n  if (!inputGift) {\n    return;\n  }\n\n  const result = await callApi('fetchStarGiftWithdrawalUrl', { inputGift, password });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  if ('error' in result) {\n    global = updateTabState(global, {\n      giftWithdrawModal: {\n        ...giftWithdrawModal,\n        isLoading: false,\n        errorKey: result.messageKey,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.openUrl({ url: result.url, shouldSkipModal: true, tabId });\n  actions.closeGiftWithdrawModal({ tabId });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ApiSavedStarGift } from '../../../api/types';\nimport type { StarGiftCategory } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { areInputSavedGiftsEqual, getRequestInputSavedStarGift } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  appendStarsSubscriptions,\n  appendStarsTransactions,\n  replacePeerSavedGifts,\n  updateStarsBalance,\n  updateStarsSubscriptionLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectGiftProfileFilter,\n  selectPeer,\n  selectPeerSavedGifts,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStatus = global.stars;\n  const needsTopupOptions = !currentStatus?.topupOptions;\n\n  const [status, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!status || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stars: {\n      ...currentStatus,\n      balance: status.balance,\n      topupOptions: topupOptions || currentStatus!.topupOptions,\n      history: {\n        all: undefined,\n        inbound: undefined,\n        outbound: undefined,\n      },\n      subscriptions: undefined,\n    },\n  };\n\n  if (status.history) {\n    global = appendStarsTransactions(global, 'all', status.history, status.nextHistoryOffset);\n  }\n\n  if (status.subscriptions) {\n    global = appendStarsSubscriptions(global, status.subscriptions, status.nextSubscriptionOffset);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type } = payload;\n\n  const history = global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound' || undefined,\n    isOutbound: type === 'outbound' || undefined,\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  if (result.history) {\n    global = appendStarsTransactions(global, type, result.history, result.nextOffset);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadStarGifts', async (global): Promise<void> => {\n  const result = await callApi('fetchStarGifts');\n\n  if (!result) {\n    return;\n  }\n\n  const byId = buildCollectionByKey(result, 'id');\n\n  const idsByCategoryName: Record<StarGiftCategory, string[]> = {\n    all: [],\n    stock: [],\n    limited: [],\n  };\n\n  const allStarGiftIds = Object.keys(byId);\n  const allStarGifts = Object.values(byId);\n\n  const limitedStarGiftIds = allStarGifts.map((gift) => (gift.isLimited ? gift.id : undefined))\n    .filter(Boolean) as string[];\n\n  const stockedStarGiftIds = allStarGifts.map((gift) => (\n    gift.availabilityRemains || !gift.availabilityTotal ? gift.id : undefined\n  )).filter(Boolean) as string[];\n\n  idsByCategoryName.all = allStarGiftIds;\n  idsByCategoryName.limited = limitedStarGiftIds;\n  idsByCategoryName.stock = stockedStarGiftIds;\n\n  allStarGifts.forEach((gift) => {\n    const starsCategory = gift.stars;\n    if (!idsByCategoryName[starsCategory]) {\n      idsByCategoryName[starsCategory] = [];\n    }\n    idsByCategoryName[starsCategory].push(gift.id);\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    starGifts: {\n      byId,\n      idsByCategory: idsByCategoryName,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerSavedGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, shouldRefresh, withTransition, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const currentGifts = selectPeerSavedGifts(global, peerId, tabId);\n  const localNextOffset = currentGifts?.nextOffset;\n\n  if (!shouldRefresh && currentGifts && !localNextOffset) return; // Already loaded all\n\n  global = getGlobal();\n  const fetchingFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  const result = await callApi('fetchSavedStarGifts', {\n    peer,\n    offset: !shouldRefresh ? localNextOffset : '',\n    filter: fetchingFilter,\n  });\n\n  global = getGlobal();\n  const currentFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  if (!result || currentFilter !== fetchingFilter) {\n    return;\n  }\n\n  const newGifts = currentGifts && !shouldRefresh ? currentGifts.gifts.concat(result.gifts) : result.gifts;\n\n  const tabState = selectTabState(global, tabId);\n\n  if (withTransition) {\n    global = updateTabState(global, {\n      savedGifts: {\n        ...tabState.savedGifts,\n        transitionKey: (tabState?.savedGifts.transitionKey || 0) + 1,\n      },\n    }, tabId);\n  }\n\n  global = replacePeerSavedGifts(global, peerId, newGifts, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsSubscriptions', async (global): Promise<void> => {\n  const subscriptions = global.stars?.subscriptions;\n  const offset = subscriptions?.nextOffset;\n  if (subscriptions && !offset) return; // Already loaded all\n\n  global = updateStarsSubscriptionLoading(global, true);\n  setGlobal(global);\n\n  const result = await callApi('fetchStarsSubscriptions', {\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  global = appendStarsSubscriptions(global, result.subscriptions, result.nextOffset);\n  setGlobal(global);\n});\n\naddActionHandler('changeStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id, isCancelled } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('changeStarsSubscription', {\n    peer,\n    subscriptionId: id,\n    isCancelled,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('fulfillStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('fulfillStarsSubscription', {\n    peer,\n    subscriptionId: id,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('changeGiftVisibility', async (global, actions, payload): Promise<void> => {\n  const { gift, shouldUnsave, tabId = getCurrentTabId() } = payload;\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const oldGifts = selectTabState(global, tabId).savedGifts.giftsByPeerId[peerId];\n  if (oldGifts?.gifts?.length) {\n    const newGifts = oldGifts.gifts.map((g) => {\n      if (g.inputGift && areInputSavedGiftsEqual(g.inputGift, gift)) {\n        return {\n          ...g,\n          isUnsaved: shouldUnsave,\n        } satisfies ApiSavedStarGift;\n      }\n      return g;\n    });\n    global = replacePeerSavedGifts(global, peerId, newGifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('saveStarGift', {\n    inputGift: requestInputGift,\n    shouldUnsave,\n  });\n  global = getGlobal();\n\n  if (!result) {\n    global = replacePeerSavedGifts(global, peerId, oldGifts.gifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  // Reload gift list to avoid issues with pagination\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabId)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('convertGiftToStars', async (global, actions, payload): Promise<void> => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const result = await callApi('convertStarGift', {\n    inputSavedGift: requestInputGift,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabId)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n  actions.openStarsBalanceModal({ tabId });\n});\n\naddActionHandler('openGiftUpgradeModal', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const samples = await callApi('fetchStarGiftUpgradePreview', {\n    giftId,\n  });\n\n  if (!samples) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftUpgradeModal: {\n      recipientId: peerId,\n      gift,\n      sampleAttributes: samples,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n","import type { ApiError, ApiReaction, ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, partition, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addPaidReaction,\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions:ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        type: 'emoji',\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const [paidReactions, regularReactions] = partition(newUserReactions, (r) => r.type === 'paid');\n  const trimmedRegularReactions = regularReactions.slice(-limit) as ApiReaction[];\n  const localReactions = [...paidReactions, ...trimmedRegularReactions];\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, localReactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions: trimmedRegularReactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('addLocalPaidReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, count, isPrivate, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const currentReactions = message.reactions?.results || [];\n  const newReactions = addPaidReaction(currentReactions, count, isPrivate);\n  global = updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results: newReactions,\n    },\n  });\n  setGlobal(global);\n\n  const messageKey = getMessageKey(message);\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    actions.startActiveReaction({\n      containerId: messageKey,\n      reaction: {\n        type: 'paid',\n      },\n      tabId,\n    });\n  }\n});\n\naddActionHandler('sendPaidReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, forcedAmount, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const paidReaction = message.reactions?.results?.find((r) => r.reaction.type === 'paid');\n  const count = forcedAmount || paidReaction?.localAmount || 0;\n  if (!count) {\n    return;\n  }\n  actions.resetLocalPaidReactions({ chatId, messageId });\n\n  try {\n    await callApi('sendPaidReaction', {\n      chat,\n      messageId,\n      count,\n      isPrivate: paidReaction?.localIsPrivate,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'BALANCE_TOO_LOW') {\n      actions.openStarsBalanceModal({ originReaction: { chatId, messageId, amount: count }, tabId });\n    }\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChannelMonetizationStatistics,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n  updateVerifyMonetizationModal,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeer,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  const { stats } = result;\n  global = getGlobal();\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChannelMonetizationStatistics', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  const chatFullInfo = selectChatFullInfo(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const dcId = chatFullInfo?.statisticsDcId;\n  const stats = await callApi('fetchChannelMonetizationStatistics', { peer, dcId });\n\n  if (!stats) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChannelMonetizationStatistics(global, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('processMonetizationRevenueWithdrawalUrl', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, currentPassword, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchMonetizationRevenueWithdrawalUrl', { peer, currentPassword });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: false,\n    errorKey: 'error' in result ? result.messageKey : undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if ('url' in result) {\n    actions.openUrl({\n      url: result.url,\n      shouldSkipModal: true,\n      tabId,\n      ignoreDeepLinks: true,\n    });\n    actions.closeMonetizationVerificationModal({ tabId });\n  }\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, MESSAGE_ID_REQUIRED_ERROR } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addStories,\n  addStoriesForPeer,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories, selectTabState,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stories: {\n      ...global.stories,\n      byPeerId: {\n        ...global.stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.profileIds?.length && peerStories?.profileIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.archiveIds?.length && peerStories?.archiveIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    description = '',\n    option = '',\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const response = await callApi('reportStory', {\n    peer,\n    storyId,\n    description,\n    option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        subject: 'story',\n        peerId,\n        description,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        description,\n        peerId,\n        subject: 'story',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n    botsPrivacy: 'none',\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  closeMiddleSearch,\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  actions.closeStoryViewer({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsTransactionModal({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n\n      global = closeMiddleSearch(global, chatId, threadId, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      monetizationStatistics: undefined,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n        isShareMessageModalShown: false,\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n\naddActionHandler('closeChatInviteModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatInviteModal: undefined,\n  }, tabId);\n});\n","import type { ApiChatType } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getWebAppKey } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addWebAppToOpenList,\n  clearOpenedWebApps,\n  hasOpenedMoreThanOneWebApps,\n  hasOpenedWebApps,\n  removeActiveWebAppFromOpenList,\n  removeWebAppFromOpenList,\n  replaceIsWebAppModalOpen,\n  replaceWebAppModalState,\n  updateWebApp,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectActiveWebApp, selectCurrentMessageList, selectTabState, selectWebApp,\n} from '../../selectors';\n\naddActionHandler('openWebAppTab', (global, actions, payload): ActionReturnType => {\n  const {\n    webApp, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!webApp) return;\n\n  global = getGlobal();\n  global = addWebAppToOpenList(global, webApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateWebApp', (global, actions, payload): ActionReturnType => {\n  const {\n    key, update, tabId = getCurrentTabId(),\n  } = payload;\n  return updateWebApp(global, key, update, tabId);\n});\n\naddActionHandler('closeActiveWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = removeActiveWebAppFromOpenList(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('openMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      activeWebAppKey: undefined,\n      isMoreAppsTabActive: true,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  const openedWebApps = tabState.webApps.openedWebApps;\n\n  const openedWebAppsKeys = Object.keys(openedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: openedWebAppsCount ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      isModalOpen: openedWebAppsCount > 0,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { key, skipClosingConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  global = removeWebAppFromOpenList(global, key, skipClosingConfirmation, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebAppModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  const shouldShowConfirmation = !shouldSkipConfirmation\n  && !global.settings.byKey.shouldSkipWebAppCloseConfirmation && hasOpenedMoreThanOneWebApps(global, tabId);\n\n  if (shouldShowConfirmation) {\n    actions.openWebAppsCloseConfirmationModal({ tabId });\n    return global;\n  }\n\n  global = clearOpenedWebApps(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('changeWebAppModalState', (global, actions, payload): ActionReturnType => {\n  const { state, tabId = getCurrentTabId() } = payload;\n\n  return replaceWebAppModalState(global, state, tabId);\n});\n\naddActionHandler('updateMiniAppCachedPosition', (global, actions, payload): ActionReturnType => {\n  const { position } = payload;\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      miniAppsCachedPosition: position,\n    },\n  };\n\n  return global;\n});\n\naddActionHandler('updateMiniAppCachedSize', (global, actions, payload): ActionReturnType => {\n  const { size } = payload;\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      miniAppsCachedSize: size,\n    },\n  };\n\n  return global;\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const activeWebApp = selectActiveWebApp(global, tabId);\n  if (!activeWebApp?.url) return undefined;\n\n  const key = getWebAppKey(activeWebApp);\n\n  return updateWebApp(global, key, { slug: payload.slug }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendWebAppEvent', (global, actions, payload): ActionReturnType => {\n  const { event, webAppKey, tabId = getCurrentTabId() } = payload;\n  const webApp = selectWebApp(global, webAppKey, tabId);\n  if (!webApp) return global;\n\n  const newPlannedEvents = webApp.plannedEvents ? [...webApp.plannedEvents, event] : [event];\n\n  actions.updateWebApp({\n    key: webAppKey,\n    update: {\n      plannedEvents: newPlannedEvents,\n    },\n    tabId,\n  });\n\n  return global;\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    emojiStatusAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    emojiStatusAccessModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    locationAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    locationAccessModal: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { type ActiveDownloads, FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  SCROLL_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { cancelScrollBlockingAnimation, isAnimatingScroll } from '../../../util/animateScroll';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageDownloadableMedia,\n  getMessageStatefulContent,\n  getPeerTitle,\n  isChatChannel,\n  isJoinedChannelMessage,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectCanForwardMessage,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = SCROLL_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n\n      const chatMessages = selectChatMessages(global, chatId);\n      // Workaround for scroll to local message 'you joined this channel'\n      const lastChatMessage = Object.values(chatMessages).reverse()[0];\n      if (lastMessageId && isJoinedChannelMessage(lastChatMessage) && lastChatMessage.id > lastMessageId) {\n        lastMessageId = lastChatMessage.id;\n      }\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, scrollTargetPosition,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: oldTranslate('Conversation.ErrorInaccessibleMessage'), tabId });\n    return undefined;\n  }\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  if (isAnimatingScroll()) {\n    cancelScrollBlockingAnimation();\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openReplyMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageId, quoteText, tabId = getCurrentTabId(),\n  } = payload;\n  return updateTabState(global, {\n    replyingMessage: {\n      fromChatId,\n      messageId,\n      quoteText,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      withMyScore,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      noAuthors: false,\n      noCaptions: false,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    forwardMessages: {},\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  const forwardableMessageIds = messageIds.filter((id) => {\n    const message = selectChatMessage(global, fromChatId, id);\n    return message && selectCanForwardMessage(global, message);\n  });\n\n  if (!forwardableMessageIds.length) {\n    return;\n  }\n\n  actions.openForwardMenu({ fromChatId, messageIds: forwardableMessageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, originMessage, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n    originChatId: originMessage?.chatId,\n    originMessageId: originMessage?.id,\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = getMessageDownloadableMedia(message);\n    if (!media) return;\n    actions.downloadMedia({ media, originMessage: message, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportModal = selectTabState(global, tabId).reportModal;\n  if (!reportModal) {\n    return undefined;\n  }\n\n  if (reportModal.sections.length === 1) {\n    actions.closeReportModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportModal: {\n      ...reportModal,\n      sections: reportModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    paidReactionModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closePaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    paidReactionModal: undefined,\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.oldTranslate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getPeerTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n    const statefulContent = getMessageStatefulContent(global, message);\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, statefulContent, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n\naddActionHandler('openDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, isSchedule,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    deleteMessageModal: {\n      chatId,\n      messageIds,\n      isSchedule,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getGlobal } from '..';\nimport { getMessageStatefulContent } from './messages';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: OldLangFn,\n  message: ApiMessage,\n) {\n  const global = getGlobal();\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n\n  const statefulContent = getMessageStatefulContent(global, message);\n\n  const description = getMessageSummaryDescription(lang, message, statefulContent, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId, currentContent } = selectTabState(global, tabId).globalSearch;\n\n  const fetchingStatus = query && currentContent !== GlobalSearchContent.BotApps\n    ? { chats: !chatId, messages: true } : undefined;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    fetchingStatus,\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  closeMiddleSearch,\n  resetMiddleSearch,\n  updateMiddleSearch,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\naddActionHandler('openMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateMiddleSearch(global, chatId, threadId, {}, tabId);\n});\n\naddActionHandler('closeMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return closeMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('updateMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const {\n    update, tabId = getCurrentTabId(),\n  } = payload;\n\n  let chatId;\n  let threadId;\n  if (payload.chatId) {\n    chatId = payload.chatId;\n    threadId = payload.threadId || MAIN_THREAD_ID;\n  } else {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  global = updateMiddleSearch(global, chatId, threadId, update, tabId);\n\n  return global;\n});\n\naddActionHandler('resetMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return resetMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n\naddActionHandler('closeSuggestedStatusModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    suggestedStatusModal: undefined,\n  }, tabId);\n});\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\nimport { IS_ELECTRON } from './windowEnvironment';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  ANIMATION_WAVE_MIN_INTERVAL,\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectSender,\n  selectTabState,\n  selectTopic,\n} from '../../selectors';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  const hasLocalId = notification.localId;\n  notification.localId ||= generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => (\n    hasLocalId ? n.localId === notification.localId : n.message === notification.message\n  ));\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || selectSender(global, message)?.id;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('requestWave', (global, actions, payload): ActionReturnType => {\n  const {\n    startX, startY, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!IS_WAVE_TRANSFORM_SUPPORTED || !selectCanAnimateInterface(global)) return undefined;\n\n  const tabState = selectTabState(global, tabId);\n  const currentLastTime = tabState.wave?.lastWaveTime || 0;\n  if (Date.now() - currentLastTime < ANIMATION_WAVE_MIN_INTERVAL) return undefined;\n\n  return updateTabState(global, {\n    wave: {\n      lastWaveTime: Date.now(),\n      startX,\n      startY,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped, isInvertedMedia, webPageMediaSize,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n      isInvertedMedia,\n      webPageMediaSize,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction?.type === 'emoji' && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n  const isTestServer = global.config?.isTestServer;\n  const prefix = isTestServer ? '[T] ' : '';\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${prefix}${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${prefix}${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (currentChat.isForum && topic) {\n        setPageTitle(`${prefix}${title} › ${topic.title}`);\n        return;\n      }\n\n      setPageTitle(`${prefix}${title}`);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : `${prefix}${PAGE_TITLE}`);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig || {};\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_GIFT_PROFILE_FILTER_OPTIONS } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  clearPayment,\n  updatePayment,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const starsBalanceModal = selectTabState(global, tabId).starsBalanceModal;\n\n  actions.processOriginStarsPayment({\n    originData: starsBalanceModal,\n    status,\n    tabId,\n  });\n\n  global = clearPayment(global, tabId);\n  global = updatePayment(global, {\n    status,\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('resetPaymentStatus', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updatePayment(global, { status: undefined }, tabId);\n  global = updateStarsPayment(global, { status: undefined }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { filter, peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  const prevFilter = tabState.savedGifts.filter;\n  let updatedFilter = {\n    ...prevFilter,\n    ...filter,\n  };\n\n  if (!updatedFilter.shouldIncludeUnlimited\n    && !updatedFilter.shouldIncludeLimited\n    && !updatedFilter.shouldIncludeUnique) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeUnlimited: true,\n      shouldIncludeLimited: true,\n      shouldIncludeUnique: true,\n      ...filter,\n    };\n  }\n\n  if (!updatedFilter.shouldIncludeDisplayed && !updatedFilter.shouldIncludeHidden) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeDisplayed: true,\n      shouldIncludeHidden: true,\n      ...filter,\n    };\n  }\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: updatedFilter,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, withTransition: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('resetGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: {\n        ...DEFAULT_GIFT_PROFILE_FILTER_OPTIONS,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, withTransition: true, tabId: tabState.id,\n  });\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, mediaIndex, isAvatarView, isSponsoredMessage, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      isSponsoredMessage,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n    },\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  const global = getGlobal();\n  if (!global.isInited) return;\n  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ActionReturnType, TabState } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { updateTabState } from '../reducers/tabs';\nimport { addActionHandler, type TabStateActionNames } from '..';\n\nexport function addTabStateResetterAction<ActionName extends TabStateActionNames>(\n  name: ActionName, key: keyof TabState,\n) {\n  // @ts-ignore\n  addActionHandler(name, (global, actions, payload): ActionReturnType => {\n    const { tabId = getCurrentTabId() } = payload || {};\n\n    return updateTabState(global, {\n      [key]: undefined,\n    }, tabId);\n  });\n}\n","import type { ApiMessageActionStarGift, ApiSavedStarGift } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPrizeStarsTransactionFromGiveaway, getStarsTransactionFromGift } from '../../helpers/payments';\nimport { addActionHandler } from '../../index';\nimport {\n  clearStarPayment, openStarsTransactionModal,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectStarsPayment, selectTabState } from '../../selectors';\n\naddActionHandler('processOriginStarsPayment', (global, actions, payload): ActionReturnType => {\n  const { originData, status, tabId = getCurrentTabId() } = payload;\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = originData || {};\n\n  if (!originStarsPayment && !originReaction && !originGift && !topup) {\n    return undefined;\n  }\n\n  actions.closeStarsBalanceModal({ tabId });\n\n  if (status !== 'paid') {\n    return undefined;\n  }\n\n  // Re-open previous payment modal\n  if (originStarsPayment) {\n    global = updateTabState(global, {\n      starsPayment: originStarsPayment,\n    }, tabId);\n  }\n\n  if (originReaction) {\n    actions.sendPaidReaction({\n      chatId: originReaction.chatId,\n      messageId: originReaction.messageId,\n      forcedAmount: originReaction.amount,\n      tabId,\n    });\n  }\n\n  if (originGift) {\n    actions.sendStarGift({\n      ...originGift,\n      tabId,\n    });\n  }\n\n  return global;\n});\n\naddActionHandler('openGiftRecipientPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isGiftRecipientPickerOpen: true,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftRecipientPicker', 'isGiftRecipientPickerOpen');\n\naddActionHandler('openStarsGiftingPickerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingPickerModal: {\n      isOpen: true,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsGiftingPickerModal', 'starsGiftingPickerModal');\n\naddActionHandler('openPrizeStarsTransactionFromGiveaway', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getPrizeStarsTransactionFromGiveaway(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originStarsPayment,\n    originReaction,\n    originGift,\n    topup,\n    shouldIgnoreBalance,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starBalance = global.stars?.balance;\n\n  if (!shouldIgnoreBalance && starBalance && topup && topup.balanceNeeded <= starBalance.amount) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('StarsTopupLinkEnough'),\n      actionText: langProvider.oldTranslate('StarsTopupLinkTopupAnyway'),\n      action: {\n        action: 'openStarsBalanceModal',\n        payload: { topup, shouldIgnoreBalance: true, tabId },\n      },\n      icon: 'star',\n      tabId,\n    });\n    return undefined;\n  }\n\n  global = clearStarPayment(global, tabId);\n\n  // Always refresh status on opening\n  actions.loadStarStatus();\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originStarsPayment,\n      originReaction,\n      originGift,\n      topup,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsBalanceModal', 'starsBalanceModal');\n\naddActionHandler('closeStarsPaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const starsPayment = selectStarsPayment(global, tabId);\n  let status = starsPayment?.status;\n  if (!status || status === 'pending') {\n    status = 'cancelled';\n  }\n\n  return updateTabState(global, {\n    starsPayment: {\n      status,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsTransactionFromGift', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getStarsTransactionFromGift(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddTabStateResetterAction('closeStarsTransactionModal', 'starsTransactionModal');\n\naddActionHandler('openStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { subscription, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    starsSubscriptionModal: {\n      subscription,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsSubscriptionModal', 'starsSubscriptionModal');\n\naddTabStateResetterAction('closeGiftModal', 'giftModal');\n\naddActionHandler('closeStarsGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    starsGiftModal: { isOpen: false },\n  }, tabId);\n});\n\naddActionHandler('openGiftInfoModalFromMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message || !message.content.action) return;\n\n  const action = message.content.action;\n  if (action.type === 'starGiftUnique') {\n    actions.openGiftInfoModal({ gift: action.starGift?.gift!, tabId });\n    return;\n  }\n\n  if (action.type !== 'starGift') return;\n\n  const starGift = action.starGift! as ApiMessageActionStarGift;\n\n  const giftReceiverId = message.isOutgoing ? message.chatId : global.currentUserId!;\n\n  const gift = {\n    date: message.date,\n    gift: starGift.gift,\n    message: starGift.message,\n    starsToConvert: starGift.starsToConvert,\n    isNameHidden: starGift.isNameHidden,\n    isUnsaved: !starGift.isSaved,\n    fromId: message.isOutgoing ? global.currentUserId : message.chatId,\n    messageId: (!message.isOutgoing || chatId === global.currentUserId) ? message.id : undefined,\n    isConverted: starGift.isConverted,\n    upgradeMsgId: starGift.upgradeMsgId,\n    canUpgrade: starGift.canUpgrade,\n    alreadyPaidUpgradeStars: starGift.alreadyPaidUpgradeStars,\n    inputGift: starGift.inputSavedGift,\n  } satisfies ApiSavedStarGift;\n\n  actions.openGiftInfoModal({ peerId: giftReceiverId, gift, tabId });\n});\n\naddActionHandler('openGiftInfoModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peerId = 'peerId' in payload ? payload.peerId : undefined;\n\n  return updateTabState(global, {\n    giftInfoModal: {\n      peerId,\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftInfoModal', 'giftInfoModal');\n\naddTabStateResetterAction('closeGiftUpgradeModal', 'giftUpgradeModal');\n\naddActionHandler('openGiftWithdrawModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftWithdrawModal', 'giftWithdrawModal');\n\naddActionHandler('openGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: {\n      emojiStatus,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearGiftWithdrawError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const giftWithdrawModal = tabState?.giftWithdrawModal;\n  if (!giftWithdrawModal) return undefined;\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      errorKey: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftTransferModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    giftTransferModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftTransferModal', 'giftTransferModal');\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { addActionHandler } from '../../index';\nimport { updateChatMessage } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetLocalPaidReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const { reactions } = message;\n\n  if (!reactions) {\n    return undefined;\n  }\n\n  const updatedResults = reactions.results.map((reaction) => {\n    if (reaction.localAmount) {\n      if (!reaction.count) return undefined;\n      return {\n        ...reaction,\n        localAmount: undefined,\n        localPreviousChosenOrder: undefined,\n        chosenOrder: reaction.localPreviousChosenOrder,\n      };\n    }\n    return reaction;\n  }).filter(Boolean);\n\n  Object.values(global.byTabId)\n    .forEach(({ id: tabId }) => {\n      actions.dismissNotification({\n        localId: getMessageKey(message),\n        tabId,\n      });\n    });\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results: updatedResults,\n    },\n  });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addStoriesForPeer } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerIds: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../..';\nimport { updateVerifyMonetizationModal } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('openMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), chatId } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearMonetizationVerificationError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateVerifyMonetizationModal(global, { errorKey: undefined }, tabId);\n});\n\naddActionHandler('closeMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationStatistics: undefined,\n  }, tabId);\n});\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatListIds,\n  addUnreadMentions,\n  deleteChatMessages,\n  deletePeerPhoto,\n  leaveChat,\n  removeUnreadMentions,\n  replacePeerPhotos,\n  replacePinnedTopicIds,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectPeer,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const localChat = selectChat(global, update.id);\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = localChat || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      const updatedChat = selectChat(global, update.id);\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)\n          && !updatedChat?.isNotJoined) {\n        // Reload top chats to update chat listing\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      actions.loadFullChat({ chatId: update.id, force: true });\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = getGlobal();\n      global = addChatListIds(global, listType, [update.id]);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        if (chatMessages) {\n          const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n          global = deleteChatMessages(global, chat.id, localMessageIds);\n        }\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const isLocal = isLocalMessageId(message.id!);\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      if (!isLocal) {\n        global = updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        });\n\n        if (hasMention) {\n          global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n        }\n\n        const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n        if (topic) {\n          global = updateTopic(global, update.chatId, topic.id, {\n            unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n            && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = replacePinnedTopicIds(global, chatId, order);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateNewProfilePhoto': {\n      const { peerId, photo } = update;\n\n      global = updateChat(global, peerId, {\n        avatarPhotoId: photo.id,\n      });\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n\n    case 'updateDeleteProfilePhoto': {\n      const { peerId, photoId } = update;\n\n      const peer = selectPeer(global, peerId);\n      if (!peer) {\n        return undefined;\n      }\n\n      if (!photoId || peer.avatarPhotoId === photoId) {\n        global = updateChat(global, peerId, {\n          avatarPhotoId: undefined,\n        });\n        global = replacePeerPhotos(global, peerId, undefined);\n      } else {\n        global = deletePeerPhoto(global, peerId, photoId);\n      }\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { throttleWithFullyIdle } from '../../../lib/teact/heavyAnimation';\n\nimport type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact,\n  replaceUserStatuses,\n  updatePeerStoriesHidden,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf, selectIsCurrentUserPremium, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst updateStatusesOnFullyIdle = throttleWithFullyIdle(flushStatusUpdates);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      pendingStatusUpdates[update.userId] = update.status;\n      updateStatusesOnFullyIdle();\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { applyLangPackDifference, getTranslationFn, requestLangPackDifference } from '../../../util/localization';\nimport { getPeerTitle } from '../../helpers';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addChats,\n  addStoriesForPeer,\n  addUsers,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updatePoll,\n  updateStealthMode,\n  updateThreadInfos,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateEntities': {\n      const {\n        users, chats, threadInfos, polls,\n      } = update;\n      if (users) global = addUsers(global, users);\n      if (chats) global = addChats(global, chats);\n      if (threadInfos) global = updateThreadInfos(global, threadInfos);\n      if (polls) {\n        polls.forEach((poll) => {\n          global = updatePoll(global, poll.id, poll);\n        });\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder?.some((id) => id === update.id)) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        Object.entries(tabState.webApps.openedWebApps).forEach(([webAppKey, webApp]) => {\n          if (webApp.queryId === update.queryId) {\n            actions.resetDraftReplyInfo({ tabId: tabState.id });\n            actions.closeWebApp({ key: webAppKey, tabId: tabState.id });\n          }\n        });\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n      break;\n    }\n\n    case 'updatePaidReactionPrivacy': {\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          paidReactionPrivacy: update.isPrivate,\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateLangPackTooLong': {\n      requestLangPackDifference(update.langCode);\n      break;\n    }\n\n    case 'updateLangPack': {\n      applyLangPackDifference(update.version, update.strings, update.keysToRemove);\n      break;\n    }\n\n    case 'newMessage': {\n      const actionStarGift = update.message.content?.action?.starGift;\n      if (!update.message.isOutgoing && update.message.chatId !== SERVICE_NOTIFICATIONS_USER_ID) return undefined;\n      if (actionStarGift?.type !== 'starGiftUnique') return undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        if (tabState.isWaitingForStarGiftUpgrade) {\n          actions.openUniqueGiftBySlug({\n            slug: actionStarGift.gift.slug,\n            tabId,\n          });\n\n          actions.showNotification({\n            title: { key: 'GiftUpgradedTitle' },\n            message: { key: 'GiftUpgradedDescription' },\n            tabId,\n          });\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftUpgrade: undefined,\n          }, tabId);\n        }\n\n        if (tabState.isWaitingForStarGiftTransfer) {\n          const chatId = update.message.chatId;\n          const receiver = chatId ? selectPeer(global, chatId) : undefined;\n          if (receiver) {\n            actions.focusMessage({\n              chatId: receiver.id,\n              messageId: update.message.id!,\n              tabId,\n            });\n\n            actions.showNotification({\n              message: {\n                key: 'GiftTransferSuccessMessage',\n                variables: {\n                  gift: {\n                    key: 'GiftUnique',\n                    variables: {\n                      title: actionStarGift.gift.title,\n                      number: actionStarGift.gift.number,\n                    },\n                  },\n                  peer: getPeerTitle(getTranslationFn(), receiver),\n                },\n              },\n              tabId,\n            });\n          }\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftTransfer: undefined,\n          }, tabId);\n        }\n      });\n\n      setGlobal(global);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException, updateChat, updateNotifySettings,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          errorKey: update.messageKey,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const form = paymentState.form!;\n      const { invoice } = form;\n\n      const { totalAmount, currency } = invoice;\n\n      if (paymentState.inputInvoice?.type === 'stars') {\n        actions.closeStarsBalanceModal({ tabId });\n        actions.showNotification({\n          message: langProvider.oldTranslate('StarsAcquiredInfo', paymentState.inputInvoice.stars),\n          title: langProvider.oldTranslate('StarsAcquired'),\n          icon: 'star',\n          tabId,\n        });\n        actions.requestConfetti({ withStars: true, tabId });\n      } else {\n        actions.showNotification({\n          tabId,\n          message: langProvider.oldTranslate('PaymentInfoHint', [\n            formatCurrencyAsString(totalAmount, currency, langProvider.getTranslationFn().code),\n            form.title,\n          ]),\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateStarPaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const { inputInvoice, subscriptionInfo, form } = paymentState;\n      if (inputInvoice?.type === 'chatInviteSubscription' && subscriptionInfo) {\n        const amount = subscriptionInfo.subscriptionPricing!.amount;\n\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            subscriptionInfo.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (form?.invoice.subscriptionPeriod) {\n        const amount = form.invoice.totalAmount;\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            form.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (inputInvoice?.type === 'giftcode') {\n        if (!inputInvoice.userIds) {\n          return;\n        }\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: langProvider.oldTranslate('StarsGiftCompleted'),\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'starsgift') {\n        if (!inputInvoice.userId) {\n          return;\n        }\n        const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n        if (starsModalState?.isOpen && inputInvoice.userId === starsModalState.forUserId) {\n          global = updateTabState(global, {\n            starsGiftModal: {\n              ...starsModalState,\n              isCompleted: true,\n            },\n          }, tabId);\n        }\n      }\n\n      if (inputInvoice?.type === 'stargift') {\n        if (!inputInvoice.peerId) {\n          return;\n        }\n\n        const starGiftModalState = selectTabState(global, tabId).giftModal;\n\n        if (starGiftModalState && inputInvoice.peerId === starGiftModalState.forPeerId) {\n          actions.showNotification({\n            message: langProvider.oldTranslate('StarsGiftCompleted'),\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      const stars = global.stars;\n      if (!stars) {\n        return;\n      }\n\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <Icon name=\"new-chat-filled\" />\n        <Icon name=\"close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ApiMessageEntityTypes, type ApiChatFolder, type ApiChatlistExportedInvite, type ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { processTextWithIcon, renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\n\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\nimport FoldersList from '../../ui/FoldersList';\nimport { render } from 'react-dom';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    ref,\n    shouldRender: shouldRenderStoryRibbon,\n    getIsClosing: getIsStoryRibbonClosing,\n  } = useShowTransition({\n    isOpen: isStoryRibbonShown,\n    className: false,\n    withShouldRender: true,\n  });\n  const isStoryRibbonClosing = useDerivedState(getIsStoryRibbonClosing);\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: { text: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats') },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('FilterShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDelete'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n      const { text: renderedTitle, icon: renderedIcon } = processTextWithIcon(title);\n      const customEmoji = renderedIcon?.type === ApiMessageEntityTypes.CustomEmoji ? renderedIcon : undefined;\n      \n      return {\n        id,\n        title: renderedTitle,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        withCustomEmoticon: !!customEmoji,\n        emoticon: customEmoji || folder.emoticon,\n        \n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n     \n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    ref: placeholderRef,\n    shouldRender: shouldRenderPlaceholder,\n  } = useShowTransition({\n    isOpen: !orderedFolderIds,\n    noMountTransition: true,\n    withShouldRender: true,\n  });\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <> \n      \n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n      />\n</>\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {/* {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div ref={placeholderRef} className=\"tabs-placeholder\" />\n      ) : undefined} */}\n\n      <div className='layout_folders_chats'>\n      {shouldRenderFolders ? (\n        <FoldersList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div ref={placeholderRef} className=\"tabs-placeholder\" />\n      ) : undefined}\n\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        \n        {renderCurrentTab}\n      </Transition>\n    </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { OldLangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: OldLangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme } from '../../../global/selectors';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: oldLang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  return (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {oldLang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{oldLang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {oldLang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {oldLang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {oldLang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{oldLang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={oldLang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {oldLang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('MenuReportBug')}\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          {lang('MenuBetaChangelog')}\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          {lang('MenuSwitchToK')}\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          {lang('MenuInstallApp')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = global.settings.byKey;\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusCollectible, ApiEmojiStatusType, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatusType;\n  collectibleStatuses?: ApiEmojiStatusType[];\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus, collectibleStatuses }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? (emojiStatus.until - getServerTime()) * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && emojiStatus.documentId !== prevEmojiStatus?.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    const collectibleStatus = collectibleStatuses?.find(\n      ((status) => 'collectibleId' in status && status.documentId === sticker.id),\n    ) as ApiEmojiStatusCollectible | undefined;\n    markShouldShowEffect();\n    setEmojiStatus({\n      emojiStatus: collectibleStatus || { type: 'regular', documentId: sticker.id },\n    });\n  }, [markShouldShowEffect, setEmojiStatus, collectibleStatuses]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n            withSparkles={emojiStatus?.type === 'collectible'}\n          />\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n  const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n    collectibleStatuses,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const areContactsVisible = content === LeftColumnContent.Contacts;\n  const hasMenu = content === LeftColumnContent.ChatList;\n\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(useMemo(() => (canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined), [canSetPasscode]));\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchRelevant = Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts;\n\n  const isSearchFocused = isMobile ? !isMessageListOpen && isSearchRelevant : isSearchRelevant;\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const withStoryToggler = !isSearchFocused\n    && !selectedSearchDate && !globalSearchChatId && !areContactsVisible;\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PeerChip\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"left-search-picker-item\"\n            onClick={setGlobalSearchDate}\n            isCloseNonDestructive\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PeerChip\n            className=\"left-search-picker-item\"\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            isMinimized\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {oldLang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            oldLang.isRtl && 'rtl',\n            shouldHideSearch && oldLang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && oldLang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && oldLang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={oldLang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          resultsItemSelector=\".LeftSearch .ListItem-button\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          <StoryToggler\n            canShow={withStoryToggler}\n          />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <Icon name=\"lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, minDate,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      searchDate: minDate,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransitionDeprecated(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          badge\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/windowEnvironment';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyGifts:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBirthday);\n          return;\n        case SettingsScreens.PrivacyGiftsAllowedContacts:\n        case SettingsScreens.PrivacyGiftsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGifts);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  }), []));\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  const prevSettingsScreenRef = useStateRef(usePrevious(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        setContent(LeftColumnContent.Settings);\n        handleSettingsScreenSelect(prevSettingsScreenRef.current!);\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        minDate,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: minDate,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n    };\n  },\n)(LeftColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import { useEffect, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport { selectFocusedMessageId, selectListedIds, selectOutlyingListByMessageId } from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport type OnIntersectPinnedMessage = (params: {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  shouldCancelWaiting?: boolean;\n}) => void;\n\nlet viewportPinnedIds: number[] | undefined;\nlet lastFocusedId: number | undefined;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[],\n) {\n  const [getPinnedIndexByKey, setPinnedIndexByKey] = useSignal<Record<string, number>>({});\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n  const getCurrentPinnedIndex = useDerivedSignal(\n    () => (getPinnedIndexByKey()[key!] ?? 0),\n    [getPinnedIndexByKey, key],\n  );\n\n  // Reset when switching chat\n  useEffect(() => {\n    viewportPinnedIds = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setPinnedIndexByKey, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getPinnedIndexByKey()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedLength - 1),\n      });\n    }\n  }, [getPinnedIndexByKey, key, pinnedIds?.length, setPinnedIndexByKey]);\n\n  const handleIntersectPinnedMessage: OnIntersectPinnedMessage = useLastCallback(({\n    viewportPinnedIdsToAdd = [],\n    viewportPinnedIdsToRemove = [],\n    shouldCancelWaiting,\n  }) => {\n    if (!chatId || !threadId || !key || !pinnedIds?.length) return;\n\n    if (shouldCancelWaiting) {\n      lastFocusedId = undefined;\n      setLoadingPinnedId(undefined);\n      return;\n    }\n\n    const loadingPinnedId = getLoadingPinnedId();\n    if (loadingPinnedId) {\n      const newPinnedIndex = pinnedIds.indexOf(loadingPinnedId);\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newPinnedIndex),\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    viewportPinnedIds = unique(\n      (viewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) ?? [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    // Sometimes this callback is called after focus has been reset in global, so we leverage `lastFocusedId`\n    const focusedMessageId = selectFocusedMessageId(getGlobal(), chatId) || lastFocusedId;\n\n    if (lastFocusedId && viewportPinnedIds.includes(lastFocusedId)) {\n      lastFocusedId = undefined;\n    }\n\n    if (focusedMessageId) {\n      const pinnedIndexAboveFocused = pinnedIds.findIndex((id) => id < focusedMessageId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedIndexAboveFocused),\n      });\n    } else if (viewportPinnedIds.length) {\n      const maxViewportPinnedId = Math.max(...viewportPinnedIds);\n      const newIndex = pinnedIds.indexOf(maxViewportPinnedId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newIndex),\n      });\n    }\n  });\n\n  const handleFocusPinnedMessage = useLastCallback((messageId: number) => {\n    // Focusing on a post in comments\n    if (!chatId || !threadId || !pinnedIds?.length) {\n      return;\n    }\n\n    lastFocusedId = messageId;\n\n    const global = getGlobal();\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    const currentIndex = pinnedIds.indexOf(messageId);\n    const newIndex = cycleRestrict(pinnedIds.length, currentIndex + 1);\n\n    if (isMessageLoaded) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key!]: newIndex,\n      });\n    } else {\n      setLoadingPinnedId(pinnedIds[newIndex]);\n    }\n  });\n\n  return {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  };\n}\n\nfunction clampIndex(id: number) {\n  return Math.max(0, id);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <Icon name={icon} className={styles.icon} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList, selectCurrentMiddleSearch } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll({\n        container: messagesContainer,\n        element: lastMessageElement,\n        position: 'end',\n        margin: FOCUS_MARGIN,\n      });\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const hasActiveMiddleSearch = Boolean(selectCurrentMiddleSearch(global));\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread'\n      && !hasActiveMiddleSearch;\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean,\n) {\n  const initDateGroup: MessageDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [[]],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [initDateGroup];\n\n  messages.forEach((message, index) => {\n    const currentDateGroup = dateGroups[dateGroups.length - 1];\n    const currentSenderGroup = currentDateGroup.senderGroups[currentDateGroup.senderGroups.length - 1];\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        } satisfies IAlbum;\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {\n      currentSenderGroup.push({\n        albumId: `paid-${message.id}`,\n        messages: [message],\n        mainMessage: message,\n        hasMultipleCaptions: false,\n        isPaidMedia: true,\n      } satisfies IAlbum);\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n\n    const lastMessageInSenderGroup = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage && !currentAlbum) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        const newDateGroup: MessageDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [[]],\n        };\n        dateGroups.push(newDateGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || message.postAuthorTitle !== nextMessage.postAuthorTitle\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastMessageInSenderGroup\n              && 'mainMessage' in lastMessageInSenderGroup\n              && lastMessageInSenderGroup.mainMessage?.id === topMessageId))\n          && nextMessage.id !== topMessageId)\n        || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentDateGroup.senderGroups.push([]);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user!))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sqThK406\",\"bot-info\":\"XhDB6LWO\",\"botInfo\":\"XhDB6LWO\",\"bot-info-description\":\"lbMO1XqP\",\"botInfoDescription\":\"lbMO1XqP\",\"bot-info-title\":\"ELYpyMpR\",\"botInfoTitle\":\"ELYpyMpR\",\"media\":\"zLLIV9Iw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiBotInfo } from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getVideoMediaHash,\n  isChatWithVerificationCodesBot,\n} from '../../global/helpers';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useOldLang();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getVideoMediaHash(botInfo.gif, 'full') : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const isVerifyCodes = isChatWithVerificationCodesBot(chatId);\n\n  const { width, height } = botInfoDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={buildStyle(\n            width ? `width: ${width}px` : undefined,\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={width}\n              height={height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={width}\n              height={height}\n              forceAspectRatio\n            />\n          )}\n          {isVerifyCodes && (\n            <div className={styles.botInfoDescription}>\n              {lang('VerifyChatInfo')}\n            </div>\n          )}\n          {!isVerifyCodes && botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { OnIntersectPinnedMessage } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onIntersectPinnedMessage: OnIntersectPinnedMessage,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onIntersectPinnedMessage({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiPaidMedia } from '../../../../api/types';\n\nexport default function getSingularPaidMedia(media?: ApiPaidMedia) {\n  if (!media || media.extendedMedia.length !== 1) {\n    return {\n      photo: undefined,\n      video: undefined,\n    };\n  }\n\n  const singularMedia = media.extendedMedia[0];\n  const isPreview = 'mediaType' in singularMedia;\n  const photo = isPreview ? (!singularMedia.duration ? singularMedia : undefined) : singularMedia.photo;\n  const video = isPreview ? (singularMedia.duration ? singularMedia : undefined) : singularMedia.video;\n\n  return { photo, video };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { ApiDimensions, ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { getMessageContent } from '../../../../global/helpers';\nimport { clamp } from '../../../../util/math';\nimport { getAvailableWidth } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isSingleMessage?: boolean, isMobile?: boolean) {\n  const isOutgoing = messages[0].isOutgoing;\n  const allMedia = (isSingleMessage\n    ? messages[0].content.paidMedia!.extendedMedia.map((media) => (\n      'mediaType' in media ? media : (media.photo || media.video)\n    ))\n    : messages.map((message) => (\n      getMessageContent(message).photo || getMessageContent(message).video\n    ))\n  ).filter(Boolean);\n  return allMedia.map(\n    (media) => {\n      const dimensions = calculateMediaDimensions({\n        media,\n        isOwn: isOutgoing,\n        isMobile,\n      }) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, album.isPaidMedia, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, false, noAvatars, isMobile);\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\n\nimport Deferred from './Deferred';\nimport { createConnector } from './PostMessageConnector';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(\n  message: ApiMessage, detectedLanguage?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>,\n) {\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    const isTranslatable = Boolean(message.content.text?.text.length);\n    processMessageMetadata(message.chatId, message.id, isTranslatable, detectedLanguage);\n  }, [message, detectedLanguage, isDisabled, getIsReady]);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata(chatId: string, id: number, isTranslatable: boolean, detectedLanguage?: string) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / messagesChecked;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { Signal } from '../../../../util/signals';\n\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport stopEvent from '../../../../util/stopEvent';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n  getIsMessageListReady: Signal<boolean>,\n) {\n  const { updateDraftReplyInfo, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    updateDraftReplyInfo({ replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady()) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        updateDraftReplyInfo({ replyToMsgId: messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n    getIsMessageListReady,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer, ApiTypeStory } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  getPeerTitle,\n  getStoryMediaHash,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { getPictogramDimensions } from '../helpers/mediaDimensions';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../icons/Icon';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  story?: ApiTypeStory;\n  sender?: ApiPeer;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedStory: FC<OwnProps> = ({\n  story,\n  sender,\n  noUserColors,\n  isProtected,\n  observeIntersectionForLoading,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isFullStory = story && 'content' in story;\n  const isExpiredStory = story && 'isDeleted' in story;\n  const isVideoStory = isFullStory && Boolean(story.content.video);\n  const title = isFullStory ? 'Story' : (isExpiredStory ? 'ExpiredStory' : 'Loading');\n\n  const mediaBlobUrl = useMedia(isFullStory && getStoryMediaHash(story, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = isVideoStory ? story.content.video!.thumbnail?.dataUri : undefined;\n  const pictogramUrl = mediaBlobUrl || mediaThumbnail;\n\n  const senderTitle = sender ? getPeerTitle(lang, sender) : undefined;\n  const handleFastClick = useLastCallback(() => {\n    if (story && !isExpiredStory) {\n      onClick();\n    } else {\n      showNotification({\n        message: lang('StoryNotFound'),\n      });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(handleFastClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        getPeerColorClass(sender, noUserColors, true),\n        pictogramUrl && 'with-thumb',\n      )}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {pictogramUrl && renderPictogram(pictogramUrl, isProtected)}\n      <div className=\"message-text with-message-color\">\n        <p className=\"embedded-text-wrapper\">\n          {isExpiredStory && (\n            <Icon name=\"story-expired\" className=\"embedded-origin-icon\" />\n          )}\n          {isFullStory && (\n            <Icon name=\"story-reply\" className=\"embedded-origin-icon\" />\n          )}\n          {lang(title)}\n        </p>\n        <div className=\"message-title\">{renderText(senderTitle || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  srcUrl: string,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <div className=\"embedded-thumb\">\n      <img\n        src={srcUrl}\n        width={width}\n        height={height}\n        alt=\"\"\n        className=\"pictogram\"\n        draggable={false}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedStory;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from './icons/Icon';\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\n\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useOldLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" draggable={false} />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <Icon name=\"lock\" />}\n      <Icon name=\"next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JldIqqof\"};","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Icon from '../../../common/icons/Icon';\n\ntype OwnProps<T> =\n  (PhotoProps<T> | VideoProps<T>) & {\n    clickArg: number;\n    noSelectControls?: boolean;\n  };\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  // eslint-disable-next-line @typescript-eslint/comma-dangle\n  const ComponentWithSelectControl = <T,>(props: OwnProps<T> & StateProps) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      dimensions,\n      clickArg,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: clickArg, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <Icon name=\"select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps<unknown>>(\n    (global, ownProps) => {\n      const { clickArg, noSelectControls } = ownProps;\n      return {\n        isInSelectMode: !noSelectControls && selectIsInSelectMode(global),\n        isSelected: !noSelectControls && selectIsMessageSelected(global, clickArg),\n      };\n    },\n  )(ComponentWithSelectControl)) as typeof ComponentWithSelectControl;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport {\n  getIsDownloading, getMessageContent, getMessageHtmlId, getMessagePhoto,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\nimport withSelectControl from './hocs/withSelectControl';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number, index?: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsByKey: GlobalState['fileUploads']['byMessageKey'];\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsByKey,\n  activeDownloads,\n  theme,\n}) => {\n  const { cancelUploadMedia } = getActions();\n\n  const { content: { paidMedia } } = album.mainMessage;\n\n  const mediaCount = album.isPaidMedia ? paidMedia!.extendedMedia.length : album.messages.length;\n\n  const handlePaidMediaClick = useLastCallback((index: number) => {\n    onMediaClick(album.mainMessage.id, index);\n  });\n\n  const handleAlbumMessageClick = useLastCallback((messageId: number) => {\n    onMediaClick(messageId);\n  });\n\n  const handleCancelUpload = useLastCallback((messageId: number) => {\n    cancelUploadMedia({ chatId: album.mainMessage.chatId, messageId });\n  });\n\n  const messages = useMemo(() => {\n    if (album.isPaidMedia) {\n      return album.mainMessage.content.paidMedia!.extendedMedia.map(() => album.mainMessage);\n    }\n\n    return album.messages;\n  }, [album]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const renderingPaidMedia = album.isPaidMedia ? message.content.paidMedia?.extendedMedia[index] : undefined;\n    const paidPhotoOrPreview = renderingPaidMedia && 'mediaType' in renderingPaidMedia\n      ? renderingPaidMedia : renderingPaidMedia?.photo;\n    const paidVideoOrPreview = renderingPaidMedia && 'mediaType' in renderingPaidMedia\n      ? renderingPaidMedia : renderingPaidMedia?.video;\n    const photo = paidPhotoOrPreview || getMessagePhoto(message);\n    const video = paidVideoOrPreview || getMessageContent(message).video;\n\n    const fileUpload = uploadsByKey[getMessageKey(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id, album.isPaidMedia ? index : undefined)}`}\n          photo={photo}\n          isOwn={isOwn}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          clickArg={album.isPaidMedia ? index : message.id}\n          onClick={album.isPaidMedia ? handlePaidMediaClick : handleAlbumMessageClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={photo.mediaType !== 'extendedMediaPreview' && getIsDownloading(activeDownloads, photo)}\n          theme={theme}\n          noSelectControls={album.isPaidMedia}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          video={video}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          clickArg={album.isPaidMedia ? index : message.id}\n          onClick={album.isPaidMedia ? handlePaidMediaClick : handleAlbumMessageClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={video.mediaType !== 'extendedMediaPreview' && getIsDownloading(activeDownloads, video)}\n          theme={theme}\n          noSelectControls={album.isPaidMedia}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global);\n\n    return {\n      theme,\n      uploadsByKey: global.fileUploads.byMessageKey,\n      activeDownloads,\n    };\n  },\n)(Album);\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../types';\n\nimport buildStyle from '../../../util/buildStyle';\nimport safePlay from '../../../util/safePlay';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_ELECTRON && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ActiveEmojiInteraction } from '../../../types';\n\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation={Boolean(effect && activeEmojiInteractions?.length)}\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ActiveEmojiInteraction } from '../../../types';\n\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceAlways\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiCommentsInfo } from '../../../api/types';\n\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Spinner from '../../ui/Spinner';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiCommentsInfo;\n  disabled?: boolean;\n  isLoading?: boolean;\n  isCustomShape?: boolean;\n};\n\nconst SHOW_LOADER_DELAY = 450;\n\nconst CommentButton: FC<OwnProps> = ({\n  isCustomShape,\n  threadInfo,\n  disabled,\n  isLoading,\n}) => {\n  const { openThread } = getActions();\n\n  const shouldRenderLoading = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n\n  const lang = useOldLang();\n  const {\n    originMessageId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openThread({\n      isComments: true, chatId, originMessageId, originChannelId,\n    });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const global = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return selectPeer(global, peerId);\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers!.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('CommentsCount', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName(\n        'CommentButton',\n        hasUnread && 'has-unread',\n        disabled && 'disabled',\n        isCustomShape && 'CommentButton-custom-shape',\n        isLoading && 'loading',\n      )}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <Icon\n        name=\"comments-sticker\"\n        className={buildClassName(\n          'CommentButton_icon-comments',\n          isLoading && shouldRenderLoading && 'CommentButton_hidden',\n        )}\n      />\n      {!recentRepliers?.length && <Icon name=\"comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <div className=\"CommentButton_right\">\n        {isLoading && (\n          <Spinner\n            className={buildClassName(\n              'CommentButton_loading',\n              !shouldRenderLoading && 'CommentButton_hidden',\n            )}\n            color={isCustomShape ? 'white' : 'blue'}\n          />\n        ) }\n        <Icon\n          name=\"next\"\n          className={buildClassName(\n            'CommentButton_icon-open',\n            isLoading && shouldRenderLoading && 'CommentButton_hidden',\n          )}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AAHWWWvU\",\"info-container\":\"tpDpg82n\",\"infoContainer\":\"tpDpg82n\",\"info\":\"fpYynE5s\",\"name\":\"_PNTJc_V\",\"phone\":\"JP_3wes8\",\"divider\":\"_OSJcuqH\",\"buttons\":\"Blui4M4G\",\"button\":\"ReDHhQHm\",\"disabled\":\"XAeKpuIZ\",\"emoji-icon-background\":\"SjZYi3sJ\",\"emojiIconBackground\":\"SjZYi3sJ\"};","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiContact, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { getCanAddContact, getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\n\nimport styles from './Contact.module.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n  noUserColors?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, noUserColors,\n}) => {\n  const lang = useOldLang();\n  const {\n    openChat, openAddContactDialog, showNotification, openChatWithInfo,\n  } = getActions();\n\n  const { phoneNumber, userId } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n  const canAddContact = isRegistered && user && getCanAddContact(user);\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: user?.id });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (user) {\n      openChatWithInfo({ id: userId });\n    } else {\n      copyTextToClipboard(phoneNumber);\n      showNotification({ message: lang('PhoneCopied') });\n    }\n  });\n\n  return (\n    <PeerColorWrapper\n      noUserColors={noUserColors}\n      peer={user}\n      emojiIconClassName={styles.emojiIconBackground}\n      className={styles.root}\n    >\n      <div className={styles.infoContainer} onClick={handleClick}>\n        <Avatar size=\"medium\" peer={user} text={getContactName(contact)} />\n        <div className={styles.info}>\n          <div className={styles.name}>\n            {user ? getUserFullName(user) : getContactName(contact)}\n          </div>\n          <div className={styles.phone}>\n            {formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}\n          </div>\n        </div>\n      </div>\n      {isRegistered && (\n        <>\n          <div className={styles.divider} />\n          <div className={styles.buttons}>\n            <Button\n              isText\n              color=\"translucent\"\n              ripple\n              size=\"tiny\"\n              onClick={handleOpenChat}\n              className={styles.button}\n            >\n              {lang('SharedContactMessage')}\n            </Button>\n            {canAddContact && (\n              <Button\n                isText\n                color=\"translucent\"\n                ripple\n                size=\"tiny\"\n                onClick={handleAddContact}\n                className={styles.button}\n              >\n                {lang('SharedContactAdd')}\n              </Button>\n            )}\n          </div>\n        </>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nfunction getContactName(contact: ApiContact) {\n  if (contact.firstName && contact.lastName) {\n    return `${contact.firstName} ${contact.lastName}`;\n  }\n\n  if (contact.firstName) {\n    return contact.firstName;\n  }\n\n  if (contact.lastName) {\n    return contact.lastName;\n  }\n\n  return '';\n}\n\nexport default withGlobal<OwnProps>((global, { contact }): StateProps => {\n  const {\n    countryList: { phoneCodes: phoneCodeList },\n  } = global;\n  const user = selectUser(global, contact.userId);\n\n  return {\n    user,\n    phoneCodeList,\n  };\n})(Contact);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HMB5LgeX\",\"title\":\"vZnCPl3t\",\"content\":\"k_dGolcu\",\"separator\":\"qRaSs5iA\",\"footnote\":\"EDmr0wJG\",\"collapsed\":\"hYzpXwTM\",\"cutoutWrapper\":\"nfCzKu78\",\"collapseIcon\":\"mxPizZpR\",\"clickable\":\"Cj2cLczd\"};","import React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiFactCheck } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useCollapsibleLines from '../../../hooks/element/useCollapsibleLines';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Separator from '../../ui/Separator';\n\nimport styles from './FactCheck.module.scss';\n\ntype OwnProps = {\n  factCheck: ApiFactCheck;\n  isToggleDisabled?: boolean;\n};\n\nconst COLOR = {\n  color: 0,\n};\nconst MAX_LINES = 4;\n\nconst FactCheck = ({ factCheck, isToggleDisabled }: OwnProps) => {\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const cutoutRef = useRef<HTMLDivElement>(null);\n  const {\n    isCollapsed, isCollapsible, setIsCollapsed,\n  } = useCollapsibleLines(ref, MAX_LINES, cutoutRef);\n\n  const countryLocalized = useMemo(() => {\n    if (!factCheck.countryCode || !lang.code) return undefined;\n\n    const displayNames = new Intl.DisplayNames([lang.code], { type: 'region' });\n    return displayNames.of(factCheck.countryCode);\n  }, [factCheck.countryCode, lang.code]);\n\n  const canExpand = !isToggleDisabled && isCollapsed;\n\n  const handleExpand = useLastCallback(() => {\n    setIsCollapsed(false);\n  });\n\n  const handleToggle = useLastCallback(() => {\n    setIsCollapsed((prev) => !prev);\n  });\n\n  if (!factCheck.text) {\n    return undefined;\n  }\n\n  return (\n    <PeerColorWrapper peerColor={COLOR} className={styles.root} onClick={canExpand ? handleExpand : undefined}>\n      <div\n        ref={cutoutRef}\n        className={buildClassName(styles.cutoutWrapper, isCollapsed && styles.collapsed)}\n      >\n        <div className={styles.title}>{lang('FactCheck')}</div>\n        <div ref={ref} className={styles.content}>\n          {renderTextWithEntities({\n            text: factCheck.text.text,\n            entities: factCheck.text.entities,\n          })}\n        </div>\n        <Separator className={styles.separator} />\n        <div className={styles.footnote}>{lang('FactCheckFooter', countryLocalized)}</div>\n      </div>\n      {isCollapsible && (\n        <div\n          className={buildClassName(styles.collapseIcon, !isToggleDisabled && styles.clickable)}\n          onClick={!isToggleDisabled ? handleToggle : undefined}\n          aria-hidden\n        >\n          <Icon name={isCollapsed ? 'down' : 'up'} />\n        </div>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nexport default memo(FactCheck);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      chatId: message.chatId,\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n            draggable={false}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CbpKtOey\",\"title\":\"ogvcv3mr\",\"sticker\":\"hjjKhvVv\",\"resultSticker\":\"JEiR48jJ\",\"count\":\"n_QCMv_A\",\"section\":\"MSFa9BPf\",\"description\":\"HfZ6SuLI\",\"peers\":\"rPyyNYxK\",\"peer\":\"FV70u896\",\"button\":\"jMBw7STU\",\"result\":\"ZQ4aVVkI\",\"separator\":\"ao0x1YnS\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiGiveaway, ApiGiveawayInfo, ApiGiveawayResults, ApiMessage, ApiPeer, ApiSticker,\n} from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFullName, isOwnMessage,\n} from '../../../global/helpers';\nimport { isApiPeerChat } from '../../../global/helpers/peers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectForwardedSender,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime, formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../../util/emoji/emoji';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Separator from '../../ui/Separator';\n\nimport styles from './Giveaway.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  sender?: ApiPeer;\n  giftSticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst NBSP = '\\u00A0';\nconst GIFT_STICKER_SIZE = 175;\nconst RESULT_STICKER_SIZE = 150;\n\nconst Giveaway = ({\n  chat,\n  sender,\n  message,\n  canPlayAnimatedEmojis,\n  giftSticker,\n}: OwnProps & StateProps) => {\n  const { openChat } = getActions();\n\n  const isLoadingInfo = useRef(false);\n  const [giveawayInfo, setGiveawayInfo] = useState<ApiGiveawayInfo | undefined>();\n\n  const lang = useOldLang();\n  const { giveaway, giveawayResults } = message.content;\n  const isResults = Boolean(giveawayResults);\n  const {\n    months, untilDate, prizeDescription, stars,\n  } = (giveaway || giveawayResults)!;\n\n  const isOwn = isOwnMessage(message);\n\n  const quantity = isResults ? giveawayResults.winnersCount : giveaway!.quantity;\n\n  const hasEnded = getServerTime() > untilDate;\n\n  const countryList = useMemo(() => {\n    if (isResults) return undefined;\n    const translatedNames = new Intl.DisplayNames([lang.code!, 'en'].filter(Boolean), { type: 'region' });\n    return giveaway?.countries?.map((countryCode) => (\n      `${isoToEmoji(countryCode)}${NBSP}${translatedNames.of(countryCode)}`\n    )).join(', ');\n  }, [giveaway, isResults, lang.code]);\n\n  const handlePeerClick = useLastCallback((channelId: string) => {\n    openChat({ id: channelId });\n  });\n\n  const handleShowInfoClick = useLastCallback(async () => {\n    if (isLoadingInfo.current) return;\n\n    isLoadingInfo.current = true;\n    const result = await callApi('fetchGiveawayInfo', {\n      peer: chat,\n      messageId: message.id,\n    });\n    setGiveawayInfo(result);\n    isLoadingInfo.current = false;\n  });\n\n  const handleCloseInfo = useLastCallback(() => {\n    setGiveawayInfo(undefined);\n  });\n\n  const giveawayInfoTitle = useMemo(() => {\n    if (!giveawayInfo) return undefined;\n    return lang(giveawayInfo.type === 'results' ? 'BoostingGiveawayEnd' : 'BoostingGiveAwayAbout');\n  }, [giveawayInfo, lang]);\n\n  function renderGiveawayDescription(media: ApiGiveaway) {\n    const channelIds = media.channelIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayPrizes'), ['simple_markdown'])}\n          </strong>\n          {prizeDescription && (\n            <>\n              <p className={styles.description}>\n                {renderText(\n                  lang('BoostingGiveawayMsgPrizes', [quantity, prizeDescription], undefined, quantity),\n                  ['simple_markdown'],\n                )}\n              </p>\n              <Separator>{lang('BoostingGiveawayMsgWithDivider')}</Separator>\n            </>\n          )}\n          <p className={styles.description}>\n            {message?.content?.giveaway?.stars ? (\n              <>\n                {renderText(\n                  lang('Chat.Giveaway.Message.Stars.PrizeText', lang('Stars', message?.content?.giveaway?.stars)),\n                  ['simple_markdown'],\n                )}\n                <br />\n                {renderText(lang('AmongWinners', quantity), ['simple_markdown'])}\n              </>\n            ) : (\n              <>\n                {renderText(lang('Chat.Giveaway.Info.Subscriptions', quantity), ['simple_markdown'])}\n                <br />\n                {renderText(lang(\n                  'ActionGiftPremiumSubtitle',\n                  lang('Chat.Giveaway.Info.Months', months),\n                ), ['simple_markdown'])}\n              </>\n            )}\n          </p>\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayMsgParticipants'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayMsgAllSubsPlural', channelIds.length), ['simple_markdown'])}\n          </p>\n          <div className={styles.peers}>\n            {channelIds.map((peerId) => (\n              <PeerChip\n                peerId={peerId}\n                forceShowSelf\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n          {countryList && (\n            <span>{renderText(lang('Chat.Giveaway.Message.CountriesFrom', countryList))}</span>\n          )}\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingWinnersDate'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {formatDateTimeToString(untilDate * 1000, lang.code, true)}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayResultsDescription(media: ApiGiveawayResults) {\n    const winnerIds = media.winnerIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersSelected'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersTitle', winnerIds.length), ['simple_markdown'])}\n          </p>\n          <strong className={styles.title}>\n            {lang('lng_prizes_results_winners')}\n          </strong>\n          <div className={styles.peers}>\n            {winnerIds.map((peerId) => (\n              <PeerChip\n                peerId={peerId}\n                forceShowSelf\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <p className={styles.description}>\n            {lang('BoostingGiveawayResultsMsgAllWinnersReceivedLinks')}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayInfo() {\n    if (!sender || !giveawayInfo) return undefined;\n    const isResultsInfo = giveawayInfo.type === 'results';\n\n    const chatTitle = isApiPeerChat(sender) ? getChatTitle(lang, sender) : getUserFullName(sender);\n    const endDate = formatDateAtTime(lang, untilDate * 1000);\n    const otherChannelsCount = giveaway?.channelIds ? giveaway.channelIds.length - 1 : 0;\n    const otherChannelsString = lang('Chat.Giveaway.Info.OtherChannels', otherChannelsCount);\n    const isSeveral = otherChannelsCount > 0;\n\n    const firstKey = isResultsInfo ? 'BoostingGiveawayHowItWorksTextEnd' : 'BoostingGiveawayHowItWorksText';\n    const giveawayDuration = isResultsInfo ? lang('Chat.Giveaway.Info.Months', months) : lang('Stars', stars, 'i');\n    const firstParagraph = lang(firstKey, [chatTitle, quantity, giveawayDuration], undefined, quantity);\n\n    const additionalPrizes = prizeDescription\n      ? lang('BoostingGiveawayHowItWorksIncludeText', [chatTitle, quantity, prizeDescription], undefined, quantity)\n      : undefined;\n\n    let secondKey = '';\n    if (isResultsInfo) {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveralEnd' : 'BoostingGiveawayHowItWorksSubTextEnd';\n    } else {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveral' : 'BoostingGiveawayHowItWorksSubText';\n    }\n    let secondParagraph = lang(secondKey, [endDate, quantity, chatTitle, otherChannelsCount], undefined, quantity);\n    if (isResultsInfo && giveawayInfo.activatedCount) {\n      secondParagraph += ` ${lang('BoostingGiveawayUsedLinksPlural', giveawayInfo.activatedCount)}`;\n    }\n\n    let result = '';\n\n    if (isResultsInfo) {\n      if (giveawayInfo.isRefunded) {\n        result = lang('BoostingGiveawayCanceledByPayment');\n      } else {\n        result = lang(giveawayInfo.isWinner ? 'BoostingGiveawayYouWon' : 'BoostingGiveawayYouNotWon');\n      }\n    }\n\n    let lastParagraph = '';\n    if (isResultsInfo) {\n      // Nothing\n    } else if (giveawayInfo.disallowedCountry) {\n      lastParagraph = lang('BoostingGiveawayNotEligibleCountry');\n    } else if (giveawayInfo.adminDisallowedChatId) {\n      // Since rerenders are not expected, we can use the global state directly\n      const chatsById = getGlobal().chats.byId;\n      const disallowedChat = chatsById[giveawayInfo.adminDisallowedChatId];\n      const disallowedChatTitle = disallowedChat && getChatTitle(lang, disallowedChat);\n      lastParagraph = lang('BoostingGiveawayNotEligibleAdmin', disallowedChatTitle);\n    } else if (giveawayInfo.joinedTooEarlyDate) {\n      const joinedTooEarlyDate = formatDateAtTime(lang, giveawayInfo.joinedTooEarlyDate * 1000);\n      lastParagraph = lang('BoostingGiveawayNotEligible', joinedTooEarlyDate);\n    } else if (giveawayInfo.isParticipating) {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.ParticipatingMany', [chatTitle, otherChannelsCount])\n        : lang('Chat.Giveaway.Info.Participating', chatTitle);\n    } else {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.NotQualifiedMany', [chatTitle, otherChannelsString, endDate])\n        : lang('Chat.Giveaway.Info.NotQualified', [chatTitle, endDate]);\n    }\n\n    return (\n      <>\n        {result && (\n          <p className={styles.result}>\n            {renderText(result, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(firstParagraph, ['simple_markdown'])}\n        </p>\n        {additionalPrizes && (\n          <p>\n            {renderText(additionalPrizes, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(secondParagraph, ['simple_markdown'])}\n        </p>\n        {lastParagraph && (\n          <p>\n            {renderText(lastParagraph, ['simple_markdown'])}\n          </p>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.sticker, isResults && styles.resultSticker)}>\n        {isResults ? (\n          <AnimatedIconWithPreview\n            size={RESULT_STICKER_SIZE}\n            tgsUrl={LOCAL_TGS_URLS.PartyPopper}\n            nonInteractive\n            noLoop\n          />\n        ) : (\n          <AnimatedIconFromSticker\n            sticker={giftSticker}\n            play={canPlayAnimatedEmojis && hasEnded}\n            noLoop\n            nonInteractive\n            size={GIFT_STICKER_SIZE}\n          />\n        )}\n        <span className={styles.count}>\n          {`x${quantity}`}\n        </span>\n      </div>\n      {isResults ? renderGiveawayResultsDescription(giveawayResults) : renderGiveawayDescription(giveaway!)}\n      <Button\n        className={styles.button}\n        color=\"adaptive\"\n        size=\"smaller\"\n        onClick={handleShowInfoClick}\n      >\n        {lang('BoostingHowItWork')}\n      </Button>\n      <ConfirmDialog\n        isOpen={Boolean(giveawayInfo)}\n        isOnlyConfirm\n        title={giveawayInfoTitle}\n        confirmHandler={handleCloseInfo}\n        onClose={handleCloseInfo}\n      >\n        {renderGiveawayInfo()}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { giveaway } = message.content;\n    const chat = selectChat(global, message.chatId)!;\n    const sender = selectChat(global, giveaway?.channelIds[0]!)\n      || selectForwardedSender(global, message) || chat;\n\n    const sticker = giveaway && selectGiftStickerForDuration(global, giveaway.months);\n\n    return {\n      chat,\n      sender,\n      giftSticker: sticker,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(Giveaway));\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\nimport type { ActionPayloads } from '../../../global/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: (payload: ActionPayloads['clickBotInlineButton']) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useOldLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <Icon className=\"corner-icon\" name=\"arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <Icon className=\"corner-icon\" name=\"arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <Icon className=\"corner-icon\" name=\"card\" />;\n      case 'switchBotInline':\n        return <Icon className=\"corner-icon\" name=\"share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <Icon className=\"corner-icon\" name=\"webapp\" />;\n      case 'copy':\n        return <Icon className=\"corner-icon\" name=\"copy\" />;\n    }\n    return undefined;\n  };\n\n  const buttonTexts = useMemo(() => {\n    const texts: TeactNode[][] = [];\n    message.inlineButtons!.forEach((row) => {\n      texts.push(row.map((button) => renderKeyboardButtonText(lang, button)));\n    });\n    return texts;\n  }, [lang, message.inlineButtons]);\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row, i) => (\n        <div className=\"row\">\n          {row.map((button, j) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ chatId: message.chatId, messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">\n                {buttonTexts[i][j]}\n              </span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(InlineButtons);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useOldLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    description,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(photoUrl, !withBlurredBackground);\n  const messageId = message.id;\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, messageId, isSelected, theme).then((appendixBg) => {\n        requestMutation(() => {\n          contentEl.style.setProperty('--appendix-bg', appendixBg);\n          contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n        });\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme, messageId]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {description && (\n        <div>{renderText(description, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n                draggable={false}\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code, { iconClassName: 'invoice-currency-icon' })}\n          {isTest && <span className=\"test-invoice\">{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dCK8GQ_8\",\"duration\":\"CWT8ZMwV\",\"buy\":\"C38zhCDM\",\"spoiler\":\"CG55VZP1\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useOldLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      type: 'message',\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <Icon name=\"lock\" className={styles.lock} />\n        {lang('Checkout.PayPrice', formatCurrencyAsString(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  buildStaticMapHash,\n  getMessageLocation,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dates/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useDevicePixelRatio from '../../../hooks/window/useDevicePixelRatio';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiPeer;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openMapModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { mediaType, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (mediaType === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = mediaType === 'venue' || (mediaType === 'geoLive' && !isExpired);\n  const { width, height, zoom } = DEFAULT_MAP_CONFIG;\n  const dpr = useDevicePixelRatio();\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, dpr);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePreviousDeprecated(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (mediaType !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [mediaType, point, zoom]);\n\n  const handleClick = () => {\n    openMapModal({ geoPoint: point, zoom });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (mediaType !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (mediaType === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (mediaType === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        draggable={false}\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      mediaType,\n      isExpired && 'expired',\n    );\n    if (mediaType === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (mediaType === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} draggable={false} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} draggable={false} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import React from '../../../lib/teact/teact';\n\ninterface OwnProps {\n  isOwn?: boolean;\n}\n\nfunction MessageAppendix({ isOwn } : OwnProps) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default MessageAppendix;\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString, formatPastTimeShort, formatTime } from '../../../util/dates/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  withFullDate?: boolean;\n  effectEmoji?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onEffectClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  withFullDate,\n  effectEmoji,\n  onClick,\n  onTranslationClick,\n  onEffectClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n\n  const [isActivated, markActivated] = useFlag();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: {\n        key: 'ImportedInfo',\n      },\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const dateTitle = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, oldLang.code, undefined, oldLang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, oldLang.code, undefined, oldLang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(\n        (message.forwardInfo.savedDate || message.forwardInfo.date) * 1000,\n        oldLang.code,\n        undefined,\n        oldLang.timeFormat,\n      );\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('MessageTooltipEditedDate', { date: editDateTime });\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('MessageTooltipForwardedDate', { date: forwardedDateTime });\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, oldLang, message, oldLang.timeFormat]);\n\n  const viewsTitle = useMemo(() => {\n    if (!message.viewsCount) return undefined;\n    let text = lang('MessageTooltipViews', { count: message.viewsCount }, { pluralValue: message.viewsCount });\n    if (message.forwardsCount) {\n      text += '\\n';\n      text += lang('MessageTooltipForwards', { count: message.forwardsCount }, { pluralValue: message.forwardsCount });\n    }\n\n    return text;\n  }, [lang, message.forwardsCount, message.viewsCount]);\n\n  const repliesTitle = useMemo(() => {\n    const count = repliesThreadInfo?.messagesCount;\n    if (!count) return undefined;\n    return lang('MessageTooltipReplies', { count }, { pluralValue: count });\n  }, [lang, repliesThreadInfo]);\n\n  const date = useMemo(() => {\n    const time = formatTime(oldLang, message.date * 1000);\n    if (!withFullDate) {\n      return time;\n    }\n\n    return formatPastTimeShort(oldLang, (message.forwardInfo?.date || message.date) * 1000, true);\n  }, [oldLang, message.date, message.forwardInfo?.date, withFullDate]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {effectEmoji && (\n        <span className=\"message-effect-icon\" onClick={onEffectClick}>\n          {renderText(effectEmoji)}\n        </span>\n      )}\n      {isTranslated && (\n        <Icon name=\"language\" className=\"message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.viewsCount) && (\n        <>\n          <span className=\"message-views\" title={viewsTitle}>\n            {formatIntegerCompact(message.viewsCount!)}\n          </span>\n          <Icon name=\"channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\" title={repliesTitle}>\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <Icon name=\"reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <Icon name=\"pinned-message\" className=\"message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={dateTitle} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('MessageMetaImported')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('MessageMetaEdited')} `}\n        {message.isVideoProcessingPending && `${lang('MessageMetaApproximate')} `}\n        {date}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTime, formatTimeDuration } from '../../../util/dates/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useOldLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <Icon name={isVideo ? 'video-outlined' : 'phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <Icon\n            name=\"arrow-right\"\n            className={buildClassName(\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wqsZyy8u\",\"button\":\"NGmo4ADz\",\"info\":\"iFn6m6hd\",\"reason\":\"l8QfocIQ\",\"arrow\":\"ONmpzmUS\",\"incoming\":\"BfgDXljM\",\"missed\":\"Alra_BWu\",\"canceled\":\"J7xsuCAm\",\"meta\":\"rF5tkx92\",\"duration\":\"kKPKwFzu\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"mVaSjZRJ\",\"buyButton\":\"GnKGu6D9\",\"boughtStatus\":\"IGXW5hWr\",\"star\":\"ywiOugiH\",\"buttonText\":\"gLaaVQXr\"};","import React, { memo, type TeactNode, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPaidMedia } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE, STARS_ICON_PLACEHOLDER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { replaceWithTeact } from '../../../util/replaceWithTeact';\nimport stopEvent from '../../../util/stopEvent';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\n\nimport styles from './PaidMediaOverlay.module.scss';\n\ntype OwnProps = {\n  paidMedia: ApiPaidMedia;\n  chatId: string;\n  messageId: number;\n  isOutgoing?: boolean;\n  children?: TeactNode;\n};\n\nconst PaidMediaOverlay = ({\n  paidMedia,\n  chatId,\n  messageId,\n  isOutgoing,\n  children,\n}: OwnProps) => {\n  const { openInvoice } = getActions();\n  const lang = useOldLang();\n\n  const isClickable = !paidMedia.isBought;\n\n  const buttonText = useMemo(() => {\n    const value = lang('UnlockPaidContent', paidMedia.starsAmount);\n\n    return replaceWithTeact(\n      value, STARS_ICON_PLACEHOLDER, <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />,\n    );\n  }, [lang, paidMedia]);\n\n  const handleClick = useLastCallback((e: React.MouseEvent) => {\n    openInvoice({\n      type: 'message',\n      chatId,\n      messageId,\n    });\n    stopEvent(e);\n  });\n\n  return (\n    <div\n      className={styles.root}\n      onClick={isClickable ? handleClick : undefined}\n    >\n      {children}\n      {isClickable && (\n        <Button\n          className={styles.buyButton}\n          color=\"dark\"\n          size=\"tiny\"\n          fluid\n          pill\n        >\n          <span className={styles.buttonText}>{buttonText}</span>\n        </Button>\n      )}\n      {paidMedia.isBought && (\n        <div className={buildClassName('message-paid-media-status', styles.boughtStatus)}>\n          {isOutgoing ? formatCurrency(paidMedia.starsAmount, STARS_CURRENCY_CODE) : lang('Chat.PaidMedia.Purchased')}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(PaidMediaOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport Icon from '../../common/icons/Icon';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <Icon name={correctAnswer ? 'check' : 'close'} className=\"poll-option-icon\" />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderTextWithEntities({\n            text: answer.text.text,\n            entities: answer.text.entities,\n          })}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiPoll, ApiPollAnswer,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport { selectPeer } from '../../../global/selectors';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { getServerTime } from '../../../util/serverTime';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onSendVote: (options: string[]) => void;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps> = ({\n  message,\n  poll,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onSendVote,\n}) => {\n  const {\n    loadMessage, openPollResults, requestConfetti, showNotification,\n  } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const timerCircleRef = useRef<SVGCircleElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const recentVoterIds = results.recentVoterIds;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: renderTextWithEntities({\n      text: a.text.text,\n      entities: a.text.entities,\n      observeIntersectionForLoading,\n      observeIntersectionForPlaying,\n    }),\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [\n    closePeriod, observeIntersectionForLoading, observeIntersectionForPlaying,\n    summary.answers, summary.closePeriod, summary.quiz,\n  ]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti({});\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const global = getGlobal();\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiPeer[], id) => {\n      const peer = selectPeer(global, id);\n      if (peer) {\n        result.push(peer);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const showSolution = useLastCallback(() => {\n    showNotification({\n      localId: getMessageKey(message),\n      message: renderTextWithEntities({ text: poll.results.solution!, entities: poll.results.solutionEntities }),\n      duration: SOLUTION_DURATION,\n      containerSelector: SOLUTION_CONTAINER_ID,\n    });\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        showSolution();\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useOldLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          <AvatarList\n            size=\"micro\"\n            peers={recentVoters}\n          />\n        </div>\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      <div className=\"poll-question\">\n        {renderTextWithEntities({\n          text: summary.question.text,\n          entities: summary.question.entities,\n          observeIntersectionForLoading,\n          observeIntersectionForPlaying,\n        })}\n      </div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            onClick={showSolution}\n            ariaLabel=\"Show Solution\"\n          >\n            <Icon name=\"lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                isRound\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: OldLangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(Poll);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"FPceNkgD\",\"inactive\":\"hruUWBuj\",\"mirrored\":\"GydRBA08\",\"effect\":\"WMMaWlOL\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStickerMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useOverlayPosition from './hooks/useOverlayPosition';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerView from '../../common/StickerView';\nimport Portal from '../../ui/Portal';\n\nimport styles from './Sticker.module.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop,\n  shouldPlayEffect, withEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const effectRef = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n  const isMirrored = !message.isOutgoing;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getStickerMediaHash(sticker, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect || !withEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && shouldPlayEffect) {\n      startPlayingEffect();\n    }\n  }, [hasEffect, canPlay, shouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const shouldRenderEffect = hasEffect && withEffect && effectBlobUrl && isPlayingEffect;\n  useOverlayPosition({\n    anchorRef: ref,\n    overlayRef: effectRef,\n    isMirrored,\n    isDisabled: !shouldRenderEffect,\n  });\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'media-inner',\n    styles.root,\n    isMemojiSticker && styles.inactive,\n    hasEffect && isMirrored && styles.mirrored,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      {shouldRenderEffect && (\n        <Portal>\n          <AnimatedSticker\n            ref={effectRef}\n            key={mediaHashEffect}\n            className={buildClassName(styles.effect, isMirrored && styles.mirrored)}\n            tgsUrl={effectBlobUrl}\n            size={width * EFFECT_SIZE_MULTIPLIER}\n            play\n            isLowPriority\n            noLoop\n            onEnded={handleEffectEnded}\n          />\n        </Portal>\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory,\n} from '../../../api/types';\n\nimport { selectPeerStory } from '../../../global/selectors';\n\nimport BaseStory from './BaseStory';\n\ninterface OwnProps {\n  message: ApiMessage;\n  isProtected?: boolean;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  isConnected?: boolean;\n}\n\nfunction Story({\n  message, story, isProtected, isConnected,\n}: OwnProps & StateProps) {\n  const { storyData } = message.content;\n\n  return (\n    <BaseStory\n      story={story || storyData}\n      isProtected={isProtected}\n      isConnected={isConnected}\n    />\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    isConnected: global.connectionState === 'connectionStateReady',\n  };\n})(Story));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiTypeStory, ApiUser,\n} from '../../../api/types';\n\nimport { getPeerTitle, getStoryMediaHash, getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\ninterface OwnProps {\n  message: ApiMessage;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  peer?: ApiPeer;\n  targetUser?: ApiUser;\n  isUnread?: boolean;\n}\n\nfunction StoryMention({\n  message, story, peer, isUnread, targetUser,\n}: OwnProps & StateProps) {\n  const { openStoryViewer } = getActions();\n\n  const lang = useOldLang();\n\n  const { storyData } = message.content;\n\n  const handleClick = useLastCallback(() => {\n    openStoryViewer({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      isSinglePeer: true,\n      isSingleStory: true,\n    });\n  });\n\n  const isDeleted = story && 'isDeleted' in story;\n  const isLoaded = story && 'content' in story;\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded\n    ? getStoryMediaHash(story, 'pictogram')\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEnsureStory(storyData!.peerId, storyData!.id, story);\n\n  function getTitle() {\n    if (peer && 'isSelf' in peer && peer.isSelf) {\n      return isDeleted\n        ? lang('ExpiredStoryMentioned', getUserFirstOrLastName(targetUser))\n        : lang('StoryYouMentionedTitle', getUserFirstOrLastName(targetUser));\n    }\n\n    return isDeleted\n      ? lang('ExpiredStoryMention')\n      : lang('StoryMentionedTitle', getPeerTitle(lang, peer!));\n  }\n\n  return (\n    <div\n      className={buildClassName('action-message-story-mention', isUnread && 'is-unread', isLoaded && 'with-preview')}\n      tabIndex={0}\n      role=\"button\"\n      onClick={isLoaded ? handleClick : undefined}\n    >\n      {isLoaded && (\n        <span className=\"story-media-wrapper\">\n          {thumbUrl && (\n            <img src={thumbUrl} alt=\"\" className=\"story-media\" />\n          )}\n        </span>\n      )}\n\n      <span className=\"story-title\">{renderText(getTitle(), ['emoji', 'simple_markdown'])}</span>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n  const lastReadId = selectPeerStories(global, peerId)?.lastReadId;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    peer: selectPeer(global, peerId),\n    targetUser: selectUser(global, message.chatId),\n    isUnread: Boolean(lastReadId && lastReadId < id),\n  };\n})(StoryMention));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  useUnmountCleanup,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableEffect,\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiPeer,\n  ApiPoll,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiTypeStory,\n  ApiUser,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  ActiveEmojiInteraction,\n  ChatTranslatedMessages,\n  FocusDirection,\n  IAlbum,\n  ISettings,\n  MessageListType,\n  ScrollTargetPosition,\n  ThreadId,\n} from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport type { OnIntersectPinnedMessage } from '../hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getIsDownloading,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageDownloadableMedia,\n  getMessageHtmlId,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getPeerTitle,\n  hasMessageText,\n  hasMessageTtl,\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatPublic,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyToMessage,\n  isSystemBot,\n  isUserId,\n} from '../../../global/helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../../global/helpers/replies';\nimport {\n  selectActiveDownloads,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectCanReplyToMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentMiddleSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPeer,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectPollFromMessage,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectSenderFromHeader,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport stopEvent from '../../../util/stopEvent';\nimport { isElementInViewport } from '../../../util/visibility/isElementInViewport';\nimport { IS_ANDROID, IS_ELECTRON, IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport { calculateDimensionsForMessageMedia, getStickerDimensions, REM } from '../../common/helpers/mediaDimensions';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\nimport renderText from '../../common/helpers/renderText';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport getSingularPaidMedia from './helpers/getSingularPaidMedia';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useFlag from '../../../hooks/useFlag';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useMessageResizeObserver from '../../../hooks/useResizeMessageObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport useOuterHandlers from './hooks/useOuterHandlers';\n\nimport Audio from '../../common/Audio';\nimport Avatar from '../../common/Avatar';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Document from '../../common/Document';\nimport DotAnimation from '../../common/DotAnimation';\nimport EmbeddedMessage from '../../common/embedded/EmbeddedMessage';\nimport EmbeddedStory from '../../common/embedded/EmbeddedStory';\nimport FakeIcon from '../../common/FakeIcon';\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport MessageText from '../../common/MessageText';\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport TopicChip from '../../common/TopicChip';\nimport { animateSnap } from '../../main/visualEffects/SnapEffectContainer';\nimport Button from '../../ui/Button';\nimport Album from './Album';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport CommentButton from './CommentButton';\nimport Contact from './Contact';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport FactCheck from './FactCheck';\nimport Game from './Game';\nimport Giveaway from './Giveaway';\nimport InlineButtons from './InlineButtons';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport MessageAppendix from './MessageAppendix';\nimport MessageEffect from './MessageEffect';\nimport MessageMeta from './MessageMeta';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport PaidMediaOverlay from './PaidMediaOverlay';\nimport Photo from './Photo';\nimport Poll from './Poll';\nimport Reactions from './reactions/Reactions';\nimport RoundVideo from './RoundVideo';\nimport Sticker from './Sticker';\nimport Story from './Story';\nimport StoryMention from './StoryMention';\nimport Video from './Video';\nimport WebPage from './WebPage';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: ThreadId;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    getIsMessageListReady: Signal<boolean>;\n    onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  sender?: ApiPeer;\n  canShowSender: boolean;\n  originSender?: ApiPeer;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiPeer;\n  replyMessageForwardSender?: ApiPeer;\n  replyMessageChat?: ApiChat;\n  isReplyPrivate?: boolean;\n  replyStory?: ApiTypeStory;\n  storySender?: ApiPeer;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  focusedQuote?: string;\n  noFocusHighlight?: boolean;\n  scrollTargetPosition?: ScrollTargetPosition;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  hasActiveReactions?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: ThreadId;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withAnimatedEffects?: boolean;\n  webPageStory?: ApiTypeStory;\n  isConnected: boolean;\n  isLoadingComments?: boolean;\n  shouldWarnAboutSvg?: boolean;\n  senderBoosts?: number;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  canTranscribeVoice?: boolean;\n  viaBusinessBot?: ApiUser;\n  effect?: ApiAvailableEffect;\n  poll?: ApiPoll;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  replyMessageForwardSender,\n  replyMessageChat,\n  replyStory,\n  isReplyPrivate,\n  storySender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isLoadingComments,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  focusedQuote,\n  noFocusHighlight,\n  scrollTargetPosition,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  hasActiveReactions,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withAnimatedEffects,\n  webPageStory,\n  isConnected,\n  getIsMessageListReady,\n  shouldWarnAboutSvg,\n  senderBoosts,\n  tags,\n  canTranscribeVoice,\n  viaBusinessBot,\n  effect,\n  poll,\n  onIntersectPinnedMessage,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n    markMentionsRead,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useOldLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [isPlayingSnapAnimation, setIsPlayingSnapAnimation] = useState(false);\n  const [isPlayingDeleteAnimation, setIsPlayingDeleteAnimation] = useState(false);\n  const [shouldPlayEffect, requestEffect, hideEffect] = useFlag();\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuAnchor,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    isTouchScreen && isInSelectMode,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  useShowTransition({\n    ref,\n    isOpen: isShown || isJustAdded,\n    noMountTransition: noAppearanceAnimation && !isJustAdded,\n    className: false,\n  });\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError, factCheck,\n  } = message;\n\n  useUnmountCleanup(() => {\n    if (message.isPinned) {\n      const id = album ? album.mainMessage.id : messageId;\n      onIntersectPinnedMessage({ viewportPinnedIdsToRemove: [id] });\n    }\n  });\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasMessageReply = isReplyToMessage(message) && !shouldHideReply;\n\n  const { paidMedia } = getMessageContent(message);\n  const { photo: paidMediaPhoto, video: paidMediaVideo } = getSingularPaidMedia(paidMedia);\n\n  const {\n    photo = paidMediaPhoto, video = paidMediaVideo, audio,\n    voice, document, sticker, contact,\n    webPage, invoice, location,\n    action, game, storyData, giveaway,\n    giveawayResults,\n  } = getMessageContent(message);\n\n  const messageReplyInfo = getMessageReplyInfo(message);\n  const storyReplyInfo = getStoryReplyInfo(message);\n\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const hasStoryReply = Boolean(storyReplyInfo);\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = !withVoiceTranscription && getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isAnonymousForwards\n    && !botSender\n  ) || Boolean(storyData && !storyData.isMention);\n  const canShowSenderBoosts = Boolean(senderBoosts) && !asForwarded && isFirstInGroup;\n  const isStoryMention = storyData?.isMention;\n  const isRoundVideo = video?.mediaType === 'video' && video.isRound;\n  const isAlbum = Boolean(album)\n    && (\n      (album.isPaidMedia && paidMedia!.extendedMedia.length > 1)\n      || album.messages.length > 1\n    ) && !album.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuAnchor !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n    && !isStoryMention\n    && !((sticker || hasAnimatedEmoji) && asForwarded)\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed\n  && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || isChatWithSelf || isRepliesChat || isAnonymousForwards)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasFactCheck = Boolean(factCheck?.text);\n\n  const hasForwardedCustomShape = asForwarded && isCustomShape;\n  const hasSubheader = hasTopicChip || hasMessageReply || hasStoryReply || hasForwardedCustomShape;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n\n  const shouldPreferOriginSender = forwardInfo\n    && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n\n  const messageColorPeer = asForwarded ? originSender : sender;\n  const noUserColors = isOwn && !isCustomShape;\n\n  const senderPeer = (forwardInfo || storyData) ? originSender : messageSender;\n  const hasTtl = hasMessageTtl(message);\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n    getIsMessageListReady,\n  );\n\n  const {\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handlePhotoMediaClick,\n    handleVideoMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n    handleStoryClick,\n  } = useInnerHandlers({\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    isTranslatingChat: Boolean(requestedChatTranslationLanguage),\n    story: replyStory && 'content' in replyStory ? replyStory : undefined,\n    isReplyPrivate,\n    isRepliesChat,\n    isSavedMessages: isChatWithSelf,\n  });\n\n  const handleEffectClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    requestEffect();\n  });\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  useEffect(() => {\n    const element = ref.current;\n    const isPartialAlbumDelete = message.isInAlbum && album?.messages.some((msg) => !msg.isDeleting);\n    if (message.isDeleting && element && !isPartialAlbumDelete) {\n      if (animateSnap(element)) {\n        setIsPlayingSnapAnimation(true);\n      } else {\n        setIsPlayingDeleteAnimation(true);\n      }\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Only start animation on `isDeleting` change\n  }, [message.isDeleting]);\n\n  const textMessage = album?.hasMultipleCaptions ? undefined : (album?.captionMessage || message);\n  const hasTextContent = textMessage && hasMessageText(textMessage);\n  const hasText = hasTextContent || hasFactCheck;\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && !hasTextContent ? 'is-protected' : 'allow-selection',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.viewsCount) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasMessageReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    isPlayingDeleteAnimation && 'is-deleting',\n    isPlayingSnapAnimation && 'is-dissolving',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    isJustAdded && 'is-just-added',\n    (hasActiveReactions || shouldPlayEffect) && 'has-active-effect',\n    isStoryMention && 'is-story-mention',\n    !canShowActionButton && 'no-action-button',\n  );\n\n  const text = textMessage && getMessageContent(textMessage).text;\n  const isInvertedMedia = Boolean(message.isInvertedMedia);\n\n  const { replyToMsgId, replyToPeerId, isQuote } = messageReplyInfo || {};\n  const { peerId: storyReplyPeerId, storyId: storyReplyId } = storyReplyInfo || {};\n\n  useEffect(() => {\n    if ((sticker?.hasEffect || effect) && ((\n      memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n    ) || isLocal)) {\n      requestEffect();\n    }\n  }, [effect, isLocal, memoFirstUnreadIdRef, messageId, sticker?.hasEffect]);\n\n  const detectedLanguage = useTextLanguage(\n    text?.text,\n    !(areTranslationsEnabled || shouldDetectChatLanguage),\n    getIsMessageListReady,\n  );\n  useDetectChatLanguage(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePreviousDeprecated(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo?.isCommentsInfo\n    && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast && !isStoryMention && !hasTtl;\n\n  const hasOutsideReactions = !withVoiceTranscription && hasReactions\n    && (isCustomShape || ((photo || video || storyData || (location?.mediaType === 'geo')) && !hasText));\n\n  const contentClassName = buildContentClassName(message, album, {\n    poll,\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasCommentCounter: hasThread && repliesThreadInfo.messagesCount > 0,\n    hasCommentButton: withCommentButton,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.mediaType === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n    peerColorClass: getPeerColorClass(messageColorPeer, noUserColors, true),\n    hasOutsideReactions,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize && !isInvertedMedia) {\n    metaPosition = 'in-text';\n  } else if (isInvertedMedia && !emojiSize && (hasFactCheck || webPage)) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (hasOutsideReactions) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    replyToPeerId || chatId,\n    replyToMsgId,\n    replyMessage,\n    message.id,\n    shouldHideReply || isQuote || isReplyPrivate,\n  );\n\n  useEnsureStory(\n    storyReplyPeerId || chatId,\n    storyReplyId,\n    replyStory,\n  );\n\n  useFocusMessage({\n    elementRef: ref,\n    chatId,\n    isFocused,\n    focusDirection,\n    noFocusHighlight,\n    isResizingContainer,\n    isJustAdded,\n    isQuote: Boolean(focusedQuote),\n    scrollTargetPosition,\n  });\n\n  const viaBusinessBotTitle = viaBusinessBot ? getPeerTitle(lang, viaBusinessBot) : undefined;\n\n  const canShowPostAuthor = !message.senderId;\n  const signature = viaBusinessBotTitle || (canShowPostAuthor && message.postAuthorTitle)\n    || ((asForwarded || isChatWithSelf) && forwardInfo?.postAuthorTitle)\n    || undefined;\n\n  useMessageResizeObserver(ref, isLastInList);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (!bottomMarker || !isElementInViewport(bottomMarker)) return;\n\n    if (hasUnreadReaction) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n\n    if (message.hasUnreadMention) {\n      markMentionsRead({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction, message.hasUnreadMention]);\n\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded && !isCustomShape ? 28 : 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    let noMediaCorners = false;\n    let style = '';\n    let reactionsMaxWidth;\n\n    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n      let width: number | undefined;\n      if (photo || video) {\n        const media = (photo || video);\n        if (media && !isRoundVideo) {\n          width = calculateMediaDimensions({\n            media,\n            isOwn,\n            asForwarded,\n            noAvatars,\n            isMobile,\n          }).width;\n        }\n      } else if (invoice?.extendedMedia && (\n        invoice.extendedMedia.width && invoice.extendedMedia.height\n      )) {\n        const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n        width = calculateDimensionsForMessageMedia({\n          width: previewWidth,\n          height: previewHeight,\n          fromOwnMessage: isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMediaWithCommentButton), width);\n        if (!asForwarded && invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n          noMediaCorners = true;\n        }\n      }\n    } else if (albumLayout) {\n      calculatedWidth = Math.max(\n        getMinMediaWidth(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width,\n      );\n      if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth}px`;\n      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n    } else if (sticker && !hasSubheader) {\n      const { width } = getStickerDimensions(sticker, isMobile);\n      style = `width: ${width + extraPadding}px`;\n      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style, reactionsMaxWidth,\n    };\n  }, [\n    albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton,\n    isMobile, isOwn, noAvatars, photo, sticker, text?.text, video, isRoundVideo,\n  ]);\n\n  const {\n    contentWidth, noMediaCorners, style, reactionsMaxWidth,\n  } = sizeCalculations;\n\n  function renderMessageText(isForAnimation?: boolean) {\n    if (!textMessage) return undefined;\n    return (\n      <MessageText\n        messageOrStory={textMessage}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        focusedQuote={focusedQuote}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n        isInSelectMode={isInSelectMode}\n        canBeEmpty={hasFactCheck}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !hasActiveReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    hasActiveReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        withFullDate={isChatWithSelf && !isOwn}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        effectEmoji={effect?.emoticon}\n        onClick={handleMetaClick}\n        onEffectClick={handleEffectClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        message={reactionMessage!}\n        threadId={threadId}\n        metaChildren={meta}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n        tags={tags}\n        isCurrentUserPremium={isPremium}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasForwardedCustomShape && 'forwarded-custom-shape',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup\n      && (!hasText || (isInvertedMedia && !hasFactCheck && !hasReactions)) && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n    const shouldReadMedia = !hasTtl || !isOwn || isChatWithSelf;\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {!asForwarded && shouldRenderSenderName() && renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasForwardedCustomShape && (\n              <div className=\"forward-custom-shape-subheader\">\n                <div className=\"message-title\">\n                  {renderForwardTitle()}\n                </div>\n                {renderSenderName(true, true)}\n              </div>\n            )}\n            {hasMessageReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                replyInfo={messageReplyInfo}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                senderChat={replyMessageChat}\n                forwardSender={replyMessageForwardSender}\n                chatTranslations={chatTranslations}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n            {hasStoryReply && (\n              <EmbeddedStory\n                story={replyStory}\n                sender={storySender}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                onClick={handleStoryClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={shouldPlayEffect}\n            withEffect={withAnimatedEffects}\n            onStopEffect={hideEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withAnimatedEffects && isUserId(chatId) && !effect}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withAnimatedEffects && isUserId(chatId) && !effect}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {withAnimatedEffects && effect && !isLocal && (\n          <MessageEffect\n            shouldPlay={shouldPlayEffect}\n            messageId={message.id}\n            isMirrored={!message.isOutgoing}\n            effect={effect}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onStop={hideEffect}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && isRoundVideo && !withVoiceTranscription && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n            onReadMedia={shouldReadMedia ? handleReadMedia : undefined}\n            onHideTranscription={setTranscriptionHidden}\n            isTranscriptionError={isTranscriptionError}\n            isTranscribed={Boolean(transcribedText)}\n            canTranscribe={canTranscribeVoice && !hasTtl}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribing={isTranscribing}\n          />\n        )}\n        {(audio || voice || withVoiceTranscription) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && shouldReadMedia ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={canTranscribeVoice && !hasTtl}\n          />\n        )}\n        {document && (\n          <Document\n            document={document}\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n          />\n        )}\n        {storyData && !isStoryMention && (\n          <Story\n            message={message}\n            isProtected={isProtected}\n          />\n        )}\n        {isStoryMention && <StoryMention message={message} />}\n        {contact && (\n          <Contact contact={contact} noUserColors={isOwn} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {(giveaway || giveawayResults) && (\n          <Giveaway message={message} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {isInvertedMedia && renderInvertedMediaContent(hasCustomAppendix)}\n\n        {!isInvertedMedia && (\n          <>\n            {renderInvertibleMediaContent(hasCustomAppendix)}\n            {hasText && !hasAnimatedEmoji && (\n              <div className={textContentClass} dir=\"auto\">\n                {renderMessageText()}\n                {isTranslationPending && (\n                  <div className=\"translation-animation\">\n                    <div className=\"text-loading\">\n                      {renderMessageText(true)}\n                    </div>\n                  </div>\n                )}\n                {hasFactCheck && (\n                  <FactCheck factCheck={factCheck} isToggleDisabled={isInSelectMode} />\n                )}\n                {metaPosition === 'in-text' && renderReactionsAndMeta()}\n              </div>\n            )}\n            {renderWebPage()}\n          </>\n        )}\n\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderInvertedMediaContent(hasCustomAppendix: boolean) {\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n    );\n    const footerClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    const hasMediaAfterText = isAlbum || (!isAlbum && photo) || (!isAlbum && video && !isRoundVideo);\n    const hasContentAfterText = hasMediaAfterText || (!hasAnimatedEmoji && hasFactCheck);\n    const isMetaInText = metaPosition === 'in-text';\n\n    return (\n      <>\n        {renderWebPage()}\n        {hasText && !hasAnimatedEmoji && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {!hasContentAfterText && isMetaInText && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {hasContentAfterText && (\n          <>\n            {renderInvertibleMediaContent(hasCustomAppendix)}\n            {!hasAnimatedEmoji && (\n              <div className={footerClass} dir=\"auto\">\n                {hasFactCheck && (\n                  <FactCheck factCheck={factCheck} isToggleDisabled={isInSelectMode} />\n                )}\n                {isMetaInText && renderReactionsAndMeta()}\n              </div>\n            )}\n          </>\n        )}\n\n      </>\n    );\n  }\n\n  function renderWebPage() {\n    return webPage && (\n      <WebPage\n        message={message}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        noAvatars={noAvatars}\n        canAutoLoad={canAutoLoadMedia}\n        canAutoPlay={canAutoPlayMedia}\n        asForwarded={asForwarded}\n        isDownloading={isDownloading}\n        isProtected={isProtected}\n        theme={theme}\n        story={webPageStory}\n        isConnected={isConnected}\n        backgroundEmojiId={messageColorPeer?.color?.backgroundEmojiId}\n        shouldWarnAboutSvg={shouldWarnAboutSvg}\n        autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n        onAudioPlay={handleAudioPlay}\n        onMediaClick={handleMediaClick}\n        onCancelMediaTransfer={handleCancelUpload}\n      />\n    );\n  }\n\n  function renderInvertibleMediaContent(hasCustomAppendix: boolean) {\n    const content = (\n      <>\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            messageText={text?.text}\n            photo={photo}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handlePhotoMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && !isRoundVideo && (\n          <Video\n            video={video}\n            isOwn={isOwn}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleVideoMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n      </>\n    );\n\n    if (paidMedia) {\n      return (\n        <PaidMediaOverlay chatId={chatId} messageId={messageId} paidMedia={paidMedia} isOutgoing={isOwn}>\n          {content}\n        </PaidMediaOverlay>\n      );\n    }\n\n    return content;\n  }\n\n  function shouldRenderSenderName() {\n    const media = photo || video || location || paidMedia;\n    return !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasMessageReply && isCustomShape);\n  }\n\n  function renderForwardTitle() {\n    return (\n      <span className=\"forward-title-container\">\n        {asForwarded && (\n          <Icon name={forwardInfo?.hiddenUserName ? 'forward' : 'share-filled'} />\n        )}\n        {asForwarded && (\n          <span className=\"forward-title\">\n            {lang('ForwardedFrom')}\n          </span>\n        )}\n      </span>\n    );\n  }\n\n  function renderSenderName(shouldSkipRenderForwardTitle:boolean = false, shouldSkipRenderAdminTitle: boolean = false) {\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getPeerTitle(lang, senderPeer);\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    } else if (storyData && originSender) {\n      senderTitle = getPeerTitle(lang, originSender!);\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    const shouldRenderForwardAvatar = asForwarded && senderPeer;\n    const hasBotSenderUsername = botSender?.usernames?.length;\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {(senderTitle || asForwarded) ? (\n          <span\n            className={buildClassName(\n              'message-title-name-container',\n              forwardInfo?.hiddenUserName ? 'sender-hidden' : 'interactive',\n              senderColor,\n            )}\n            dir=\"ltr\"\n          >\n            {!shouldSkipRenderForwardTitle && renderForwardTitle()}\n            <span className=\"message-title-name\">\n              {storyData && <Icon name=\"play-story\" />}\n              {shouldRenderForwardAvatar && (\n                <Avatar\n                  className=\"forward-avatar\"\n                  peer={senderPeer}\n                  size=\"micro\"\n                />\n              )}\n              <span\n                className=\"sender-title\"\n                onClick={handleSenderClick}\n              >\n                {senderTitle ? renderText(senderTitle) : (asForwarded ? NBSP : undefined)}\n              </span>\n              {!asForwarded && senderEmojiStatus && (\n                <CustomEmoji\n                  documentId={senderEmojiStatus.documentId}\n                  loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                  observeIntersectionForLoading={observeIntersectionForLoading}\n                  observeIntersectionForPlaying={observeIntersectionForPlaying}\n                />\n              )}\n              {!asForwarded && !senderEmojiStatus && senderIsPremium && <StarIcon />}\n              {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n            </span>\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender?.usernames?.length && (\n          <span className=\"interactive\">\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"sender-title\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames[0].username}`)}\n            </span>\n          </span>\n        )}\n        <div className=\"title-spacer\" />\n        {!shouldSkipRenderAdminTitle && !hasBotSenderUsername ? (forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined) : undefined}\n        {canShowSenderBoosts && (\n          <span className=\"sender-boosts\" aria-hidden>\n            <Icon name={senderBoosts > 1 ? 'boosts' : 'boost'} />\n            {senderBoosts > 1 ? senderBoosts : undefined}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onCopy={isProtected ? stopEvent : undefined}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.viewsCount !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <Icon name=\"select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <Icon name=\"select\" />\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName('message-content-wrapper',\n          contentClassName.includes('text') && 'can-select-text',\n          contentClassName.includes('giveaway') && 'giveaway-result-content')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <>\n              {shouldRenderSenderName() && renderSenderName()}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && !isStoryMention && renderReactionsAndMeta()}\n          {canShowActionButton && (\n            <div className={buildClassName(\n              'message-action-buttons',\n              isLoadingComments && 'message-action-buttons-shown',\n            )}\n            >\n              {canForward && (\n                <Button\n                  className=\"message-action-button\"\n                  color=\"translucent-white\"\n                  round\n                  size=\"tiny\"\n                  ariaLabel={lang('lng_context_forward_msg')}\n                  onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n                >\n                  <Icon name=\"share-filled\" />\n                </Button>\n              )}\n              {canFocus && (\n                <Button\n                  className=\"message-action-button\"\n                  color=\"translucent-white\"\n                  round\n                  size=\"tiny\"\n                  ariaLabel=\"Focus message\"\n                  onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n                >\n                  <Icon name=\"arrow-right\" />\n                </Button>\n              )}\n            </div>\n          )}\n          {withCommentButton && (\n            <CommentButton\n              threadInfo={repliesThreadInfo}\n              disabled={noComments}\n              isLoading={isLoadingComments}\n              isCustomShape={isCustomShape}\n            />\n          )}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && !isStoryMention && (\n          <Reactions\n            message={reactionMessage!}\n            threadId={threadId}\n            isOutside\n            isCurrentUserPremium={isPremium}\n            maxWidth={reactionsMaxWidth}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n            tags={tags}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n      loadingThread,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, isOutgoing, forwardInfo, transcriptionId, isPinned, viaBusinessBotId, effectId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isSystemBotChat = isSystemBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const webPageStoryData = message.content.webPage?.story;\n    const webPageStory = webPageStoryData\n      ? selectPeerStory(global, webPageStoryData.peerId, webPageStoryData.id)\n      : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const isThreadTop = message.id === threadId;\n\n    const { replyToMsgId, replyToPeerId, replyFrom } = getMessageReplyInfo(message) || {};\n    const { peerId: storyReplyPeerId, storyId: storyReplyId } = getStoryReplyInfo(message) || {};\n\n    const shouldHideReply = replyToMsgId && replyToMsgId === threadId;\n    const replyMessage = replyToMsgId ? selectChatMessage(global, replyToPeerId || chatId, replyToMsgId) : undefined;\n    const forwardHeader = forwardInfo || replyFrom;\n    const replyMessageSender = replyMessage ? selectSender(global, replyMessage)\n      : forwardHeader && !isSystemBotChat && !isAnonymousForwards\n        ? selectSenderFromHeader(global, forwardHeader) : undefined;\n    const replyMessageForwardSender = replyMessage && selectForwardedSender(global, replyMessage);\n    const replyMessageChat = replyToPeerId ? selectChat(global, replyToPeerId) : undefined;\n    const isReplyPrivate = !isSystemBotChat && !isAnonymousForwards && replyMessageChat\n      && !isChatPublic(replyMessageChat)\n      && (replyMessageChat.isNotJoined || replyMessageChat.isRestricted);\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n    const replyStory = storyReplyId && storyReplyPeerId\n      ? selectPeerStory(global, storyReplyPeerId, storyReplyId)\n      : undefined;\n    const storySender = storyReplyPeerId ? selectPeer(global, storyReplyPeerId) : undefined;\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n      quote: focusedQuote, scrollTargetPosition,\n    } = (isFocused && focusedMessage) || {};\n\n    const middleSearch = selectCurrentMiddleSearch(global);\n    const highlight = middleSearch?.results?.query\n      && `${middleSearch.isHashtag ? '#' : ''}${middleSearch.results.query}`;\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const canReply = messageListType === 'thread' && selectCanReplyToMessage(global, message, threadId);\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = getMessageDownloadableMedia(message);\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    const repliesThreadInfo = selectThreadInfo(global, chatId, album?.commentsMessage?.id || id);\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? selectTopicFromMessage(global, message) : undefined;\n\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    const hasActiveReactions = Boolean(reactionMessage && activeReactions[getMessageKey(reactionMessage)]?.length);\n\n    const isPremium = selectIsCurrentUserPremium(global);\n    const senderBoosts = sender && selectIsChatWithSelf(global, sender.id)\n      ? (chatFullInfo?.boostsApplied ?? message.senderBoosts) : message.senderBoosts;\n\n    const chatLevel = chat?.boostLevel || 0;\n    const transcribeMinLevel = global.appConfig?.groupTranscribeLevelMin;\n    const canTranscribeVoice = isPremium || Boolean(transcribeMinLevel && chatLevel >= transcribeMinLevel);\n\n    const viaBusinessBot = viaBusinessBotId ? selectUser(global, viaBusinessBotId) : undefined;\n\n    const effect = effectId ? global.availableEffectById[effectId] : undefined;\n\n    const poll = selectPollFromMessage(global, message);\n\n    return {\n      theme: selectTheme(global),\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      replyMessageForwardSender,\n      replyMessageChat,\n      replyStory,\n      isReplyPrivate,\n      storySender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat: isSystemBotChat,\n      isAnonymousForwards,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo,\n      availableReactions: global.reactions.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      hasActiveReactions,\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium,\n      senderAdminMember,\n      messageTopic,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withAnimatedEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      webPageStory,\n      isConnected,\n      isLoadingComments: repliesThreadInfo?.isCommentsInfo\n        && loadingThread?.loadingChatId === repliesThreadInfo?.originChannelId\n        && loadingThread?.loadingMessageId === repliesThreadInfo?.originMessageId,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n        focusedQuote,\n        scrollTargetPosition,\n      }),\n      senderBoosts,\n      tags: global.savedReactionTags?.byKey,\n      canTranscribeVoice,\n      viaBusinessBot,\n      effect,\n      poll,\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiStory, ApiTopic, ApiUser,\n} from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\nimport type { IAlbum, ThreadId } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMessageReplyInfo } from '../../../../global/helpers/replies';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers({\n  lang,\n  selectMessage,\n  message,\n  chatId,\n  threadId,\n  isInDocumentGroup,\n  asForwarded,\n  isScheduled,\n  album,\n  senderPeer,\n  botSender,\n  messageTopic,\n  isTranslatingChat,\n  story,\n  isReplyPrivate,\n  isRepliesChat,\n  isSavedMessages,\n}: {\n  lang: OldLangFn;\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void;\n  message: ApiMessage;\n  chatId: string;\n  threadId: ThreadId;\n  isInDocumentGroup: boolean;\n  asForwarded?: boolean;\n  isScheduled?: boolean;\n  album?: IAlbum;\n  avatarPeer?: ApiPeer;\n  senderPeer?: ApiPeer;\n  botSender?: ApiUser;\n  messageTopic?: ApiTopic;\n  isTranslatingChat?: boolean;\n  story?: ApiStory;\n  isReplyPrivate?: boolean;\n  isRepliesChat?: boolean;\n  isSavedMessages?: boolean;\n}) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelUploadMedia, sendPollVote, openForwardMenu,\n    openChatLanguageModal, openThread, openStoryViewer, searchChatMediaMessages,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, groupedId, content: { paidMedia },\n  } = message;\n\n  const {\n    replyToMsgId, replyToPeerId, replyToTopId, isQuote, quoteText,\n  } = getMessageReplyInfo(message) || {};\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    if (!replyToMsgId || isReplyPrivate) {\n      showNotification({\n        message: isQuote ? lang('QuotePrivate') : lang('ReplyPrivate'),\n      });\n      return;\n    }\n\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: isRepliesChat ? replyToTopId : threadId, // Open comments from Replies bot, otherwise, keep current thread\n      messageId: replyToMsgId,\n      replyMessageId: replyToPeerId ? undefined : messageId,\n      noForumTopicPanel: !replyToPeerId, // Open topic panel for cross-chat replies\n      ...(isQuote && { quote: quoteText?.text }),\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n  const openMediaViewerWithPhotoOrVideo = useLastCallback((withDynamicLoading: boolean): void => {\n    if (paidMedia && !paidMedia.isBought) return;\n    if (withDynamicLoading) {\n      searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: messageId });\n    }\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n      withDynamicLoading,\n    });\n  });\n  const handlePhotoMediaClick = useLastCallback((): void => {\n    const withDynamicLoading = !isScheduled && !paidMedia;\n    openMediaViewerWithPhotoOrVideo(withDynamicLoading);\n  });\n  const handleVideoMediaClick = useLastCallback(() => {\n    const isGif = message.content?.video?.isGif;\n    const withDynamicLoading = !isGif && !isScheduled && !paidMedia;\n    openMediaViewerWithPhotoOrVideo(withDynamicLoading);\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number, albumIndex?: number): void => {\n    if (paidMedia && !paidMedia.isBought) return;\n\n    searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: messageId });\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      mediaIndex: albumIndex,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n      withDynamicLoading: !paidMedia,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelUploadMedia({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    const originalChatId = (isSavedMessages && forwardInfo!.savedFromPeerId) || forwardInfo!.fromChatId!;\n\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: originalChatId, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (replyToPeerId && replyToTopId) {\n      focusMessage({\n        chatId: replyToPeerId,\n        threadId: replyToTopId,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: originalChatId, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openThread({\n      chatId: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  const handleStoryClick = useLastCallback(() => {\n    if (!story) return;\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSingleStory: true,\n    });\n  });\n\n  return {\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handlePhotoMediaClick,\n    handleVideoMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n    handleStoryClick,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text, getIsReady]);\n\n  return language;\n}\n","import type { ApiMessage, ApiPoll } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\nimport getSingularPaidMedia from './getSingularPaidMedia';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  album?: IAlbum,\n  {\n    poll,\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasCommentCounter,\n    hasCommentButton,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n    peerColorClass,\n    hasOutsideReactions,\n  }: {\n    poll?: ApiPoll;\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasCommentCounter?: boolean;\n    hasCommentButton?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n    peerColorClass?: string;\n    hasOutsideReactions?: boolean;\n  } = {},\n) {\n  const { paidMedia } = getMessageContent(message);\n  const { photo: paidMediaPhoto, video: paidMediaVideo } = getSingularPaidMedia(paidMedia);\n\n  const content = getMessageContent(message);\n  const {\n    photo = paidMediaPhoto, video = paidMediaVideo,\n    audio, voice, document, webPage, contact, location, invoice, storyData,\n    giveaway, giveawayResults,\n  } = content;\n  const text = album?.hasMultipleCaptions ? undefined : getMessageContent(album?.captionMessage || message).text;\n  const hasFactCheck = Boolean(message.factCheck?.text);\n\n  const isRoundVideo = video?.mediaType === 'video' && video.isRound;\n  const isInvertedMedia = message.isInvertedMedia;\n  const isInvertibleMedia = photo || (video && !isRoundVideo) || album || webPage;\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = storyData || photo || video || location || invoice?.extendedMedia || paidMedia;\n  const hasText = text || location?.mediaType === 'venue' || isGeoLiveActive || hasFactCheck;\n  const isMediaWithNoText = isMedia && !hasText;\n  const hasInlineKeyboard = Boolean(message.inlineButtons);\n  const isViaBot = Boolean(message.viaBotId);\n\n  const hasFooter = (() => {\n    if (isInvertedMedia && isInvertibleMedia) {\n      if (hasReactions && !hasOutsideReactions) return true;\n      if (hasFactCheck) return true;\n      if (webPage && hasText) return true;\n      return false;\n    }\n    return hasText;\n  })();\n\n  if (peerColorClass) {\n    classNames.push(peerColorClass);\n  }\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (!Object.keys(content).length) {\n    classNames.push('unsupported');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n\n    if (isRoundVideo) {\n      classNames.push('round');\n    }\n\n    if (hasCommentCounter) {\n      classNames.push('has-comment-counter');\n    }\n  }\n  if (isMedia && !withVoiceTranscription) {\n    classNames.push('media');\n  } else if (video) {\n    classNames.push('video');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (giveaway || giveawayResults) {\n    classNames.push('giveaway');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n\n    if (webPage.document) {\n      classNames.push('document');\n    }\n\n    if (webPage.gift) {\n      classNames.push('gift');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (storyData) {\n    classNames.push('story');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (hasOutsideReactions) {\n    classNames.push('has-outside-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasThread) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText\n      || forceSenderName || hasFactCheck || withVoiceTranscription) {\n      classNames.push('has-solid-background');\n    }\n\n    if (hasFactCheck) {\n      classNames.push('has-fact-check');\n    }\n\n    if (isLastInGroup && !hasInlineKeyboard && (photo || !isMediaWithNoText || hasCommentButton)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  if (isInvertibleMedia && isInvertedMedia) {\n    classNames.push('is-inverted-media');\n  }\n\n  if (hasFooter) {\n    classNames.push('has-footer');\n  } else {\n    classNames.push('no-footer');\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n} from '../../../api/types';\n\nimport {\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isSystemBot,\n} from '../../../global/helpers';\nimport {\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectSender,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './SenderGroupContainer.module.scss';\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    withAvatar?: boolean;\n    children: React.ReactNode;\n    id: string;\n  };\n\n  type StateProps = {\n    sender?: ApiPeer;\n    canShowSender: boolean;\n    originSender?: ApiPeer;\n    isChatWithSelf?: boolean;\n    isRepliesChat?: boolean;\n    isAnonymousForwards?: boolean;\n  };\n\nconst SenderGroupContainer: FC<OwnProps & StateProps> = ({\n  message,\n  withAvatar,\n  children,\n  id,\n  sender,\n  canShowSender,\n  originSender,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n}) => {\n  const { openChat } = getActions();\n\n  const { forwardInfo } = message;\n\n  const messageSender = canShowSender ? sender : undefined;\n\n  const shouldPreferOriginSender = forwardInfo\n  && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        className={styles.senderAvatar}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  const className = buildClassName(\n    'sender-group-container',\n    styles.root,\n  );\n\n  return (\n    <div id={id} className={className}>\n      {withAvatar && (\n        <div className={styles.avatarContainer}>\n          {renderAvatar()}\n        </div>\n      )}\n      {children}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      message, withAvatar,\n    } = ownProps;\n    const { chatId } = message;\n\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isSystemBotChat = isSystemBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n\n    return {\n      sender,\n      canShowSender,\n      originSender,\n      isChatWithSelf,\n      isRepliesChat: isSystemBotChat,\n      isAnonymousForwards,\n    };\n  },\n)(SenderGroupContainer));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Tk8btfOT\",\"avatarContainer\":\"UPrRM3Ks\",\"senderAvatar\":\"jdvqXfYh\"};","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getIsDownloading,\n  getMessageContent,\n  getMessageDownloadableMedia,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads, selectCanAutoLoadMedia, selectCanAutoPlayMedia,\n  selectSponsoredMessage,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { type ObserveFn, useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport Photo from './Photo';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\nimport Video from './Video';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  theme: ISettings['theme'];\n  isDownloading?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  theme,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openUrl,\n    hideSponsoredMessages,\n    clickSponsoredMessage,\n    openMediaViewer,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n\n  const { isMobile } = useAppLayout();\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ peerId: chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsoredMessages();\n  });\n\n  const {\n    photo, video,\n  } = message ? getMessageContent(message) : { photo: undefined, video: undefined };\n\n  const isGif = video?.isGif;\n  const hasMedia = Boolean(photo || video);\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsoredMessage({ isMedia: photo || isGif ? true : undefined, peerId: chatId });\n    openUrl({ url: message.url, shouldSkipModal: true });\n  });\n\n  const handleOpenMedia = useLastCallback(() => {\n    clickSponsoredMessage({ isMedia: true, peerId: chatId });\n    openMediaViewer({\n      origin: MediaViewerOrigin.SponsoredMessage,\n      chatId,\n      isSponsoredMessage: true,\n    });\n  });\n\n  const handleOpenAboutAdsModal = useLastCallback(() => {\n    openAboutAdsModal({ chatId });\n  });\n\n  const extraPadding = 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    const noMediaCorners = false;\n    let style = '';\n\n    if (photo || video) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isMobile,\n        }).width;\n      } else if (video) {\n        width = calculateMediaDimensions({\n          media: video,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(), width);\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style,\n    };\n  }, [photo, video, isMobile]);\n\n  const {\n    contentWidth, style,\n  } = sizeCalculations;\n\n  if (!message || !message.content) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        {Boolean(message.content?.text) && (\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.content.text.text,\n                entities: message.content.text.entities,\n              })}\n            </span>\n          </div>\n        )}\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  function renderMediaContent() {\n    if (!message) return undefined;\n\n    if (photo) {\n      return (\n        <Photo\n          photo={photo}\n          theme={theme}\n          canAutoLoad={canAutoLoadMedia}\n          isDownloading={isDownloading}\n          observeIntersection={observeIntersectionForLoading}\n          noAvatars\n          onClick={handleClick}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n    if (video) {\n      return (\n        <Video\n          video={video}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n          noAvatars\n          canAutoLoad={canAutoLoadMedia}\n          canAutoPlay={canAutoPlayMedia}\n          isDownloading={isDownloading}\n          onClick={isGif ? handleClick : handleOpenMedia}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open sponsored-media-preview\"\n    >\n      <div\n        className=\"message-content media has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        style={style}\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {renderMediaContent()}\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className={buildClassName('message-title message-type', hasMedia && 'has-media')}>\n            {message!.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <BadgeButton onClick={handleOpenAboutAdsModal} className=\"ad-about\">\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" className=\"sponsored-action-icon\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" className=\"sponsored-action-icon\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          message={message!}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = message ? getMessageDownloadableMedia(message) : undefined;\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    return {\n      message,\n      theme: selectTheme(global),\n      isDownloading,\n      canAutoLoadMedia: message ? selectCanAutoLoadMedia(global, message) : undefined,\n      canAutoPlayMedia: message ? selectCanAutoPlayMedia(global, message) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { getIsHeavyAnimating, memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId,\n  getMessageOriginalId,\n  isActionMessage,\n  isOwnMessage,\n  isServiceNotificationMessage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dates/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './ActionMessage';\nimport Message from './message/Message';\nimport SenderGroupContainer from './message/SenderGroupContainer';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  canShowAds?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  canShowAds,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onIntersectPinnedMessage,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsHeavyAnimating2 = getIsHeavyAnimating;\n  const getIsReady = useDerivedSignal(() => isReady && !getIsHeavyAnimating2(), [isReady, getIsHeavyAnimating2]);\n\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onIntersectPinnedMessage, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useOldLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePreviousDeprecated(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  function calculateSenderGroups(\n    dateGroup: MessageDateGroup, dateGroupIndex: number, dateGroupsArray: MessageDateGroup[],\n  ) {\n    return dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID && !isSavedDialog)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      const senderGroupElements = senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang(isEmptyThread\n                ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n\n      if (!withUsers) return senderGroupElements;\n\n      const lastMessageOrAlbum = senderGroup[senderGroup.length - 1];\n      const lastMessage = isAlbum(lastMessageOrAlbum) ? lastMessageOrAlbum.mainMessage : lastMessageOrAlbum;\n      const lastMessageId = getMessageOriginalId(lastMessage);\n\n      const isTopicTopMessage = lastMessage.id === threadId;\n      const isOwn = isOwnMessage(lastMessage);\n\n      const firstMessageOrAlbum = senderGroup[0];\n      const firstMessage = isAlbum(firstMessageOrAlbum) ? firstMessageOrAlbum.mainMessage : firstMessageOrAlbum;\n      const firstMessageId = getMessageOriginalId(firstMessage);\n\n      const key = `${firstMessageId}-${lastMessageId}`;\n      const id = (firstMessageId === lastMessageId) ? `message-group-${firstMessageId}`\n        : `message-group-${firstMessageId}-${lastMessageId}`;\n\n      const withAvatar = withUsers && !isOwn && (!isTopicTopMessage || !isComments);\n      return (\n        <SenderGroupContainer\n          key={key}\n          id={id}\n          message={lastMessage}\n          withAvatar={withAvatar}\n        >\n          {senderGroupElements}\n        </SenderGroupContainer>\n      );\n    });\n  }\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = calculateSenderGroups(dateGroup, dateGroupIndex, dateGroupsArray);\n\n    return (\n      <div\n        className={buildClassName('message-date-group', dateGroupIndex === 0 && 'first-message-date-group')}\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n      {canShowAds && isViewportNewest && (\n        <SponsoredMessage\n          key={chatId}\n          chatId={chatId}\n          containerRef={containerRef}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { debounce } from '../../../util/schedulers';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    const fabTrigger = fabTriggerRef.current;\n    if (!container || !fabTrigger) return;\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const fabOffsetTop = fabTrigger.offsetTop;\n    const scrollBottom = Math.round(fabOffsetTop - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\nimport type { MessageListType } from '../../types';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: OldLangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: OldLangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <Icon name=\"cloud-download\" className=\"no-messages-icon\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTheme, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\n\nimport styles from './PremiumRequiredMessage.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  userName?: string;\n};\n\nfunction PremiumRequiredMessage({ patternColor, userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {renderText(lang('MessageLockedPremium', userName), ['simple_markdown'])}\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"tiny\"\n          onClick={handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {lang('MessagePremiumUnlock')}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = global.settings.themes[theme] || {};\n    const user = selectUser(global, userId);\n\n    return {\n      patternColor,\n      userName: getUserFirstOrLastName(user),\n    };\n  })(PremiumRequiredMessage),\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFp81o13\",\"button\":\"KJVF1etk\",\"disabled\":\"Mii8vuoC\",\"inner\":\"xzZFmIqC\",\"icons-container\":\"vyeCoKP3\",\"iconsContainer\":\"vyeCoKP3\",\"animated-unlock\":\"YVmR5pRi\",\"animatedUnlock\":\"YVmR5pRi\",\"comments-icon\":\"ouB5dgHN\",\"commentsIcon\":\"ouB5dgHN\",\"description\":\"oEQISdJD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  beginHeavyAnimation, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatFullInfo, ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type MessageListType, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isSystemBot,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectTopic,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/keys/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport getOffsetToContainer from '../../util/visibility/getOffsetToContainer';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListBotInfo from './MessageListBotInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport PremiumRequiredMessage from './PremiumRequiredMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  isContactRequirePremium?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isSystemBotChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isChannelWithAvatars?: boolean;\n  isBot?: boolean;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  areAdsEnabled?: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  isChannelWithAvatars,\n  canPost,\n  isSynced,\n  isReady,\n  isChatWithSelf,\n  isSystemBotChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  isContactRequirePremium,\n  areAdsEnabled,\n  channelJoinInfo,\n  onIntersectPinnedMessage,\n  onScrollDownToggle,\n  onNotchToggle,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    const canHaveAds = isChannelChat || isBot;\n    if (areAdsEnabled && canHaveAds && isSynced && isReady) {\n      loadSponsoredMessages({ peerId: chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, isBot, areAdsEnabled]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages: ApiMessage[] = [];\n    messageIds.forEach((id, index, arr) => {\n      const prevMessage = listedMessages[listedMessages.length - 1];\n\n      const message = messagesById[id];\n      if (!message) {\n        return;\n      }\n\n      const { shouldAppendJoinMessage, shouldAppendJoinMessageAfterCurrent } = (() => {\n        if (!channelJoinInfo || type !== 'thread') return undefined;\n        if (prevMessage\n          && prevMessage.date < channelJoinInfo.joinedDate && channelJoinInfo.joinedDate <= message.date) {\n          return { shouldAppendJoinMessage: true, shouldAppendJoinMessageAfterCurrent: false };\n        }\n\n        if (index === arr.length - 1 && message.date < channelJoinInfo.joinedDate) {\n          return {\n            shouldAppendJoinMessage: true,\n            shouldAppendJoinMessageAfterCurrent: true,\n          };\n        }\n\n        return undefined;\n      })() || {};\n\n      if (shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n\n      if (shouldAppendJoinMessage) {\n        const lastMessageId = shouldAppendJoinMessageAfterCurrent ? message.id : (prevMessage?.id || (message.id - 1));\n        listedMessages.push({\n          id: generateChannelJoinMessageId(lastMessageId),\n          chatId: message.chatId,\n          date: channelJoinInfo!.joinedDate,\n          isOutgoing: false,\n          content: {\n            action: {\n              type: 'joinedChannel',\n              mediaType: 'action',\n              text: '',\n              translationValues: [],\n              targetChatId: message.chatId,\n            },\n          },\n        } satisfies ApiMessage);\n      }\n\n      if (!shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n    });\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n      )\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat, isForum, threadId, isChatWithSelf, channelJoinInfo]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData!;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n\n      const isFocusing = Boolean(selectTabState(global).focusedMessage?.chatId);\n      if (!isFocusing) {\n        onIntersectPinnedMessage({ shouldCancelWaiting: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n          animateScroll({\n            container,\n            element: shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            position: shouldScrollToBottom ? 'end' : 'start',\n            margin: BOTTOM_FOCUS_MARGIN,\n            forceDuration: noMessageSendingAnimation ? 0 : undefined,\n          });\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          getOffsetToContainer(unreadDivider, container).top - UNREAD_DIVIDER_TOP,\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      beginHeavyAnimation(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = isUserId(chatId);\n  const withUsers = Boolean((!isPrivate && !isChannelChat)\n    || isChatWithSelf || isSystemBotChat || isAnonymousForwards || isChannelWithAvatars);\n  const noAvatars = Boolean(!withUsers || (isChannelChat && !isChannelWithAvatars));\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isContactRequirePremium && !hasMessages ? (\n        <PremiumRequiredMessage userId={chatId} />\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting key={chatId} userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          canShowAds={areAdsEnabled && isChannelChat}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          isSavedDialog={isSavedDialog}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onScrollDownToggle={onScrollDownToggle}\n          onNotchToggle={onNotchToggle}\n          onIntersectPinnedMessage={onIntersectPinnedMessage}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const { isRestricted, restrictionReason } = chat;\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = selectTopic(global, chatId, threadId);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n\n    return {\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isChannelWithAvatars: chat.areProfilesShown,\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isSystemBotChat: isSystemBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n\nfunction generateChannelJoinMessageId(lastMessageId: number) {\n  return lastMessageId + 10e-7; // Smaller than smallest possible id with `getNextLocalMessageId`\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\nimport useLastCallback from './useLastCallback';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  const handleCopy = useLastCallback((e: KeyboardEvent) => {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+C': handleCopy,\n  }), []));\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container);\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  const computedStyle = getComputedStyle(container);\n  const headerActionsHeight = parseInt(computedStyle.getPropertyValue('--middle-header-panes-height'), 10);\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= headerActionsHeight + STICKY_TOP;\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n  MediaContent,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent, getPeerTitle,\n} from '../global/helpers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message?: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = message ? getMessageContent(message) : {} satisfies MediaContent;\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getPeerTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n  MediaContent,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getPeerTitle, isMessageLocal,\n} from '../../../global/helpers';\nimport {\n  selectChat, selectChatMessage, selectSender, selectTabState,\n} from '../../../global/selectors';\nimport { makeTrackId } from '../../../util/audioPlayer';\nimport buildClassName from '../../../util/buildClassName';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { clearMediaSession } from '../../../util/mediaSession';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport renderText from '../../common/helpers/renderText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useAudioPlayer from '../../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport RippleEffect from '../../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  className?: string;\n  noUi?: boolean;\n  isFullWidth?: boolean;\n  isHidden?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n  isFullWidth,\n  onPaneStateChange,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n  const renderingMessage = useCurrentOrPrev(message);\n\n  const { audio, voice, video } = renderingMessage ? getMessageContent(renderingMessage) : {} satisfies MediaContent;\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getPeerTitle(lang, sender) : undefined;\n\n  const mediaHash = renderingMessage && getMessageMediaHash(renderingMessage, 'inline');\n  const mediaData = mediaHash && mediaLoader.getFromMemory(mediaHash);\n  const mediaMetadata = useMessageMediaMetadata(renderingMessage, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    message && makeTrackId(message),\n    message ? getMediaDuration(message)! : 0,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    message && isMessageLocal(message),\n    true,\n  );\n\n  const isOpen = Boolean(message);\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(transitionRef, !shouldRender);\n\n  const handleClick = useLastCallback(() => {\n    const { chatId, id } = renderingMessage!;\n    focusMessage({ chatId, messageId: id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi || !shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={buildClassName('AudioPlayer', isFullWidth ? 'full-width-player' : 'mini-player', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      ref={ref}\n    >\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <Icon name=\"skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <Icon name=\"play\" />\n        <Icon name=\"pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <Icon name=\"skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <Icon name=\"placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { isHidden }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const { chatId, messageId } = audioPlayer;\n    const message = !isHidden && chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    const sender = message && selectSender(global, message);\n    const chat = message && selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      message,\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tE8PJzpv\",\"mini\":\"lrBhOgvf\",\"fullWidth\":\"gutn4asD\",\"pinnedMessage\":\"ayLUtX1S\",\"messageText\":\"ETMw73qH\",\"loading\":\"yvd9_9PF\",\"pinListIcon\":\"LFRysfVa\",\"pinListIconHidden\":\"E_C4DXKN\",\"no-hover\":\"WVjde2rq\",\"noHover\":\"WVjde2rq\",\"messageTextTransition\":\"mA1i07pG\",\"withMedia\":\"BWZytkCB\",\"title\":\"IWpRWVBg\",\"summary\":\"k19QLKaH\",\"inlineButton\":\"fpQMpARI\",\"pictogramTransition\":\"Gp431jU4\",\"pinnedThumb\":\"XjjZeOUy\",\"pinnedThumbImage\":\"ljzqevcj\"};","import React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  getIsSavedDialog,\n  getMessageIsSpoiler,\n  getMessageMediaHash,\n  getMessageSingleInlineButton,\n  getMessageVideo,\n  getPeerTitle,\n} from '../../../global/helpers';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectPinnedIds,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { getPictogramDimensions, REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useThumbnail from '../../../hooks/useThumbnail';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\nimport MessageSummary from '../../common/MessageSummary';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RippleEffect from '../../ui/RippleEffect';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\nimport PinnedMessageNavigation from '../PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst MAX_LENGTH = 256;\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  // eslint-disable-next-line react/no-unused-prop-types\n  messageListType: MessageListType;\n  className?: string;\n  isFullWidth?: boolean;\n  shouldHide?: boolean;\n  getLoadingPinnedId: Signal<number | undefined>;\n  getCurrentPinnedIndex: Signal<number>;\n  onFocusPinnedMessage: (messageId: number) => void;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiPeer;\n  isSynced?: boolean;\n};\n\nconst HeaderPinnedMessage = ({\n  chatId,\n  threadId,\n  canUnpin,\n  getLoadingPinnedId,\n  pinnedMessageIds,\n  messagesById,\n  isFullWidth,\n  topMessageSender,\n  getCurrentPinnedIndex,\n  className,\n  chat,\n  isSynced,\n  shouldHide,\n  onPaneStateChange,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const {\n    clickBotInlineButton, focusMessage, openThread, pinMessage, loadPinnedMessages,\n  } = getActions();\n  const lang = useLang();\n\n  const currentPinnedIndex = useDerivedState(getCurrentPinnedIndex);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const pinnedMessageNumber = Math.max(pinnedMessagesCount - currentPinnedIndex, 1);\n\n  const topMessageTitle = topMessageSender ? getPeerTitle(lang, topMessageSender) : undefined;\n\n  const video = pinnedMessage && getMessageVideo(pinnedMessage);\n  const gif = video?.isGif ? video : undefined;\n  const isVideoThumbnail = Boolean(gif && !gif.previewPhotoSizes?.length);\n\n  const mediaThumbnail = useThumbnail(pinnedMessage);\n  const mediaHash = pinnedMessage && getMessageMediaHash(pinnedMessage, isVideoThumbnail ? 'full' : 'pictogram');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isSpoiler = pinnedMessage && getMessageIsSpoiler(pinnedMessage);\n\n  const isLoading = Boolean(useDerivedState(getLoadingPinnedId));\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n\n  useEffect(() => {\n    if (isSynced && (threadId === MAIN_THREAD_ID || chat?.isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, chat?.isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const isOpen = Boolean(pinnedMessage) && !shouldHide;\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    noOpenTransition: true,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n    pinMessage({ chatId, messageId: pinnedMessage!.id, isUnpin: true });\n  });\n\n  const inlineButton = pinnedMessage && getMessageSingleInlineButton(pinnedMessage);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ chatId: pinnedMessage.chatId, messageId: pinnedMessage.id, button: inlineButton });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const handleMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const nextMessageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (!getLoadingPinnedId()) {\n      focusMessage({\n        chatId, threadId, messageId: nextMessageId, noForumTopicPanel: true,\n      });\n      onFocusPinnedMessage(nextMessageId);\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(handleMessageClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, isFullVideo?: boolean, asSpoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n    const shouldRenderVideo = isFullVideo && blobUrl;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !asSpoiler && !shouldRenderVideo && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {shouldRenderVideo && !asSpoiler && (\n          <video\n            src={blobUrl}\n            width={width}\n            height={height}\n            playsInline\n            disablePictureInPicture\n            className={styles.pinnedThumbImage}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(asSpoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  if (!shouldRender || !renderingPinnedMessage) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'HeaderPinnedMessageWrapper', styles.root, isFullWidth ? styles.fullWidth : styles.mini, className,\n      )}\n    >\n      {(pinnedMessagesCount > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? handleAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <Icon\n            name=\"pin-list\"\n            className={buildClassName(\n              styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {canUnpin && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text={lang('PinnedConfirmUnpin')}\n        confirmLabel={lang('DialogUnpin')}\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={pinnedMessagesCount}\n          index={currentPinnedIndex}\n        />\n        <Transition activeKey={renderingPinnedMessage.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isVideoThumbnail,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!topMessageTitle && (\n              <AnimatedCounter\n                text={pinnedMessagesCount === 1\n                  ? lang('PinnedMessageTitleSingle')\n                  : lang('PinnedMessageTitle', { index: pinnedMessageNumber }, { pluralValue: pinnedMessagesCount })}\n              />\n            )}\n\n            {topMessageTitle && renderText(topMessageTitle)}\n          </div>\n          <Transition\n            activeKey={renderingPinnedMessage.id}\n            name=\"slideVerticalFade\"\n            className={styles.messageTextTransition}\n          >\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                message={renderingPinnedMessage}\n                truncateLength={MAX_LENGTH}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const isSynced = global.isSynced;\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const messagesById = selectChatMessages(global, chatId);\n\n    const state = {\n      chat,\n      isSynced,\n    };\n\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActionsSlow(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(HeaderPinnedMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { type MessageListType, StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n} from '../../config';\nimport {\n  getIsSavedDialog,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport HeaderActions from './HeaderActions';\nimport AudioPlayer from './panes/AudioPlayer';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\nconst SEARCH_LONGTAP_THRESHOLD = 500;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSavedDialog?: boolean;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n  emojiStatusSlug?: string;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  emojiStatusSlug,\n  isSavedDialog,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    openChat,\n    openPreviousChat,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openStickerSet,\n    updateMiddleSearch,\n    openUniqueGiftBySlug,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const { isDesktop } = useAppLayout();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n\n  const handleOpenSearch = useLastCallback(() => {\n    updateMiddleSearch({ chatId, threadId, update: {} });\n  });\n\n  const handleOpenChat = useLastCallback((event: React.MouseEvent | React.TouchEvent) => {\n    if ((event.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleOpenSearch,\n    onClick: handleOpenChat,\n    threshold: SEARCH_LONGTAP_THRESHOLD,\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const isAudioPlayerActive = Boolean(audioMessage);\n  const isAudioPlayerRendering = isDesktop && isAudioPlayerActive;\n  const isPinnedMessagesFullWidth = isAudioPlayerActive || !isDesktop;\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onMouseDown={handleLongPressMouseDown}\n          onMouseUp={handleLongPressMouseUp}\n          onMouseLeave={handleLongPressMouseLeave}\n          onTouchStart={handleLongPressTouchStart}\n          onTouchEnd={handleLongPressTouchEnd}\n        >\n          {isUserId(realChatId) ? (\n            <PrivateChatInfo\n              key={realChatId}\n              userId={realChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={realChatId}\n              chatId={realChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n      {!isPinnedMessagesFullWidth && (\n        <HeaderPinnedMessage\n          key={chatId}\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          onFocusPinnedMessage={onFocusPinnedMessage}\n          getLoadingPinnedId={getLoadingPinnedId}\n          getCurrentPinnedIndex={getCurrentPinnedIndex}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendering && (\n          <AudioPlayer />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendering}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = chat?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n    const emojiStatusSlug = emojiStatus?.type === 'collectible' ? emojiStatus.slug : undefined;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    return {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      emojiStatusSlug,\n      isSavedDialog,\n    };\n  },\n)(MiddleHeader));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"yMkfzjus\",\"content\":\"__w9Ejd3\",\"info\":\"wdU19Be7\",\"avatar\":\"AQFE1t4V\",\"title\":\"u2vIptvT\",\"text\":\"SVG6BaX3\",\"aboutAd\":\"SrgXYpPk\"};","import React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { MessageListType } from '../../../types';\n\nimport { selectBot, selectSponsoredMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getApiPeerColorClass } from '../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport SponsoredMessageContextMenuContainer from '../message/SponsoredMessageContextMenuContainer';\n\nimport styles from './BotAdPane.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  messageListType: MessageListType;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  isBot?: boolean;\n  sponsoredMessage?: ApiSponsoredMessage;\n};\n\nconst BotAdPane = ({\n  chatId,\n  isBot,\n  messageListType,\n  sponsoredMessage,\n  onPaneStateChange,\n}: OwnProps & StateProps) => {\n  const {\n    viewSponsoredMessage,\n    openUrl,\n    clickSponsoredMessage,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(isBot && sponsoredMessage && messageListType === 'thread');\n\n  const renderingSponsoredMessage = useCurrentOrPrev(sponsoredMessage);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    withResizeObserver: true,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !shouldRender, true);\n\n  const handleClick = useLastCallback(() => {\n    if (!renderingSponsoredMessage) return;\n\n    clickSponsoredMessage({ peerId: chatId });\n    openUrl({ url: renderingSponsoredMessage.url, shouldSkipModal: true });\n  });\n\n  const handleAboutClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    openAboutAdsModal({ chatId });\n  });\n\n  useEffect(() => {\n    if (shouldRender && sponsoredMessage) {\n      viewSponsoredMessage({ peerId: chatId });\n    }\n  }, [shouldRender, sponsoredMessage, chatId]);\n\n  if (!shouldRender || !renderingSponsoredMessage) {\n    return undefined;\n  }\n\n  const {\n    peerColor,\n    content,\n    photo,\n    title,\n  } = renderingSponsoredMessage;\n\n  return (\n    <>\n      <div\n        ref={ref}\n        className={styles.root}\n        onClick={handleClick}\n        onMouseDown={handleBeforeContextMenu}\n        onContextMenu={handleContextMenu}\n      >\n        <div className={buildClassName(styles.content, peerColor && getApiPeerColorClass(peerColor))}>\n          <span className={styles.info}>\n            {lang('SponsoredMessageAd')}\n            <BadgeButton onClick={handleAboutClick} className={styles.aboutAd}>\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          <div className={styles.title}>{title}</div>\n          {content.text && (\n            <div className={styles.text}>\n              {renderTextWithEntities({\n                text: content.text.text,\n                entities: content.text.entities,\n              })}\n            </div>\n          )}\n        </div>\n        {photo && (\n          <Avatar\n            size=\"large\"\n            photo={photo}\n            className={styles.avatar}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          message={renderingSponsoredMessage}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const bot = selectBot(global, chatId);\n    const sponsoredMessage = selectSponsoredMessage(global, chatId);\n    return {\n      isBot: Boolean(bot),\n      sponsoredMessage,\n    };\n  },\n)(BotAdPane));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotVerification } from '../../../api/types';\n\nimport {\n  selectPeerFullInfo,\n} from '../../../global/selectors';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './BotVerificationPane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  wasShown: boolean;\n  botVerification?: ApiBotVerification;\n};\nconst BOT_VERIFICATION_ICON_SIZE = 16;\nconst DISPLAY_DURATION_MS = 5000; // 5 sec\n\nconst BotVerificationPane: FC<OwnProps & StateProps> = ({\n  peerId,\n  wasShown,\n  botVerification,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(!wasShown && botVerification);\n\n  const {\n    markBotVerificationInfoShown,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const markAsShowed = useLastCallback(() => {\n    markBotVerificationInfoShown({ peerId });\n  });\n  useTimeout(markAsShowed, !wasShown ? DISPLAY_DURATION_MS : undefined);\n\n  if (!shouldRender || !botVerification) return undefined;\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <span className={styles.icon}>\n        <CustomEmoji\n          documentId={botVerification.iconId}\n          size={BOT_VERIFICATION_ICON_SIZE}\n        />\n      </span>\n      {botVerification.description}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const peerFullInfo = selectPeerFullInfo(global, peerId);\n\n    const botVerification = peerFullInfo?.botVerification;\n    const wasShown = global.settings.botVerificationShownPeerIds.includes(peerId);\n\n    return {\n      botVerification,\n      wasShown,\n    };\n  },\n)(BotVerificationPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sAWttcxl\",\"icon\":\"tK9d2y8u\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './ChatReportPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  isAutoArchived?: boolean;\n  canReportSpam?: boolean;\n  canAddContact?: boolean;\n  canBlockContact?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  peer?: ApiPeer;\n};\n\nconst ChatReportPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  className,\n  isAutoArchived,\n  canReportSpam,\n  canAddContact,\n  canBlockContact,\n  peer,\n  currentUserId,\n  onPaneStateChange,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPane,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n\n  const renderingPeer = useCurrentOrPrev(peer);\n  const chat = renderingPeer && isApiPeerChat(renderingPeer) ? renderingPeer : undefined;\n  const user = renderingPeer && isApiPeerUser(renderingPeer) ? renderingPeer : undefined;\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const renderingCanAddContact = useCurrentOrPrev(canAddContact);\n  const renderingCanBlockContact = useCurrentOrPrev(canBlockContact);\n  const renderingCanReportSpam = useCurrentOrPrev(canReportSpam);\n  const renderingIsAutoArchived = useCurrentOrPrev(isAutoArchived);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (renderingIsAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (renderingCanReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPane = useLastCallback(() => {\n    hideChatReportPane({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  const hasAnyButton = canAddContact || canBlockContact || canReportSpam;\n\n  const isRendering = Boolean(hasAnyButton && peer);\n\n  useEffect(() => {\n    if (!isRendering) {\n      closeBlockUserModal();\n    }\n  }, [isRendering]);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen: isRendering,\n    onStateChange: onPaneStateChange,\n  });\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('ChatReportPane', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {renderingCanAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {renderingCanReportSpam && !renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={handleCloseReportPane}\n        ariaLabel={lang('Close')}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            className=\"ChatReportPane--Checkbox dialog-checkbox\"\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    peer: selectPeer(global, chatId),\n  }),\n)(ChatReportPane));\n","import React, {\n  memo, useRef, useSignal,\n} from '../../lib/teact/teact';\nimport { setExtraStyles } from '../../lib/teact/teact-dom';\nimport { withGlobal } from '../../global';\n\nimport type { MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport { type ApiChat, MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  selectChat, selectChatMessage, selectCurrentMiddleSearch, selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useEffectOnce from '../../hooks/useEffectOnce';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport { applyAnimationState, type PaneState } from './hooks/useHeaderPane';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport AudioPlayer from './panes/AudioPlayer';\nimport BotAdPane from './panes/BotAdPane';\nimport BotVerificationPane from './panes/BotVerificationPane';\nimport ChatReportPane from './panes/ChatReportPane';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\n\nimport styles from './MiddleHeaderPanes.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isAudioPlayerRendered?: boolean;\n  isMiddleSearchOpen?: boolean;\n};\n\nconst FALLBACK_PANE_STATE = { height: 0 };\n\nconst MiddleHeaderPanes = ({\n  className,\n  chatId,\n  threadId,\n  messageListType,\n  chat,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  isAudioPlayerRendered,\n  isMiddleSearchOpen,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const { settings } = chat || {};\n\n  const { isDesktop } = useAppLayout();\n  const [getAudioPlayerState, setAudioPlayerState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPinnedState, setPinnedState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getGroupCallState, setGroupCallState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getChatReportState, setChatReportState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotAdState, setBotAdState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotVerificationState, setBotVerificationState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered || !isDesktop;\n\n  const isFirstRenderRef = useRef(true);\n  const {\n    shouldRender,\n    ref,\n  } = useShowTransition({\n    isOpen: !isMiddleSearchOpen,\n    withShouldRender: true,\n    noMountTransition: true,\n  });\n\n  useEffectOnce(() => {\n    isFirstRenderRef.current = false;\n  });\n\n  useSignalEffect(() => {\n    const audioPlayerState = getAudioPlayerState();\n    const botVerificationState = getBotVerificationState();\n    const pinnedState = getPinnedState();\n    const groupCallState = getGroupCallState();\n    const chatReportState = getChatReportState();\n    const botAdState = getBotAdState();\n\n    // Keep in sync with the order of the panes in the DOM\n    const stateArray = [audioPlayerState, groupCallState,\n      chatReportState, botVerificationState, pinnedState, botAdState];\n\n    const isFirstRender = isFirstRenderRef.current;\n    const totalHeight = stateArray.reduce((acc, state) => acc + state.height, 0);\n\n    const middleColumn = document.getElementById('MiddleColumn');\n    if (!middleColumn) return;\n\n    applyAnimationState(stateArray, isFirstRender);\n\n    setExtraStyles(middleColumn, {\n      '--middle-header-panes-height': `${totalHeight}px`,\n    });\n  }, [getAudioPlayerState, getGroupCallState, getPinnedState,\n    getChatReportState, getBotAdState, getBotVerificationState]);\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div ref={ref} className={buildClassName(styles.root, className)}>\n      <AudioPlayer\n        isFullWidth\n        onPaneStateChange={setAudioPlayerState}\n        isHidden={isDesktop}\n      />\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          chatId={chatId}\n          onPaneStateChange={setGroupCallState}\n        />\n      )}\n      <ChatReportPane\n        chatId={chatId}\n        canAddContact={settings?.canAddContact}\n        canBlockContact={settings?.canBlockContact}\n        canReportSpam={settings?.canReportSpam}\n        isAutoArchived={settings?.isAutoArchived}\n        onPaneStateChange={setChatReportState}\n      />\n      <BotVerificationPane\n        peerId={chatId}\n        onPaneStateChange={setBotVerificationState}\n      />\n      <HeaderPinnedMessage\n        chatId={chatId}\n        threadId={threadId}\n        messageListType={messageListType}\n        onFocusPinnedMessage={onFocusPinnedMessage}\n        getLoadingPinnedId={getLoadingPinnedId}\n        getCurrentPinnedIndex={getCurrentPinnedIndex}\n        onPaneStateChange={setPinnedState}\n        isFullWidth\n        shouldHide={!isPinnedMessagesFullWidth}\n      />\n      <BotAdPane\n        chatId={chatId}\n        messageListType={messageListType}\n        onPaneStateChange={setBotAdState}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId,\n  }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isMiddleSearchOpen = Boolean(selectCurrentMiddleSearch(global));\n\n    return {\n      chat,\n      isAudioPlayerRendered: Boolean(audioMessage),\n      isMiddleSearchOpen,\n    };\n  },\n)(MiddleHeaderPanes));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oCUr3DTX\"};","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MiddleSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MiddleSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MiddleSearch = useModuleLoader(Bundles.Extra, 'MiddleSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MiddleSearch ? <MiddleSearch {...props} /> : undefined;\n};\n\nexport default MiddleSearchAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo, ApiTopic,\n} from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n  ThemeKey,\n  ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_SAFARI, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\n\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MiddleHeaderPanes from './MiddleHeaderPanes';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\nimport MiddleSearch from './search/MiddleSearch.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasActiveMiddleSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n  topics?: Record<number, ApiTopic>;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);\n}\n\nfunction isVideo(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_VIDEO_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasActiveMiddleSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n  topics,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useOldLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownNeeded, setIsScrollDownShown] = useState(false);\n  const isScrollDownShown = isScrollDownNeeded && (!isMobile || !hasActiveMiddleSearch);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingHandleIntersectPinnedMessage = usePrevDuringAnimation(\n    chatId ? handleIntersectPinnedMessage : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    // In Safari, the e.dataTransfer.items list may be empty during dragenter/dragover events,\n    // preventing the ability to determine file types in advance. More details: https://bugs.webkit.org/show_bug.cgi?id=223517\n    const shouldDrawQuick = IS_SAFARI || (items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      .every((item) => isImage(item) || isVideo(item)));\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, topics, Boolean(draftReplyInfo));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    ?? forumComposerPlaceholder\n    ?? (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeaderPanes\n              key={renderingChatId}\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isMobile={isMobile}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              isBlockingAnimation\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onIntersectPinnedMessage={renderingHandleIntersectPinnedMessage!}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <Icon name=\"unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{lang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              withScrollDown={renderingIsScrollDownShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          <MiddleSearch isActive={Boolean(hasActiveMiddleSearch)} />\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, reactorModal, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasActiveMiddleSearch: Boolean(selectCurrentMiddleSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = selectTopic(global, chatId, threadId);\n    const canPost = chat && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (selectTopic(global, chatId, GENERAL_TOPIC_ID)?.isClosed)\n      : false;\n    const topics = selectTopics(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const isContactRequirePremium = selectUserFullInfo(global, chatId)?.isContactRequirePremium;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !isSavedDialog,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n      topics,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport VerificationMonetizationModal from '../common/VerificationMonetizationModal.async';\nimport WebAppsCloseConfirmationModal from '../main/WebAppsCloseConfirmationModal.async';\nimport AboutAdsModal from './aboutAds/AboutAdsModal.async';\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatInviteModal from './chatInvite/ChatInviteModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport EmojiStatusAccessModal from './emojiStatusAccess/EmojiStatusAccessModal.async';\nimport PremiumGiftModal from './gift/GiftModal.async';\nimport GiftInfoModal from './gift/info/GiftInfoModal.async';\nimport GiftRecipientPicker from './gift/recipient/GiftRecipientPicker.async';\nimport GiftStatusInfoModal from './gift/status/GiftStatusInfoModal.async';\nimport GiftTransferModal from './gift/transfer/GiftTransferModal.async';\nimport GiftUpgradeModal from './gift/upgrade/GiftUpgradeModal.async';\nimport GiftWithdrawModal from './gift/withdraw/GiftWithdrawModal.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport LocationAccessModal from './locationAccess/LocationAccessModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport PaidReactionModal from './paidReaction/PaidReactionModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport ReportModal from './reportModal/ReportModal.async';\nimport StarsGiftModal from './stars/gift/StarsGiftModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport StarsSubscriptionModal from './stars/subscription/StarsSubscriptionModal.async';\nimport StarsTransactionInfoModal from './stars/transaction/StarsTransactionModal.async';\nimport SuggestedStatusModal from './suggestedStatus/SuggestedStatusModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n'giftCodeModal' |\n'boostModal' |\n'chatlistModal' |\n'urlAuth' |\n'mapModal' |\n'oneTimeMediaModal' |\n'inviteViaLinkModal' |\n'requestedAttachBotInstall' |\n'collectibleInfoModal' |\n'reportAdModal' |\n'reportModal' |\n'starsBalanceModal' |\n'starsPayment' |\n'starsTransactionModal' |\n'paidReactionModal' |\n'webApps' |\n'starsTransactionModal' |\n'chatInviteModal' |\n'starsSubscriptionModal' |\n'starsGiftModal' |\n'giftModal' |\n'isGiftRecipientPickerOpen' |\n'isWebAppsCloseConfirmationModalOpen' |\n'giftInfoModal' |\n'suggestedStatusModal' |\n'emojiStatusAccessModal' |\n'locationAccessModal' |\n'aboutAdsModal' |\n'giftUpgradeModal' |\n'monetizationVerificationModal' |\n'giftWithdrawModal' |\n'giftStatusInfoModal' |\n'giftTransferModal'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  reportModal: ReportModal,\n  webApps: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  starsPayment: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n  starsTransactionModal: StarsTransactionInfoModal,\n  chatInviteModal: ChatInviteModal,\n  paidReactionModal: PaidReactionModal,\n  starsSubscriptionModal: StarsSubscriptionModal,\n  starsGiftModal: StarsGiftModal,\n  giftModal: PremiumGiftModal,\n  isGiftRecipientPickerOpen: GiftRecipientPicker,\n  isWebAppsCloseConfirmationModalOpen: WebAppsCloseConfirmationModal,\n  giftInfoModal: GiftInfoModal,\n  suggestedStatusModal: SuggestedStatusModal,\n  emojiStatusAccessModal: EmojiStatusAccessModal,\n  locationAccessModal: LocationAccessModal,\n  aboutAdsModal: AboutAdsModal,\n  giftUpgradeModal: GiftUpgradeModal,\n  monetizationVerificationModal: VerificationMonetizationModal,\n  giftWithdrawModal: GiftWithdrawModal,\n  giftStatusInfoModal: GiftStatusInfoModal,\n  giftTransferModal: GiftTransferModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => (\n    pick(selectTabState(global), MODAL_KEYS)\n  ),\n)(ModalContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportModal = useModuleLoader(Bundles.Extra, 'ReportModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportModal ? <ReportModal {...props} /> : undefined;\n};\n\nexport default ReportModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Stars, 'StarPaymentModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Stars, 'StarsBalanceModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsTransactionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsTransactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsTransactionModal = useModuleLoader(Bundles.Stars, 'StarsTransactionInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsTransactionModal ? <StarsTransactionModal {...props} /> : undefined;\n};\n\nexport default StarsTransactionModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatInviteModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatInviteModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatInviteModal = useModuleLoader(Bundles.Extra, 'ChatInviteModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatInviteModal ? <ChatInviteModal {...props} /> : undefined;\n};\n\nexport default ChatInviteModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PaidReactionModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PaidReactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PaidReactionModal = useModuleLoader(Bundles.Stars, 'PaidReactionModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaidReactionModal ? <PaidReactionModal {...props} /> : undefined;\n};\n\nexport default PaidReactionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsSubscriptionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsSubscriptionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsSubscriptionModal = useModuleLoader(Bundles.Stars, 'StarsSubscriptionModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsSubscriptionModal ? <StarsSubscriptionModal {...props} /> : undefined;\n};\n\nexport default StarsSubscriptionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsGiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsGiftModal = useModuleLoader(Bundles.Stars, 'StarsGiftModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftModal ? <StarsGiftModal {...props} /> : undefined;\n};\n\nexport default StarsGiftModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftModal = useModuleLoader(Bundles.Stars, 'GiftModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftModal ? <GiftModal {...props} /> : undefined;\n};\n\nexport default GiftModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftRecipientPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftRecipientPicker = useModuleLoader(Bundles.Stars, 'GiftRecipientPicker', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftRecipientPicker ? <GiftRecipientPicker {...props} /> : undefined;\n};\n\nexport default GiftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppsCloseConfirmationModalAsync: FC = (props) => {\n  const { modal } = props;\n  const WebAppsCloseConfirmationModal = useModuleLoader(Bundles.Extra, 'WebAppsCloseConfirmationModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppsCloseConfirmationModal ? <WebAppsCloseConfirmationModal isOpen={modal} /> : undefined;\n};\n\nexport default WebAppsCloseConfirmationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftInfoModal = useModuleLoader(Bundles.Stars, 'GiftInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftInfoModal ? <GiftInfoModal {...props} /> : undefined;\n};\n\nexport default GiftInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedStatusModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SuggestedStatusModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedStatusModal = useModuleLoader(Bundles.Extra, 'SuggestedStatusModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SuggestedStatusModal ? <SuggestedStatusModal {...props} /> : undefined;\n};\n\nexport default SuggestedStatusModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiStatusAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst EmojiStatusAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const EmojiStatusAccessModal = useModuleLoader(Bundles.Extra, 'EmojiStatusAccessModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiStatusAccessModal ? <EmojiStatusAccessModal {...props} /> : undefined;\n};\n\nexport default EmojiStatusAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LocationAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst LocationAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const LocationAccessModal = useModuleLoader(Bundles.Extra, 'LocationAccessModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LocationAccessModal ? <LocationAccessModal {...props} /> : undefined;\n};\n\nexport default LocationAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftUpgradeModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftUpgradeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftUpgradeModal = useModuleLoader(Bundles.Stars, 'GiftUpgradeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftUpgradeModal ? <GiftUpgradeModal {...props} /> : undefined;\n};\n\nexport default GiftUpgradeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './VerificationMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst VerificationMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const VerificationMonetizationModal = useModuleLoader(Bundles.Extra, 'VerificationMonetizationModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return VerificationMonetizationModal ? <VerificationMonetizationModal {...props} /> : undefined;\n};\n\nexport default VerificationMonetizationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftWithdrawModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftWithdrawModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftWithdrawModal = useModuleLoader(Bundles.Stars, 'GiftWithdrawModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftWithdrawModal ? <GiftWithdrawModal {...props} /> : undefined;\n};\n\nexport default GiftWithdrawModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftStatusInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftStatusInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftStatusInfoModal = useModuleLoader(Bundles.Stars, 'GiftStatusInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftStatusInfoModal ? <GiftStatusInfoModal {...props} /> : undefined;\n};\n\nexport default GiftStatusInfoModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftTransferModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftTransferModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftTransferModal = useModuleLoader(Bundles.Stars, 'GiftTransferModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftTransferModal ? <GiftTransferModal {...props} /> : undefined;\n};\n\nexport default GiftTransferModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport PeerPicker from '../common/pickers/PeerPicker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePreviousDeprecated(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredIds = filterPeersByQuery({\n      ids: unique([\n        ...(localContactIds || []),\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]),\n      query: searchQuery,\n      type: 'user',\n    });\n\n    return sortChatIds(\n      filteredIds.filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          withDefaultPadding\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <Icon name=\"arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n  allowAutoScrollToTabs = false,\n  handleStopAutoScrollToTabs: () => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType && allowAutoScrollToTabs) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      handleStopAutoScrollToTabs();\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll({\n          container,\n          element: tabsEl,\n          position: 'start',\n          forceDuration: TRANSITION_DURATION,\n        });\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef, forceScrollProfileTab,\n    allowAutoScrollToTabs, handleStopAutoScrollToTabs]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n\n    animateScroll({\n      container,\n      element: container.firstElementChild as HTMLElement,\n      position: 'start',\n      maxDistance: container.offsetHeight * 2,\n    });\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'gifts':\n      return ProfileState.GiftList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds({\n  loadMoreMembers,\n  loadCommonChats,\n  searchMessages,\n  loadStories,\n  loadStoriesArchive,\n  loadMoreGifts,\n  tabType,\n  mediaSearchType,\n  groupChatMembers,\n  commonChatIds,\n  usersById,\n  userStatusesById,\n  chatsById,\n  chatMessages,\n  foundIds,\n  threadId,\n  storyIds,\n  giftIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  similarChannels,\n  similarBots,\n} : {\n  loadMoreMembers: AnyToVoidFunction;\n  loadCommonChats: AnyToVoidFunction;\n  searchMessages: AnyToVoidFunction;\n  loadStories: AnyToVoidFunction;\n  loadStoriesArchive: AnyToVoidFunction;\n  loadMoreGifts: AnyToVoidFunction;\n  tabType: ProfileTabType;\n  mediaSearchType?: SharedMediaType;\n  groupChatMembers?: ApiChatMember[];\n  commonChatIds?: string[];\n  usersById?: Record<string, ApiUser>;\n  userStatusesById?: Record<string, ApiUserStatus>;\n  chatsById?: Record<string, ApiChat>;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  threadId?: ThreadId;\n  storyIds?: number[];\n  giftIds?: string[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  similarChannels?: string[];\n  similarBots?: string[];\n}) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'similarBots':\n      viewportIds = similarBots;\n      break;\n    case 'gifts':\n      viewportIds = giftIds;\n      getMore = loadMoreGifts;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HN4dYXIk\",\"avatar\":\"we2fpVuo\",\"hiddenGift\":\"xY4yqqYA\",\"radialPattern\":\"_I9aOdGr\"};","import React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer, ApiSavedStarGift } from '../../../api/types';\n\nimport { selectPeer } from '../../../global/selectors';\nimport { CUSTOM_PEER_HIDDEN } from '../../../util/objects/customPeer';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift, getTotalGiftAvailability } from '../helpers/gifts';\n\nimport useFlag from '../../../hooks/useFlag';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../AnimatedIconFromSticker';\nimport Avatar from '../Avatar';\nimport Icon from '../icons/Icon';\nimport RadialPatternBackground from '../profile/RadialPatternBackground';\nimport GiftRibbon from './GiftRibbon';\n\nimport styles from './SavedGift.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  gift: ApiSavedStarGift;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  fromPeer?: ApiPeer;\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nconst SavedGift = ({\n  peerId,\n  gift,\n  fromPeer,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { openGiftInfoModal } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [shouldPlay, play] = useFlag();\n\n  const oldLang = useOldLang();\n\n  const handleClick = useLastCallback(() => {\n    openGiftInfoModal({\n      peerId,\n      gift,\n    });\n  });\n\n  const handleOnIntersect = useLastCallback((entry: IntersectionObserverEntry) => {\n    if (entry.isIntersecting) play();\n  });\n\n  const avatarPeer = (gift.isNameHidden || !fromPeer) ? CUSTOM_PEER_HIDDEN : fromPeer;\n\n  const sticker = getStickerFromGift(gift.gift);\n\n  const radialPatternBackdrop = useMemo(() => {\n    const { backdrop, pattern } = getGiftAttributes(gift.gift) || {};\n\n    if (!backdrop || !pattern) {\n      return undefined;\n    }\n\n    const backdropColors = [backdrop.centerColor, backdrop.edgeColor];\n    const patternColor = backdrop.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={pattern.sticker}\n      />\n    );\n  }, [gift.gift]);\n\n  useOnIntersect(ref, observeIntersection, sticker ? handleOnIntersect : undefined);\n\n  if (!sticker) return undefined;\n\n  const totalIssued = getTotalGiftAvailability(gift.gift);\n\n  return (\n    <div ref={ref} className={styles.root} onClick={handleClick}>\n      {radialPatternBackdrop}\n      {!radialPatternBackdrop && <Avatar className={styles.avatar} peer={avatarPeer} size=\"micro\" />}\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        noLoop\n        play={shouldPlay}\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n      {gift.isUnsaved && (\n        <div className={styles.hiddenGift}>\n          <Icon name=\"eye-closed-outline\" />\n        </div>\n      )}\n      {totalIssued && (\n        <GiftRibbon\n          color=\"blue\"\n          text={oldLang('Gift2Limited1OfRibbon', formatIntegerCompact(totalIssued))}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { gift }): StateProps => {\n    const fromPeer = gift.fromId ? selectPeer(global, gift.fromId) : undefined;\n\n    return {\n      fromPeer,\n    };\n  },\n)(SavedGift));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiBotPreviewMedia } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getMessageMediaHash, getMessageMediaThumbDataUri,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  media: ApiBotPreviewMedia;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick: (index: number) => void;\n  index: number;\n};\n\nconst PreviewMedia: FC<OwnProps> = ({\n  media,\n  idPrefix = 'preview-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n  index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = getMessageMediaThumbDataUri(media);\n\n  const mediaBlobUrl = useMedia(getMessageMediaHash(media, 'preview'), !isIntersecting);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl);\n\n  const video = media.content.video;\n\n  const handleClick = useLastCallback(() => {\n    onClick(index);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${index}`}\n      className=\"Media scroll-item\"\n      onClick={handleClick}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(PreviewMedia);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"overlayIcon\":\"NOCaj4mx\",\"pinnedIcon\":\"GTWFQyJx\",\"viewsCount\":\"g09Rb4Ps\",\"duration\":\"lM_2MMyQ\",\"contextMenu\":\"UAfI9izT\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { selectChat, selectPinnedStories } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isArchive?: boolean;\n}\n\ninterface StateProps {\n  isProtected?: boolean;\n  isPinned?: boolean;\n  canPin?: boolean;\n}\n\nfunction MediaStory({\n  story, isProtected, isArchive, isPinned, canPin,\n}: OwnProps & StateProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryInProfile,\n    toggleStoryPinnedToTop,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const duration = video && formatMediaDuration(video.duration);\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handleUnarchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleArchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleTogglePinned = useLastCallback(() => {\n    toggleStoryPinnedToTop({ peerId, storyId: story.id });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <Icon className={styles.expiredIcon} name=\"story-expired\" />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      {isPinned && <Icon className={buildClassName(styles.overlayIcon, styles.pinnedIcon)} name=\"pin-badge\" />}\n      {isFullyLoaded && Boolean(story.views?.viewsCount) && (\n        <span className={buildClassName(styles.overlayIcon, styles.viewsCount)}>\n          <Icon name=\"eye\" />\n          {story.views.viewsCount}\n        </span>\n      )}\n      {duration && <span className={buildClassName(styles.overlayIcon, styles.duration)}>{duration}</span>}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleUnarchiveClick}>\n              {lang('StoryList.SaveToProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleArchiveClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && !isPinned && canPin && (\n            <MenuItem icon=\"pin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Pin')}\n            </MenuItem>\n          )}\n          {!isArchive && isPinned && (\n            <MenuItem icon=\"unpin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Unpin')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { story }): StateProps => {\n  const chat = selectChat(global, story.peerId);\n  const isProtected = chat?.isProtected;\n\n  const { maxPinnedStoriesCount } = global.appConfig || {};\n  const isOwn = 'isOut' in story && story.isOut;\n  const pinnedStories = selectPinnedStories(global, story.peerId);\n  const isPinned = pinnedStories?.some((pinnedStory) => pinnedStory.id === story.id);\n  const canPinMore = isOwn && (!maxPinnedStoriesCount || (pinnedStories?.length || 0) < maxPinnedStoriesCount);\n\n  return {\n    isProtected,\n    isPinned,\n    canPin: canPinMore,\n  };\n})(MediaStory));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotPreviewMedia,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiSavedStarGift,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType, ThreadId,\n} from '../../types';\nimport type { RegularLangKey } from '../../types/language';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  getMessageDownloadableMedia,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsCurrentUserPremium,\n  selectIsGiftProfileFilterDefault,\n  selectIsRightColumnShown,\n  selectPeerStories,\n  selectSimilarBotsIds,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport SavedGift from '../common/gift/SavedGift';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Icon from '../common/icons/Icon';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PreviewMedia from '../common/PreviewMedia';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Link from '../ui/Link';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  isBot?: boolean;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  hasPreviewMediaTab?: boolean;\n  hasGiftsTab?: boolean;\n  gifts?: ApiSavedStarGift[];\n  giftsTransitionKey: number;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  similarBots?: string[];\n  botPreviewMedia? : ApiBotPreviewMedia[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarPeers: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n  isSynced?: boolean;\n  isNotDefaultGiftFilter?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  key: RegularLangKey;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', key: 'ProfileTabMedia' },\n  { type: 'documents', key: 'ProfileTabFiles' },\n  { type: 'links', key: 'ProfileTabLinks' },\n  { type: 'audio', key: 'ProfileTabMusic' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  threadId,\n  profileState,\n  theme,\n  isChannel,\n  isBot,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  hasPreviewMediaTab,\n  hasGiftsTab,\n  gifts,\n  giftsTransitionKey,\n  botPreviewMedia,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n  similarChannels,\n  similarBots,\n  isCurrentUserPremium,\n  limitSimilarPeers,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n  isSynced,\n  onProfileStateChange,\n  isNotDefaultGiftFilter,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n    loadBotRecommendations,\n    loadPreviewMedias,\n    loadPeerSavedGifts,\n    resetGiftProfileFilter,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : chatId;\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => {\n    const arr: TabProps[] = [];\n    if (isSavedMessages && !isSavedDialog) {\n      arr.push({ type: 'dialogs', key: 'ProfileTabSavedDialogs' });\n    }\n\n    if (hasStoriesTab) {\n      arr.push({ type: 'stories', key: 'ProfileTabStories' });\n    }\n\n    if (hasStoriesTab && isSavedMessages) {\n      arr.push({ type: 'storiesArchive', key: 'ProfileTabStoriesArchive' });\n    }\n\n    if (hasGiftsTab) {\n      arr.push({ type: 'gifts', key: 'ProfileTabGifts' });\n    }\n\n    if (hasMembersTab) {\n      arr.push({ type: 'members', key: isChannel ? 'ProfileTabSubscribers' : 'ProfileTabMembers' });\n    }\n\n    if (hasPreviewMediaTab) {\n      arr.push({ type: 'previewMedia', key: 'ProfileTabBotPreview' });\n    }\n\n    arr.push(...TABS);\n\n    // Voice messages filter currently does not work in forum topics. Return it when it's fixed on the server side.\n    if (!isTopicInfo) {\n      arr.push({ type: 'voice', key: 'ProfileTabVoice' });\n    }\n\n    if (hasCommonChatsTab) {\n      arr.push({ type: 'commonChats', key: 'ProfileTabSharedGroups' });\n    }\n\n    if (isChannel && similarChannels?.length) {\n      arr.push({ type: 'similarChannels', key: 'ProfileTabSimilarChannels' });\n    }\n\n    if (isBot && similarBots?.length) {\n      arr.push({ type: 'similarBots', key: 'ProfileTabSimilarBots' });\n    }\n\n    return arr.map((tab) => ({\n      type: tab.type,\n      title: lang(tab.key),\n    }));\n  }, [\n    isSavedMessages, isSavedDialog, hasStoriesTab, hasGiftsTab, hasMembersTab, hasPreviewMediaTab, isTopicInfo,\n    hasCommonChatsTab, isChannel, isBot, similarChannels?.length, similarBots?.length, lang,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [allowAutoScrollToTabs, startAutoScrollToTabsIfNeeded, stopAutoScrollToTabs] = useFlag(false);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    startAutoScrollToTabsIfNeeded();\n    setActiveTab(index);\n  }, []);\n\n  useEffect(() => {\n    if (hasPreviewMediaTab && !botPreviewMedia) {\n      loadPreviewMedias({ botId: chatId });\n    }\n  }, [chatId, botPreviewMedia, hasPreviewMediaTab]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels && isSynced) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels, isSynced]);\n\n  useEffect(() => {\n    if (isBot && !similarBots && isSynced) {\n      loadBotRecommendations({ userId: chatId });\n    }\n  }, [chatId, isBot, similarBots, isSynced]);\n\n  const giftIds = useMemo(() => {\n    return gifts?.map(({ date, gift, fromId }) => `${date}-${fromId}-${gift.id}`);\n  }, [gifts]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadCommonChats = useCallback(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadGifts = useCallback(() => {\n    loadPeerSavedGifts({ peerId: chatId });\n  }, [chatId]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds({\n    loadMoreMembers,\n    searchMessages: searchSharedMediaMessages,\n    loadStories: handleLoadPeerStories,\n    loadStoriesArchive: handleLoadStoriesArchive,\n    loadMoreGifts: handleLoadGifts,\n    loadCommonChats: handleLoadCommonChats,\n    tabType,\n    mediaSearchType,\n    groupChatMembers: members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages: messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    giftIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n    similarBots,\n  });\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const handleStopAutoScrollToTabs = useLastCallback(() => {\n    stopAutoScrollToTabs();\n  });\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n    allowAutoScrollToTabs,\n    handleStopAutoScrollToTabs,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType, threadId]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handleSelectPreviewMedia = useLastCallback((index: number) => {\n    openMediaViewer({\n      standaloneMedia: botPreviewMedia?.flatMap((item) => item?.content.photo\n      || item?.content.video).filter(Boolean),\n      origin: MediaViewerOrigin.PreviewMedia,\n      mediaIndex: index,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  const handleResetGiftsFilter = useLastCallback(() => {\n    resetGiftProfileFilter({ peerId: chatId });\n  });\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds && !botPreviewMedia) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: oldLang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderNothingFoundGiftsWithFilter() {\n    return (\n      <div className=\"nothing-found-gifts\">\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.SearchingDuck}\n          nonInteractive\n          noLoop\n        />\n        <div className=\"description\">\n          {lang('GiftSearchEmpty')}\n        </div>\n        <Link\n          className=\"date\"\n          onClick={handleResetGiftsFilter}\n        >\n          {lang('GiftSearchReset')}\n        </Link>\n      </div>\n    );\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    if ((!viewportIds && !botPreviewMedia) || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div\n          className=\"content empty-list\"\n        >\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (viewportIds && !viewportIds?.length) {\n      let text: string;\n\n      if (resultType === 'gifts' && isNotDefaultGiftFilter) {\n        return renderNothingFoundGiftsWithFilter();\n      }\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = oldLang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = oldLang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = oldLang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = oldLang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = oldLang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = oldLang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = oldLang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = oldLang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={oldLang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => {\n            const message = messagesById[id];\n            if (!message) return undefined;\n            const media = messagesById[id] && getMessageDownloadableMedia(message)!;\n            return messagesById[id] && (\n              <Audio\n                key={id}\n                theme={theme}\n                message={messagesById[id]}\n                senderTitle={getSenderName(oldLang, messagesById[id], chatsById, usersById)}\n                origin={AudioOrigin.SharedMedia}\n                date={messagesById[id].date}\n                className=\"scroll-item\"\n                onPlay={handlePlayAudio}\n                onDateClick={handleMessageFocus}\n                canDownload={!isChatProtected && !messagesById[id].isProtected}\n                isDownloading={getIsDownloading(activeDownloads, media)}\n              />\n            );\n          })\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'previewMedia' ? (\n          botPreviewMedia!.map((media, i) => (\n            <PreviewMedia\n              key={media.date}\n              media={media}\n              isProtected={isChatProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectPreviewMedia}\n              index={i}\n            />\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {oldLang('UnlockSimilar')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(oldLang('MoreSimilarText', limitSimilarPeers), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'similarBots' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((userId, i) => (\n              <ListItem\n                key={userId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarBots!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: userId })}\n              >\n                {isUserId(userId) ? (\n                  <PrivateChatInfo\n                    userId={userId}\n                    avatarSize=\"medium\"\n                  />\n                ) : (\n                  <GroupChatInfo\n                    chatId={userId}\n                    avatarSize=\"medium\"\n                  />\n                )}\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-bots\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockMoreSimilarBots')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarBotsText', { count: limitSimilarPeers }, {\n                    withNodes: true,\n                    withMarkdown: true,\n                  }))}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'gifts' ? (\n          (gifts?.map((gift) => (\n            <SavedGift\n              peerId={chatId}\n              key={`${gift.date}-${gift.fromId}-${gift.gift.id}`}\n              gift={gift}\n              observeIntersection={observeIntersectionForMedia}\n            />\n          )))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const shouldUseTransitionForContent = resultType === 'gifts';\n  const contentTransitionKey = giftsTransitionKey;\n\n  function renderContentWithTransition() {\n    return (\n      <Transition\n        activeKey={contentTransitionKey}\n        name=\"fade\"\n      >\n        {renderContent()}\n      </Transition>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(profileId, isRightColumnShown && canRenderContent, isSavedDialog)\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={oldLang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {shouldUseTransitionForContent ? renderContentWithTransition() : renderContent()}\n          </Transition>\n          <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          className={buildClassName(!isActive && 'hidden')}\n          isShown={canRenderContent}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={oldLang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo peerId={profileId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const user = selectUser(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const isBot = user && isUserBot(user);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const { similarBotsIds } = selectSimilarBotsIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const peer = user || chat;\n    const peerFullInfo = userFullInfo || chatFullInfo;\n\n    const hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog\n      && Boolean(userFullInfo?.commonChatsCount);\n    const commonChats = selectUserCommonChats(global, chatId);\n\n    const hasPreviewMediaTab = userFullInfo?.botInfo?.hasPreviewMedia;\n    const botPreviewMedia = global.users.previewMediaByBotId[chatId];\n\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    const hasGiftsTab = Boolean(peerFullInfo?.starGiftCount) && !isSavedDialog;\n    const peerGifts = selectTabState(global).savedGifts.giftsByPeerId[chatId];\n    const giftsTransitionKey = selectTabState(global).savedGifts.transitionKey || 0;\n\n    const isNotDefaultGiftFilter = !selectIsGiftProfileFilterDefault(global);\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      isBot,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      hasPreviewMediaTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      hasGiftsTab,\n      gifts: peerGifts?.gifts,\n      giftsTransitionKey,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      similarBots: similarBotsIds,\n      botPreviewMedia,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      isSynced: global.isSynced,\n      isNotDefaultGiftFilter,\n      limitSimilarPeers: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport type { GiftProfileFilterOptions, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectCanUseGiftProfileAdminFilter,\n  selectCanUseGiftProfileFilter,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectTopic,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isMonetizationStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  giftProfileFilter: GiftProfileFilterOptions;\n  canUseGiftFilter?: boolean;\n  canUseGiftAdminFilter?:boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  GiftList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  MonetizationStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isMonetizationStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  onClose,\n  onScreenSelect,\n  canEditBot,\n  giftProfileFilter,\n  canUseGiftFilter,\n  canUseGiftAdminFilter,\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    toggleManagement,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n    updateGiftProfileFilter,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const {\n    sortType: giftsSortType,\n    shouldIncludeUnlimited: shouldIncludeUnlimitedGifts,\n    shouldIncludeLimited: shouldIncludeLimitedGifts,\n    shouldIncludeUnique: shouldIncludeUniqueGifts,\n    shouldIncludeDisplayed: shouldIncludeDisplayedGifts,\n    shouldIncludeHidden: shouldIncludeHiddenGifts,\n  } = giftProfileFilter;\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.GiftList ? (\n      HeaderContent.GiftList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : isMonetizationStatistics ? (\n    HeaderContent.MonetizationStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return oldLang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return oldLang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return oldLang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return oldLang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return oldLang('GroupInfo.Title');\n  }\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, lang]);\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{oldLang('PollResults')}</h3>;\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{oldLang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{oldLang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{oldLang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{oldLang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{oldLang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{oldLang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{oldLang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{oldLang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{oldLang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{oldLang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{oldLang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{oldLang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? oldLang('EditLink') : oldLang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{oldLang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={oldLang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <Icon name=\"delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={oldLang('DeleteLink')}\n                    text={oldLang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={oldLang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{oldLang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={oldLang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={oldLang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{oldLang('Boosts')}</h3>;\n      case HeaderContent.MonetizationStatistics:\n        return <h3 className=\"title\">{oldLang('lng_channel_earn_title')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{oldLang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{oldLang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{oldLang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{oldLang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{oldLang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{oldLang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{oldLang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{oldLang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{oldLang('EditTopic')}</h3>;\n      case HeaderContent.GiftList:\n        return (\n          <>\n            <h3 className=\"title\">{lang('ProfileTabGifts')}</h3>\n            {canUseGiftFilter && chatId && (\n              <section className=\"tools\">\n                <DropdownMenu\n                  trigger={PrimaryLinkMenuButton}\n                  positionX=\"right\"\n                  autoClose={false}\n                >\n                  <MenuItem\n                    icon={giftsSortType === 'byDate' ? 'calendar-filter' : 'cash-circle'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { sortType: giftsSortType === 'byDate' ? 'byValue' : 'byDate' } },\n                    )}\n                  >\n                    {lang(giftsSortType === 'byDate' ? 'GiftSortByDate' : 'GiftSortByValue')}\n                  </MenuItem>\n\n                  <MenuSeparator />\n\n                  <MenuItem\n                    icon={shouldIncludeUnlimitedGifts ? 'check' : 'placeholder'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnlimited: !shouldIncludeUnlimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnlimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeLimitedGifts ? 'check' : 'placeholder'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeLimited: !shouldIncludeLimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterLimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeUniqueGifts ? 'check' : 'placeholder'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnique: !shouldIncludeUniqueGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnique')}\n                  </MenuItem>\n\n                  {canUseGiftAdminFilter && (\n                    <>\n                      <MenuSeparator />\n                      <MenuItem\n                        icon={shouldIncludeDisplayedGifts ? 'check' : 'placeholder'}\n                        // eslint-disable-next-line react/jsx-no-bind\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeDisplayed: !shouldIncludeDisplayedGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterDisplayed')}\n                      </MenuItem>\n\n                      <MenuItem\n                        icon={shouldIncludeHiddenGifts ? 'check' : 'placeholder'}\n                        // eslint-disable-next-line react/jsx-no-bind\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeHidden: !shouldIncludeHiddenGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterHidden')}\n                      </MenuItem>\n                    </>\n                  )}\n                </DropdownMenu>\n              </section>\n            )}\n          </>\n        );\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <Icon name=\"add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <Icon name=\"stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.GiftList\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? selectTopic(global, chatId!, threadId!) : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    const giftProfileFilter = tabState.savedGifts.filter;\n    const canUseGiftFilter = chatId ? selectCanUseGiftProfileFilter(global, chatId) : false;\n    const canUseGiftAdminFilter = chatId ? selectCanUseGiftProfileAdminFilter(global, chatId) : false;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n      giftProfileFilter,\n      canUseGiftFilter,\n      canUseGiftAdminFilter,\n    };\n  },\n)(RightHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiTypePrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n} from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n};\n\nconst GIVEAWAY_IMG_LIST: { [key: number]: string } = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst CUSTOM_PEER_STAR_TEMPLATE: Omit<CustomPeer, 'title' | 'titleKey'> = {\n  isCustomPeer: true,\n  avatarIcon: 'star',\n  peerColorId: 1,\n};\n\nconst CUSTOM_PEER_TO_BE_DISTRIBUTED: CustomPeer = {\n  isCustomPeer: true,\n  titleKey: 'BoostingToBeDistributed',\n  avatarIcon: 'user',\n  withPremiumGradient: true,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>{lang(boost.isFromGiveaway\n            ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    const hasStars = Boolean(boost?.stars);\n\n    let customPeer: CustomPeer | undefined;\n    if (hasStars) {\n      customPeer = {\n        ...CUSTOM_PEER_STAR_TEMPLATE,\n        title: lang('Stars', boost.stars),\n      };\n    }\n\n    if (!boost.userId) {\n      customPeer = CUSTOM_PEER_TO_BE_DISTRIBUTED;\n    }\n\n    return (\n      <ListItem\n        className=\"chat-item-clickable\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={customPeer}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback(() => {\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiTypePrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel!)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel! + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => {\n                const isStarsGiveaway = 'stars' in prepaidGiveaway;\n\n                return (\n                  <ListItem\n                    key={prepaidGiveaway.id}\n                    className=\"chat-item-clickable\"\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                  >\n                    <div className={buildClassName(styles.status, 'status-clickable')}>\n                      <div>\n                        {isStarsGiveaway\n                          ? (\n                            <img\n                              src={GiftStar}\n                              className={styles.giveawayIcon}\n                              alt={lang('GiftStar')}\n                            />\n                          ) : (\n                            <img\n                              src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months]}\n                              className={styles.giveawayIcon}\n                              alt={lang('Giveaway')}\n                            />\n                          )}\n                      </div>\n                      <div className={styles.info}>\n                        <h3>\n                          {isStarsGiveaway\n                            ? lang('Giveaway.Stars.Prepaid.Title', prepaidGiveaway.stars)\n                            : lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                        </h3>\n                        <p className={styles.month}>{\n                          isStarsGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', prepaidGiveaway.quantity)\n                            : lang('PrepaidGiveawayMonths', prepaidGiveaway.months)\n                        }\n                        </p>\n                      </div>\n                      <div className={styles.quantity}>\n                        <div className={buildClassName(styles.floatingBadge,\n                          styles.floatingBadgeButtonColor,\n                          styles.floatingBadgeButton)}\n                        >\n                          <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                            {isStarsGiveaway ? prepaidGiveaway.boosts\n                              : prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </ListItem>\n                );\n              })}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div className={styles.section}>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>{lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </>\n            )}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount, 'i')}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang(\n                isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n              )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig?.giveawayBoostsPerPremium;\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutMonetizationModal = useModuleLoader(Bundles.Extra, 'AboutMonetizationModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutMonetizationModal ? <AboutMonetizationModal {...props} /> : undefined;\n};\n\nexport default AboutMonetizationModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vBPv6lUS\",\"graph\":\"EbPbvB1I\",\"hidden\":\"nsPIlLYL\",\"ready\":\"s6qyDhkE\",\"section\":\"cB2IkwY6\",\"topText\":\"FLOpxZd1\",\"availableReward\":\"emE6bAD8\",\"rewardValue\":\"eyDAxGDU\",\"decimalPart\":\"jkRV_L7b\",\"integer\":\"xE9kfGi7\",\"decimalUsdPart\":\"hWMnYdxX\",\"toncoinIcon\":\"ubDl9CvS\",\"textBottom\":\"P3qZJJzF\"};","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChannelMonetizationStatistics, StatisticsGraph } from '../../../api/types';\n\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutMonetizationModal from '../../common/AboutMonetizationModal.async';\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './MonetizationStatistics.module.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst MONETIZATION_GRAPHS_TITLES = {\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  revenueGraph: 'lng_channel_earn_chart_revenue',\n};\nconst MONETIZATION_GRAPHS = Object.keys(MONETIZATION_GRAPHS_TITLES) as (keyof ApiChannelMonetizationStatistics)[];\n\ntype StateProps = {\n  chatId: string;\n  dcId?: number;\n  statistics?: ApiChannelMonetizationStatistics;\n  isCreator?: boolean;\n  isChannelRevenueWithdrawalEnabled?: boolean;\n  hasPassword?: boolean;\n};\n\nconst MonetizationStatistics = ({\n  chatId,\n  dcId,\n  statistics,\n  isCreator,\n  isChannelRevenueWithdrawalEnabled,\n  hasPassword,\n}: StateProps) => {\n  const { loadChannelMonetizationStatistics, openMonetizationVerificationModal, loadPasswordInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n  const forceUpdate = useForceUpdate();\n  const [isAboutMonetizationModalOpen, openAboutMonetizationModal, closeAboutMonetizationModal] = useFlag(false);\n  const [isConfirmPasswordDialogOpen, openConfirmPasswordDialogOpen, closeConfirmPasswordDialogOpen] = useFlag();\n  const availableBalance = statistics?.balances?.availableBalance;\n  const isWithdrawalEnabled = statistics?.balances?.isWithdrawalEnabled;\n  const canWithdraw = isCreator && isChannelRevenueWithdrawalEnabled && Boolean(availableBalance)\n    && isWithdrawalEnabled;\n\n  useEffect(() => {\n    if (chatId) {\n      loadChannelMonetizationStatistics({ peerId: chatId });\n      loadPasswordInfo();\n    }\n  }, [chatId, loadChannelMonetizationStatistics]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (containerRef.current) {\n        Array.from(containerRef.current.children).forEach((child) => {\n          child.innerHTML = '';\n          child.classList.add(styles.hidden);\n        });\n      }\n\n      loadedCharts.current = [];\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      MONETIZATION_GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        LovelyChart.create(containerRef.current!.children[index], {\n          title: oldLang((MONETIZATION_GRAPHS_TITLES as Record<string, string>)[name]),\n          ...graph as StatisticsGraph,\n        });\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [isReady, statistics, oldLang, chatId, dcId, forceUpdate]);\n\n  function renderAvailableReward() {\n    const [integerTonPart, decimalTonPart] = availableBalance ? availableBalance.toFixed(4).split('.') : [0];\n    const [integerUsdPart, decimalUsdPart] = availableBalance\n    && statistics?.usdRate ? (availableBalance * statistics.usdRate).toFixed(2).split('.') : [0];\n\n    return (\n      <div className={styles.availableReward}>\n        <div className={styles.toncoin}>\n          <Icon className={styles.toncoinIcon} name=\"toncoin\" />\n          <b className={styles.rewardValue}>\n            {integerTonPart}\n            {decimalTonPart ? <span className={styles.decimalPart}>.{decimalTonPart}</span> : undefined}\n          </b>\n        </div>\n        {' '}\n        <span className={styles.integer}>\n          ≈ ${integerUsdPart}\n          {decimalUsdPart ? <span className={styles.decimalUsdPart}>.{decimalUsdPart}</span> : undefined}\n        </span>\n      </div>\n    );\n  }\n\n  const topText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnAbout',\n      {\n        link: (\n          <Link isPrimary onClick={openAboutMonetizationModal}>\n            {linkText}\n            <Icon name=\"next\" />\n          </Link>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const rewardsText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'MonetizationBalanceZeroInfo',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationProceedsInfoLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const verificationMonetizationHandler = useLastCallback(() => {\n    if (hasPassword) {\n      openMonetizationVerificationModal({\n        chatId,\n      });\n    } else {\n      openConfirmPasswordDialogOpen();\n    }\n  });\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <div className={buildClassName(styles.section, styles.topText)}>{topText}</div>\n\n      <StatisticsOverview\n        statistics={statistics}\n        isToncoin\n        type=\"monetization\"\n        title={oldLang('MonetizationOverview')}\n        subtitle={\n          <div className={styles.textBottom}>{oldLang('MonetizationProceedsTONInfo')}</div>\n        }\n      />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef} className={styles.section}>\n        {MONETIZATION_GRAPHS.filter(Boolean).map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      <div className={styles.section}>\n        {oldLang('lng_channel_earn_balance_title')}\n\n        {renderAvailableReward()}\n\n        <Button\n          size=\"smaller\"\n          type=\"button\"\n          onClick={verificationMonetizationHandler}\n          disabled={!canWithdraw}\n        >\n          {oldLang('MonetizationWithdraw')}\n        </Button>\n\n        <div className={styles.textBottom}>{rewardsText}</div>\n      </div>\n\n      <AboutMonetizationModal\n        isOpen={isAboutMonetizationModalOpen}\n        onClose={closeAboutMonetizationModal}\n      />\n      <ConfirmDialog\n        isOnlyConfirm\n        isOpen={isConfirmPasswordDialogOpen}\n        onClose={closeConfirmPasswordDialogOpen}\n        confirmHandler={closeConfirmPasswordDialogOpen}\n        confirmLabel={lang('OK')}\n      >\n        <p>{renderText(oldLang('Monetization.Withdraw.Error.Text'), ['br'])}</p>\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n    } = global;\n    const monetizationStatistics = tabState.monetizationStatistics;\n    const chatId = monetizationStatistics && monetizationStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const dcId = selectChatFullInfo(global, chatId!)?.statisticsDcId;\n    const isCreator = Boolean(chat?.isCreator);\n\n    const statistics = tabState.statistics.monetization;\n\n    const isChannelRevenueWithdrawalEnabled = global.appConfig?.isChannelRevenueWithdrawalEnabled;\n\n    return {\n      chatId: chatId!,\n      dcId,\n      statistics,\n      isCreator,\n      isChannelRevenueWithdrawalEnabled,\n      hasPassword,\n    };\n  },\n)(MonetizationStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType, ThreadId } from '../../types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport MonetizationStatistics from './statistics/MonetizationStatistics';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n    closeMonetizationStatistics,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isMonetizationStatistics = contentKey === RightColumnContent.MonetizationStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.MonetizationStatistics:\n        closeMonetizationStatistics();\n        break;\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            isActive={isOpen && isActive}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MonetizationStatistics:\n        return <MonetizationStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMonetizationStatistics={isMonetizationStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport download from '../../util/download';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      const handleProgress = () => {\n        const currentDownloads = selectTabState(getGlobal()).activeDownloads;\n        if (!currentDownloads[mediaHash]) {\n          mediaLoader.cancelProgress(handleProgress);\n        }\n      };\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true, handleProgress, generateUniqueId()).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (!chatId || !messageId) return;\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftingPickerModal = useModuleLoader(Bundles.Stars, 'StarsGiftingPickerModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftingPickerModal ? <StarsGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default StarsGiftingPickerModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YUAfqWPN\"};","import React, { memo, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ConfettiStyle } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { pick } from '../../../util/iteratees';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"RMsQzedH\",\"wave\":\"YLR2Oh2f\",\"waveGrow\":\"rqfv5Mai\"};","import React, {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { SVG_NAMESPACE } from '../../../config';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { addSvgDefinition, removeSvgDefinition } from '../../../util/svgController';\nimport windowSize from '../../../util/windowSize';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport styles from './WaveContainer.module.scss';\n\nimport waveRipple from '../../../assets/wave_ripple.svg';\n\ntype StateProps = {\n  waveInfo?: TabState['wave'];\n};\n\ntype Wave = {\n  startTime: number;\n  waveWidth: number;\n  top: number;\n  left: number;\n};\n\nconst BASE_SIZE_MULTIPLIER = 1.73;\nconst FILTER_ID = 'wave-filter';\nconst FILTER_SCALE = '20';\nconst WAVE_COUNT_LIMIT = 7;\n\nconst WaveContainer = ({ waveInfo }: StateProps) => {\n  const [waves, setWaves] = useState<Wave[]>([]);\n\n  const addWave = useLastCallback((newWave: Wave) => {\n    if (waves.length >= WAVE_COUNT_LIMIT) return;\n\n    setWaves((prevWaves) => [...prevWaves, newWave]);\n  });\n\n  useEffect(() => {\n    if (!waveInfo) return;\n\n    const { startX, startY } = waveInfo;\n    const { width, height } = windowSize.get();\n\n    const maxSize = Math.max(width - startX, height - startY, startX, startY);\n    const overlaySize = maxSize * BASE_SIZE_MULTIPLIER;\n    const top = startY - overlaySize / 2;\n    const left = startX - overlaySize / 2;\n\n    addWave({\n      startTime: waveInfo.lastWaveTime,\n      waveWidth: overlaySize,\n      top,\n      left,\n    });\n  }, [waveInfo]);\n\n  useEffect(() => {\n    addSvgDefinition(\n      <filter x=\"0\" y=\"0\" width=\"1\" height=\"1\" color-interpolation-filters=\"sRGB\" xmlns={SVG_NAMESPACE}>\n        <feImage href={waveRipple} result=\"waveImage\" />\n        <feDisplacementMap\n          in=\"SourceGraphic\"\n          in2=\"waveImage\"\n          scale={FILTER_SCALE}\n          xChannelSelector=\"R\"\n          yChannelSelector=\"B\"\n        />\n      </filter>,\n      FILTER_ID,\n    );\n\n    return () => {\n      removeSvgDefinition(FILTER_ID);\n    };\n  }, []);\n\n  return (\n    <div className={buildClassName(styles.root)} teactFastList>\n      {waves.map((wave) => (\n        <div\n          className={styles.wave}\n          style={buildStyle(\n            `--wave-width: ${wave.waveWidth}px`,\n            `--wave-pos-top: ${wave.top}px`,\n            `--wave-pos-left: ${wave.left}px`,\n          )}\n          key={wave.startTime}\n          onAnimationEnd={() => setWaves((prevWaves) => prevWaves.filter((w) => w !== wave))}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    return {\n      waveInfo: tabState.wave,\n    };\n  },\n)(WaveContainer));\n","import '../../global/actions/all';\n\nimport React, {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFolder, ApiLimitTypeWithModal, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport { BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER } from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport { IS_ANDROID, IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../util/windowEnvironment';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DeleteMessageModal from '../common/DeleteMessageModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AudioPlayer from '../middle/panes/AudioPlayer';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport StarsGiftingPickerModal from './premium/StarsGiftingPickerModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport ConfettiContainer from './visualEffects/ConfettiContainer';\nimport SnapEffectContainer from './visualEffects/SnapEffectContainer';\nimport WaveContainer from './visualEffects/WaveContainer';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isGiveawayModalOpen?: boolean;\n  isDeleteMessageModalOpen?: boolean;\n  isStarsGiftingPickerModal?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isDeleteMessageModalOpen,\n  isStarsGiftingPickerModal,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n}: OwnProps & StateProps) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadRestrictedEmojiStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadStarGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    loadUserCollectibleStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n    loadTopBotApps,\n    loadPaidReactionPrivacy,\n    loadPasswordInfo,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  const lang = useLang();\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadAttachBots();\n      loadContactList();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadFeaturedEmojiStickers();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadTimezones();\n      loadQuickReplies();\n      loadStarStatus();\n      loadPremiumGifts();\n      loadStarGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadRestrictedEmojiStickers();\n      loadGenericEmojiEffects();\n      loadSavedReactionTags();\n      loadAuthorizations();\n      loadTopBotApps();\n      loadPaidReactionPrivacy();\n      loadPasswordInfo();\n      loadUserCollectibleStatuses();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (lang.code !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: lang.code });\n      }\n\n      loadCountryList({ langCode: lang.code });\n\n      loadAttachBots();\n    }\n  }, [lang, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    updatePageTitle();\n\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isLeftColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'left-column-',\n  });\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isRightColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'right-column-',\n  });\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      <AudioPlayer noUi />\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      {IS_WAVE_TRANSFORM_SUPPORTED && <WaveContainer />}\n      <SnapEffectContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      <PremiumMainModal isOpen={isPremiumModalOpen} />\n      <GiveawayModal isOpen={isGiveawayModalOpen} />\n      <StarsGiftingPickerModal isOpen={isStarsGiftingPickerModal} />\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <DeleteMessageModal isOpen={isDeleteMessageModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          wasTimeFormatSetManually,\n        },\n      },\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      deleteMessageModal,\n      starsGiftingPickerModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isDeleteMessageModalOpen: Boolean(deleteMessageModal),\n      isStarsGiftingPickerModal: starsGiftingPickerModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransitionDeprecated(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"hJUqHi4B\",\"clickable\":\"hjDEmFaT\"};","import React from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './BadgeButton.module.scss';\n\ntype OwnProps = {\n  children: React.ReactNode;\n  className?: string;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n};\n\nconst BadgeButton = ({\n  children,\n  className,\n  onClick,\n}: OwnProps) => {\n  return (\n    <div className={buildClassName(styles.root, onClick && styles.clickable, className)} onClick={onClick}>\n      {children}\n    </div>\n  );\n};\n\nexport default BadgeButton;\n","import { useEffect, useState } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME, DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const { setThemeSettings } = getActions();\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        })\n        .catch(() => {\n          setThemeSettings({\n            theme,\n            background: undefined,\n            backgroundColor: undefined,\n            isBlurred: true,\n            patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n          });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","import { useEffect } from '../lib/teact/teact';\n\nconst useVerticalScroll = (\n  containerRef: React.RefObject<HTMLDivElement>,\n  isDisabled?: boolean,\n  shouldPreventDefault = false,\n) => {\n  useEffect(() => {\n    if (isDisabled) {\n      return undefined;\n    }\n\n    const container = containerRef.current!;\n\n    function handleScroll(e: WheelEvent) {\n    \n      if (!e.deltaY) {\n        container.scrollTop += e.deltaX / 4;\n        if (shouldPreventDefault) e.preventDefault();\n      }\n    }\n\n    container.addEventListener('wheel', handleScroll, { passive: !shouldPreventDefault });\n\n    return () => {\n      container.removeEventListener('wheel', handleScroll);\n    };\n  }, [containerRef, isDisabled, shouldPreventDefault]);\n};\n\nexport default useVerticalScroll;\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","isOwn","peerId","currentUserId","forEach","reaction","type","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","SNAP_ANIMATION_DELAY","lastVideoProcessingNotificationTime","updateReactions","actions","chat","isOutgoing","areDeepEqual","localPaidReaction","find","r","localAmount","addPaidReaction","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","hasUnreadReactionsForMessageInChat","unreadReactions","includes","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","sort","a","b","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","_messageUpdate$conten","_messageUpdate$conten2","blobUrl","thumbnail","_messageUpdate$conten3","_messageUpdate$conten4","isPreloadedGlobally","_messageUpdate$conten5","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","undefined","updateTopic","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","selectTopic","deleteTopic","action","deletePeerPhoto","selectThreadIdFromMessage","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","loadTopicById","topicId","setGlobal","isAnimatingAsSnap","selectCanAnimateSnapEffect","setTimeout","getGlobal","stillDeletedIds","deleteChatMessages","chatIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","poll","storyReplyInfo","getStoryReplyInfo","isForumTopic","isLocal","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","updatePoll","reportDeliveryUntilDate","getServerTime","reportMessageDelivery","isNotJoined","selectIsChatListed","loadTopChats","lastMessage","addMessages","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","updatePeerFullInfo","hasScheduledMessages","text","clearMessageTranslation","keys","selectChatScheduledMessages","map","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","newScheduledMessageId","showNotification","key","title","messageListType","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","pinnedIds","selectPinnedIds","newPinnedIds","concat","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","newIds","hadVideoProcessing","some","isVideoProcessingPending","processedVideoId","actionText","payload","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","senderId","deleteParticipantHistory","channelId","pollId","pollUpdate","options","updatePollVote","selectIsServiceChatReady","createServiceNotification","extendedMedia","isBought","invoice","media","mediaType","paidMedia","paidMediaUpdate","transcriptionId","isPending","transcriptions","error","match","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","result","limit","count","localMessages","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findIndex","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","currentMessageKey","progressCallback","attachment","progress","set","updateUploadByMessageKey","IS_IOS","rafPromise","delete","fetchUnreadMentions","addUnreadMentions","shouldForceRender","onError","isRestricted","viewportIds","Boolean","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","scheduledAt","contentToBeScheduled","selectDraft","isForwarding","forwardMessages","draftReplyInfo","messageReplyInfo","noWebPage","selectNoWebPage","sendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","hasSentCaption","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","groupedId","isFirst","isLast","quick","shouldSendAsFile","firstAttachment","restAttachments","firstAttachments","lastAttachment","replyToForFirstMessage","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","oldTranslate","join","selectEditingMessage","setEditingId","cancelApiProgress","apiUpdate","currentDraft","effectId","shouldKeepReply","currentReplyInfo","updatedReplyInfo","isUnpin","isOneSide","isSilent","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","peer","selectPeer","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","description","option","response","MESSAGE_ID_REQUIRED_ERROR","closeReportModal","oldSections","reportModal","sections","selectedOption","o","newSection","subtitle","subject","isOptional","connectionState","isUserBot","participantId","minId","readCount","l","countSortedIds","newTopicUnreadCount","shouldFetchUnreadReactions","selectCurrentChat","then","fetchUnreadReactions","webPagePreview","selectPollFromMessage","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","forwardableRealMessages","selectCanForwardMessage","messageBatches","config","maxForwardedCount","splitMessagesForForwarding","batch","isShareMessageModalShown","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","isApiPeerUser","selectIsChatBotNotStarted","updateSponsoredMessage","selectSponsoredMessage","randomId","isMedia","isFullscreen","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","reportAdModal","enabled","updateUserFullInfo","areAdsEnabled","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","url","shouldSkipModal","ignoreDeepLinks","urlWithProtocol","ensureProtocol","isDeepLink","closeStoryViewer","closePaymentModal","openTelegramLink","appConfig","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","replyingInfo","replyingMessage","currentChat","newReplyInfo","replyToTopId","replyToPeerId","quoteText","selectReplyCanBeSentToChat","moveReplyToNewDraft","openThread","closeMediaViewer","exitMessageSelectMode","clearDraft","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","checkIfVoiceMessagesAllowed","showDialog","data","selectForwardsCanBeSentToChat","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","Array","shouldIncrement","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","isChatSuperGroup","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","MESSAGES_TO_REPORT_DELIVERY","reportDeliveryTimeout","mimeType","SUPPORTED_AUDIO_CONTENT_TYPES","GIF_MIME_TYPE","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","voice","currentIds","cId","clear","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","collectibleEmojiStatuses","statuses","documentIds","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","RESTRICTED_EMOJI_SET","restrictedEmoji","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","langProvider","toString","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","shouldIgnoreCache","updateRecentStatusCustomEmojis","emojiStatuses","getChatGroupOrChannelMessage","isChatGroup","localMessage","globalSearch","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","accountResultIds","globalResultIds","updateGlobalSearch","localResults","peerIds","globalResults","maxDate","timestampPlusDay","minDate","resultsByType","totalCount","foundIds","nextOffsetId","searchMessagesGlobal","context","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","nextOffsetPeerId","nextOffsetRate","offsetRate","offsetPeer","messageLink","inChatResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","isApiPeerChat","GLOBAL_TOPIC_SEARCH_SLICE","inChatResult","topics","localTopics","totalTopicsCount","link","tryParseDeepLink","localChat","selectChatByUsername","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","userStatusesById","addUserStatuses","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","popularBotApps","botApps","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentSharedMediaSearch","updateSharedMediaSearchResults","currentSearch","selectCurrentMiddleSearch","updateMiddleSearch","savedTag","isHashtag","offsetPeerId","fetchingQuery","MESSAGE_SEARCH_SLICE","hashtag","getSearchResultKey","hasTagChanged","isSameReaction","updateMiddleSearchResults","cleanQuery","replace","requestedQuery","currentType","currentResults","currentMediaMessageId","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","chatMediaSearchParams","CHAT_MEDIA_SLICE","isSynced","currentSegment","isInsideSortedArrayRange","segments","segment","splice","selectCurrentChatMediaSearchSegment","currentMessageId","currentSegmentFoundIdsCount","idIndexInSegment","indexOf","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","preloadOffset","lastMediaIndex","calcLoadMoreDirection","calcChatMediaSearchOffsetId","calcChatMediaSearchAddOffset","setChatMediaSearchLoading","newFoundIdsCount","calcLoadingState","filteredIds","getChatMediaMessageIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","searchChatMedia","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadMoreProfilePhotos","shouldInvalidateCache","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","loadAllStories","loadAllHiddenStories","initFolderManager","listType","whenFirstBatchDone","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","newCurrentChatId","currentChatMessages","selectTopics","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","firstMessageId","topMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","isCommentsInfo","otherChatId","otherThreadId","updateChats","updateUsers","users","loadTopics","shouldCloseChatOnError","threads","updateThread","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isFetchingDifference","addCallback","authState","isMasterTab","sync","reason","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","profilePhotos","selectPeerPhotos","hasChangedPhoto","avatarPhotoId","profilePhoto","fallbackPhoto","personalPhoto","updateUser","statusesById","topPeers","lastRequestedAt","contactList","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","selectUserCommonChats","isFullyLoaded","chatIds","updateUserCommonChats","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","loadPeerStories","closeNewContactDialog","isPreload","isPrivate","updatePeerPhotosIsLoading","userFullInfo","peerFullInfo","photos","updatePeerPhotos","newPhotos","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","emojiStatus","referrerWebAppKey","sendWebAppEvent","webAppKey","event","eventType","eventData","customEmojiIconId","isCloseFriend","customEmojiId","duration","botId","suggestedStatusModal","currentPeerIds","botVerificationShownPeerIds","newPeerIds","BOT_VERIFICATION_PEERS_LIMIT","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","updateWebApp","webAppUpdate","currentTabState","openedWebApps","webApps","originalWebApp","updatedValue","updatedWebAppKey","getWebAppKey","addWebAppToOpenList","webApp","makeActive","openModalIfNotOpen","newOpenedKeys","openedOrderedKeys","newSessionKeys","sessionKeys","activeWebAppKey","isMoreAppsTabActive","isModalOpen","modalState","removeWebAppFromOpenList","skipClosingConfirmation","shouldConfirmClosing","isCloseModalOpen","updatedOpenedWebApps","removingWebAppKey","k","isRemovedAppActive","openedWebAppsKeys","openedWebAppsCount","hasOpenedWebApps","replaceIsWebAppModalOpen","value","runDebouncedForSearch","botFatherId","gameePopups","checkIfOpenOrActivate","requestUrl","webAppName","webAppForCheck","isWepAppOpened","activateWebAppIfOpen","handleUrlAuthResult","urlAuth","domain","bot","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","openUrl","openGame","alert","isError","button","copyTextToClipboard","copyText","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","sender","selectSender","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","topBotApps","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","newResults","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","appName","isFromBotMenu","isFullScreen","getIsWebAppsFullscreenSupported","changeWebAppModalState","state","mode","shouldMarkBotTrusted","markBotTrusted","isWriteAllowed","medias","previewMediaByBotId","isWebAppsCloseConfirmationModalOpen","shouldSkipInFuture","byKey","shouldSkipWebAppCloseConfirmation","startApp","isFromConfirm","shouldSkipBotTrustRequest","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeActiveWebApp","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","actionPayload","name","about","langCode","bio","isBotAccessEmojiGranted","isBotCanManageEmojiStatus","isAccessGranted","updateBotAppPermissions","geolocation","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","errorKey","isSuccess","password","email","recoveryEmail","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","payInputStarInvoice","inputInvoice","price","balance","stars","amount","openStarsBalanceModal","requestInputInvoice","getRequestInputInvoice","isPaymentFormLoading","form","sendStarPaymentForm","directInfo","formId","requestInfo","saveInfo","selectPaymentInputInvoice","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","updatePayment","isPaymentModalOpen","isExtendedMedia","status","starsPayment","gift","shouldHideName","shouldUpgrade","giftId","receipt","openStarsTransactionFromReceipt","setReceipt","payment","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","body","JSON","stringify","descriptionKey","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","requestInfoId","selectPaymentRequestId","paymentState","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","closeInvoice","starPayment","selectStarsPayment","subscriptionInfo","subscriptionFormId","updateStarsPayment","closeStarsPaymentModal","closeGiftModal","loadStarStatus","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","starOptions","giveawayModal","gifts","forUserId","giftModal","forPeerId","starsGiftOptions","starsGiftModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","list","boostList","giftedBoosts","monetizationStatistics","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","slug","giftCodeModal","info","requestConfetti","withStars","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","untilDate","currency","openBoostStatistics","shouldKeepOriginalDetails","upgradeStars","requestSavedGift","getRequestInputSavedStarGift","isWaitingForStarGiftUpgrade","closeGiftUpgradeModal","closeGiftInfoModal","inputSavedGift","recipientId","transferStars","isWaitingForStarGiftTransfer","closeGiftTransferModal","toPeer","openGiftInfoModal","giftWithdrawModal","inputGift","closeGiftWithdrawModal","currentStatus","needsTopupOptions","topupOptions","history","inbound","outbound","subscriptions","appendStarsTransactions","nextHistoryOffset","appendStarsSubscriptions","nextSubscriptionOffset","isInbound","isOutbound","updateStarsBalance","idsByCategoryName","stock","limited","allStarGiftIds","allStarGifts","limitedStarGiftIds","isLimited","stockedStarGiftIds","availabilityRemains","availabilityTotal","starsCategory","starGifts","idsByCategory","shouldRefresh","withTransition","currentGifts","selectPeerSavedGifts","localNextOffset","fetchingFilter","selectGiftProfileFilter","currentFilter","newGifts","savedGifts","transitionKey","replacePeerSavedGifts","updateStarsSubscriptionLoading","isCancelled","subscriptionId","requestInputGift","oldGifts","giftsByPeerId","g","areInputSavedGiftsEqual","isUnsaved","loadPeerSavedGifts","samples","giftUpgradeModal","sampleAttributes","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effect","effectAnimationId","emoticon","availableEffectById","effectReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","paidReactions","regularReactions","trimmedRegularReactions","localReactions","stopActiveReaction","loadSavedReactionTags","newReactions","forcedAmount","paidReaction","resetLocalPaidReactions","localIsPrivate","originReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","scrollTargetPosition","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","updateChannelMonetizationStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","updateVerifyMonetizationModal","closeMonetizationVerificationModal","stories","hasNext","stateHash","isFirstRequest","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","storyIds","lastReadStoryId","profileIds","updatePeerStoriesFullyLoaded","isArchiveFullyLoaded","archiveIds","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","botsPrivacy","updatePeerStoriesHidden","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","hideEffectInComposer","closeStarsBalanceModal","closeStarsTransactionModal","replaceTabThreadParam","shouldPreventComposerAnimation","closeMiddleSearch","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","chatInviteModal","removeActiveWebAppFromOpenList","shouldSkipConfirmation","shouldShowConfirmation","hasOpenedMoreThanOneWebApps","openWebAppsCloseConfirmationModal","webAppsNotAllowedToClose","fromEntries","webAppsNotAllowedToCloseValues","currentActiveWebApp","selectActiveWebApp","newActiveWebApp","newActiveWebAppKey","clearOpenedWebApps","replaceWebAppModalState","miniAppsCachedPosition","size","miniAppsCachedSize","activeWebApp","trustedBotIds","newTrustedBotIds","callbackPayload","selectWebApp","newPlannedEvents","plannedEvents","supportedFilters","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","emojiStatusAccessModal","locationAccessModal","FOCUS_NO_HIGHLIGHT_DURATION","SCROLL_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActionsSlow","canCopy","message1","message2","resultHtml","resultText","senderTitle","getPeerTitle","forwardInfo","hiddenUserName","statefulContent","getMessageStatefulContent","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","lastChatMessage","reverse","isJoinedChannelMessage","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","isAnimatingScroll","cancelScrollBlockingAnimation","groupedMessageIds","selectedMessages","forwardableMessageIds","openForwardMenu","getMediaHash","cancelMessageMediaDownload","mediaHashes","metadata","format","getMediaFormat","filename","getMediaFilename","originChatId","originMessageId","addActiveMediaDownload","canDownload","getMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","paidReactionModal","isSchedule","deleteMessageModal","aboutAdsModal","currentContent","fetchingStatus","GlobalSearchContent","BotApps","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","resetMiddleSearch","updateSharedMediaSearchType","stickerSearch","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","hasLocalId","generateUniqueId","newNotifications","notifications","existingNotificationIndex","n","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","startX","startY","IS_WAVE_TRANSFORM_SUPPORTED","currentLastTime","wave","lastWaveTime","ANIMATION_WAVE_MIN_INTERVAL","shouldCompress","shouldSendGrouped","isInvertedMedia","webPageMediaSize","attachmentSettings","shouldPlayEffectInComposer","currentEffect","requestEffectInComposer","saveEffectInDraft","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","remoteVersion","appVersion","isStrict","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","isTestServer","prefix","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","starsBalanceModal","processOriginStarsPayment","originData","clearPayment","prevFilter","updatedFilter","shouldIncludeUnlimited","shouldIncludeLimited","shouldIncludeUnique","shouldIncludeDisplayed","shouldIncludeHidden","DEFAULT_GIFT_PROFILE_FILTER_OPTIONS","mediaIndex","isAvatarView","isSponsoredMessage","withDynamicLoading","standaloneMedia","mediaViewer","noLockOnUnload","addTabStateResetterAction","onBeforeUnload","isInited","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","originStarsPayment","originGift","topup","sendPaidReaction","sendStarGift","isGiftRecipientPickerOpen","starsGiftingPickerModal","transaction","getPrizeStarsTransactionFromGiveaway","openStarsTransactionModal","shouldIgnoreBalance","starBalance","balanceNeeded","clearStarPayment","icon","getStarsTransactionFromGift","subscription","starsSubscriptionModal","starGift","giftReceiverId","starsToConvert","isNameHidden","isSaved","fromId","isConverted","upgradeMsgId","canUpgrade","alreadyPaidUpgradeStars","giftInfoModal","giftStatusInfoModal","giftTransferModal","reactionPicker","sendAsMessage","isForEffects","updatedResults","localPreviousChosenOrder","chosenOrder","dismissNotification","isSinglePeer","isSingleStory","isArchive","storyList","storyViewer","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerIds","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","monetizationVerificationModal","prevIsForum","lastReadOutboxMessageId","areStoriesHidden","updatedChat","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","addChatListIds","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","replacePinnedTopicIds","isForumAsMessages","photoId","replacePeerPhotos","updateStatusesOnFullyIdle","throttleWithFullyIdle","pendingStatusUpdates","deleteContact","localUser","loadFullUser","targetUserFullInfo","botInfo","menuButton","threadInfos","polls","addUsers","addChats","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","closeWebApp","processPremiumFloodWait","paidReactionPrivacy","requestLangPackDifference","applyLangPackDifference","strings","keysToRemove","actionStarGift","openUniqueGiftBySlug","receiver","variables","getTranslationFn","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","totalAmount","formatCurrencyAsString","subscriptionPricing","subscriptionPeriod","giftModalState","starsModalState","isCompleted","starGiftModalState","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","React","createElement","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","DeleteMessageModal","StickerSetModal","memo","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ArchivedChats","Loading","NewChatButton","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","useOldLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","Fragment","MenuItem","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Icon","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archived","archivedStories","sessions","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","ChatFolders","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","useRef","useLang","ref","shouldRender","shouldRenderStoryRibbon","getIsClosing","getIsStoryRibbonClosing","useShowTransition","withShouldRender","isStoryRibbonClosing","useDerivedState","allChatsFolder","ALL_FOLDER_ID","MEMO_EMPTY_ARRAY","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","renderedTitle","renderedIcon","processTextWithIcon","ApiMessageEntityTypes","CustomEmoji","badgeCount","chatsCount","isBadgeActive","notificationsCount","withCustomEmoticon","handleSwitchTab","useLastCallback","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","digit","addEventListener","removeEventListener","placeholderRef","shouldRenderPlaceholder","noMountTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","StoryRibbon","FoldersList","contextRootElementSelector","tabs","activeTab","onSwitchTab","Transition","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","ConnectionStatusOverlay","Spinner","animationLevel","attachBots","selectTheme","canInstall","LeftSideMenuItems","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSettingOption","updatePerformanceSettings","openChatByUsername","oldLang","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","collectibleStatuses","StatusButton","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","collectibleStatus","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","loopLimit","EMOJI_STATUS_LOOP_LIMIT","withSparkles","StarIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","LeftMainHeader","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","areContactsVisible","LeftColumnContent","Contacts","hasMenu","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchRelevant","GlobalSearch","isSearchFocused","searchInputPlaceholder","versionString","APP_REVISION","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","withStoryToggler","searchContent","PeerChip","canClose","isCloseNonDestructive","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","SearchInput","inputId","resultsItemSelector","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","ShowTransition","isCustom","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","transitionClassNames","updateButtonClassNames","useShowTransitionDeprecated","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","fluid","badge","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChat","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","Folders","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsAllowedContacts","PrivacyGiftsDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","handleSettingsScreenSelect","prevSettingsScreenRef","useStateRef","usePrevious","renderContent","currentScreen","onScreenSelect","isChannel","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","LAYERS_ANIMATION_NAME","withSwipeControl","MediaViewerAsync","MediaViewer","ReactionPicker","MessageListHistoryHandler","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","viewportPinnedIds","lastFocusedId","clampIndex","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","ChatLanguageModal","EmojiInteractionAnimation","ScrollDownButton","ariaLabelLang","onReadAll","isContextMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","onContextMenu","hasActiveMiddleSearch","shouldShowCount","mentionsCount","FloatingActionButtons","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","container","element","margin","styles","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","currentAlbum","dateGroups","originalDate","datetime","getDayStartAt","senderGroups","currentDateGroup","currentSenderGroup","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","isPaidMedia","nextMessage","lastMessageInSenderGroup","nextMessageDayStartsAt","newDateGroup","postAuthorTitle","inlineButtons","selectChatLastMessage","defaultStickers","lastUnreadMessageId","businessIntro","ContactGreeting","loadGreetingStickers","containerRef","randomIndex","handleStickerSelect","StickerView","shouldLoop","chatBot","isLoadingBotInfo","chatBotFullInfo","MessageListBotInfo","isInMessageList","botInfoPhotoUrl","useMedia","getBotCoverMediaHash","botInfoGifUrl","getVideoMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","isBotInfoEmpty","isVerifyCodes","isChatWithVerificationCodesBot","height","style","buildStyle","src","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","Skeleton","forceAspectRatio","renderText","INTERSECTION_THROTTLE_FOR_MEDIA","getSingularPaidMedia","singularMedia","isPreview","AlbumRectPart","None","Top","Bottom","accumulate","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","noAvatars","album","ratios","isSingleMessage","calculateMediaDimensions","getRatios","proportions","ratio","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","resolve","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","isTranslatable","detectedLanguage","occurrences","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","handleBeforeContextMenu","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","getIsMessageListReady","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","requestMeasure","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","handleClick","target","classList","contains","getIsKeyboardVisible","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","EmbeddedStory","noUserColors","observeIntersectionForLoading","isIntersecting","useIsIntersecting","isFullStory","isExpiredStory","isVideoStory","mediaBlobUrl","getStoryMediaHash","mediaThumbnail","dataUri","pictogramUrl","handleFastClick","useFastClick","getPeerColorClass","onMouseDown","srcUrl","getPictogramDimensions","draggable","renderPictogram","TOPIC_ICON_SIZE","TopicChip","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","isClosed","withSelectControl","WrappedComponent","ownProps","noSelectControls","selectIsInSelectMode","isSelected","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloads","selectActiveDownloads","uploadsByKey","Album","observeIntersection","hasCustomAppendix","albumLayout","onMediaClick","cancelUploadMedia","mediaCount","handlePaidMediaClick","handleAlbumMessageClick","handleCancelUpload","containerWidth","containerHeight","renderingPaidMedia","paidPhotoOrPreview","paidVideoOrPreview","getMessagePhoto","fileUpload","uploadProgress","canAutoLoad","selectCanAutoLoadMedia","canAutoPlay","selectCanAutoPlayMedia","shouldAffectAppendix","getMessageHtmlId","onCancelUpload","isDownloading","getIsDownloading","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","startedInteractions","sendInteractionBunch","play","audio","remove","Audio","safePlay","once","performance","interactionMessageId","withEffects","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","noPlay","selectCanPlayAnimatedEmojis","AnimatedCustomEmoji","getCustomEmojiSize","LIKE_STICKER_ID","isBig","withSharedAnimation","selectAnimatedEmoji","AnimatedEmoji","forceLoadPreview","AnimatedIconFromSticker","quality","noLoad","forcePreview","forceAlways","CommentButton","isCustomShape","disabled","shouldRenderLoading","useAsyncRendering","recentReplierIds","originChannelId","isComments","recentRepliers","hasUnread","commentsText","AnimatedCounter","role","Avatar","getContactName","countryList","phoneCodes","phoneCodeList","Contact","openAddContactDialog","isRegistered","canAddContact","getCanAddContact","handleOpenChat","handleAddContact","PeerColorWrapper","emojiIconClassName","formatPhoneNumberWithCode","isText","COLOR","FactCheck","isToggleDisabled","cutoutRef","isCollapsed","isCollapsible","setIsCollapsed","useCollapsibleLines","countryLocalized","countryCode","DisplayNames","of","canExpand","handleExpand","handleToggle","prev","peerColor","renderTextWithEntities","Separator","Game","canAutoLoadMedia","clickBotInlineButton","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","autoPlay","giveaway","channelIds","selectForwardedSender","giftSticker","selectGiftStickerForDuration","months","canPlayAnimatedEmojis","Giveaway","isLoadingInfo","giveawayInfo","setGiveawayInfo","giveawayResults","isResults","isOwnMessage","quantity","winnersCount","hasEnded","translatedNames","isoToEmoji","handlePeerClick","handleShowInfoClick","handleCloseInfo","giveawayInfoTitle","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","PartyPopper","nonInteractive","noLoop","winnerIds","forceShowSelf","withPeerColors","renderGiveawayResultsDescription","formatDateTimeToString","renderGiveawayDescription","ConfirmDialog","isOnlyConfirm","confirmHandler","isResultsInfo","chatTitle","endDate","formatDateAtTime","otherChannelsCount","otherChannelsString","isSeveral","firstKey","giveawayDuration","firstParagraph","additionalPrizes","secondKey","secondParagraph","activatedCount","isRefunded","isWinner","lastParagraph","disallowedCountry","adminDisallowedChatId","disallowedChat","disallowedChatTitle","joinedTooEarlyDate","isParticipating","renderGiveawayInfo","InlineButtons","buttonTexts","texts","renderKeyboardButtonText","j","RE_TME_LINK","renderIcon","Invoice","forcedWidth","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","withBlurredBackground","blurredBackgroundRef","useBlurredMediaThumbRef","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","closest","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","requestMutation","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","formatCurrency","iconClassName","InvoiceMediaPreview","isConnected","loadExtendedMedia","refreshExtendedMedia","useInterval","root","MediaSpoiler","thumbDataUri","isVisible","spoiler","formatMediaDuration","buy","lock","TIMER_CIRCUMFERENCE","TIMER_RADIUS","PI","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","PinSvg","viewBox","cx","cy","d","Location","openMapModal","countdownRef","forceUpdate","useForceUpdate","getMessageLocation","geo","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","setPoint","shouldRenderText","dpr","useDevicePixelRatio","mediaHash","buildStaticMapHash","prevMediaBlobUrl","usePreviousDeprecated","mapBlobUrl","accuracyRadiusPx","accuracyRadius","lat","getMetersPerPixel","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","firstElementChild","timeLeft","strokeDashOffset","formatCountdownShort","textContent","useLayoutEffect","long","pinClassName","heading","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","editDate","transform","renderInfo","path","filterUnits","dy","in","stdDeviation","fill","MessageMeta","outgoingStatus","signature","withReactionOffset","repliesThreadInfo","renderQuickReactionButton","noReplies","isTranslated","withFullDate","effectEmoji","onTranslationClick","onEffectClick","onOpenThread","isActivated","markActivated","handleImportedClick","dateTitle","createDateTime","timeFormat","editDateTime","isEdited","forwardedDateTime","savedDate","viewsTitle","pluralValue","repliesTitle","time","formatTime","formatPastTimeShort","fullClassName","isImported","MessageOutgoingStatus","MessagePhoneCall","requestMasterAndRequestCall","isMissed","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","PaidMediaOverlay","children","isClickable","starsAmount","replaceWithTeact","STARS_ICON_PLACEHOLDER","pill","STARS_CURRENCY_CODE","getPercentage","total","toFixed","PollOption","answer","voteResults","totalVoters","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","isChosen","answerPercent","votersCount","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","Poll","observeIntersectionForPlaying","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","timerCircleRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","recentVoterIds","isCorrect","answers","hidden","quiz","chosen","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","showSolution","solution","solutionEntities","containerSelector","question","getPollTypeString","AvatarList","CheckboxGroup","loadingOptions","isRound","RadioGroup","loadingOption","getReadableVotersCount","Sticker","shouldPlayEffect","withEffect","onStopEffect","openStickerSet","effectRef","hasEffect","isMirrored","getStickerMediaHash","IS_WEBM_SUPPORTED","canLoad","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","shouldRenderEffect","useOverlayPosition","anchorRef","overlayRef","openModal","isMemojiSticker","getStickerDimensions","fullMediaHash","fullMediaClassName","Portal","AnimatedSticker","isLowPriority","onEnded","BaseStory","targetUser","isLoaded","imageHash","thumbUrl","useEnsureStory","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","focusedMessage","loadingThread","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","viaBusinessBotId","isSystemBotChat","isSystemBot","isAnonymousForwards","isAnonymousForwardsChat","webPageStoryData","webPage","webPageStory","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","isThreadTop","replyFrom","storyReplyPeerId","storyReplyId","shouldHideReply","forwardHeader","replyMessageSender","selectSenderFromHeader","replyMessageForwardSender","replyMessageChat","isReplyPrivate","isChatPublic","isReplyToTopicStart","replyStory","storySender","selectUploadProgress","isFocused","selectIsMessageFocused","focusDirection","noFocusHighlight","focusedQuote","middleSearch","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectCanReplyToMessage","downloadableMedia","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","chatTranslations","selectChatTranslations","requestedTranslationLanguage","requestedChatTranslationLanguage","areTranslationsEnabled","canTranslate","hasActiveReactions","senderBoosts","chatLevel","boostLevel","transcribeMinLevel","groupTranscribeLevelMin","canTranscribeVoice","viaBusinessBot","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isRepliesChat","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","hasLinkedChat","linkedChatId","withAnimatedEffects","isLoadingComments","loadingChatId","loadingMessageId","shouldWarnAboutSvg","selectOutgoingStatus","Message","observeIntersectionForBottom","noComments","appearanceOrder","isJustAdded","isLastInGroup","isFirstInDocumentGroup","isLastInList","memoFirstUnreadIdRef","onIntersectPinnedMessage","animateUnreadReaction","markMentionsRead","bottomMarkerRef","isTranscriptionHidden","setTranscriptionHidden","isPlayingSnapAnimation","setIsPlayingSnapAnimation","isPlayingDeleteAnimation","setIsPlayingDeleteAnimation","requestEffect","isTouchScreen","useOnIntersect","contextMenuAnchor","contextMenuTarget","noAppearanceAnimation","markShown","useUnmountCleanup","viewportPinnedIdsToRemove","hasMessageReply","isReplyToMessage","paidMediaPhoto","paidMediaVideo","withVoiceTranscription","hasStoryReply","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","asForwarded","isLinkedChannelPost","isMention","canShowSenderBoosts","isStoryMention","isRoundVideo","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasFactCheck","hasForwardedCustomShape","hasSubheader","messageSender","avatarPeer","messageColorPeer","senderPeer","hasTtl","hasMessageTtl","handleSenderClick","handleViaBotClick","handleReplyClick","handleMediaClick","handleAudioPlay","handleAlbumMediaClick","handlePhotoMediaClick","handleVideoMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","handleStoryClick","isTranslatingChat","isSavedMessages","openMediaViewer","openAudioPlayer","sendPollVote","openChatLanguageModal","searchChatMediaMessages","isQuote","channelPostId","MediaViewerOrigin","ScheduledInline","Inline","openMediaViewerWithPhotoOrVideo","isGif","albumMessageId","albumIndex","ScheduledAlbum","originalChatId","savedFromPeerId","selectWithGroupedId","useInnerHandlers","handleEffectClick","isPartialAlbumDelete","animateSnap","textMessage","hasTextContent","hasMessageText","hasText","containerClassName","getIsReady","setLanguage","threshold","promise","args","detectLanguage","useTextLanguage","LimitedMap","previousMetadata","processMessageMetadata","useDetectChatLanguage","shouldTranslate","isMessageTranslatable","isTranslationPending","translatedText","useMessageTranslation","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","hasOutsideReactions","contentClassName","hasCommentCounter","hasCommentButton","hasActionButton","isGeoLiveActive","peerColorClass","isInvertibleMedia","classNames","MESSAGE_CONTENT_CLASS_NAME","isMediaWithNoText","hasInlineKeyboard","isViaBot","hasFooter","emojiOnlyCount","EMOJI_SIZES","buildContentClassName","withAppendix","emojiSize","metaPosition","reactionsPosition","quickReactionPosition","useEnsureMessage","useFocusMessage","viaBusinessBotTitle","canShowPostAuthor","useMessageResizeObserver","bottomMarker","isElementInViewport","extraPadding","sizeCalculations","calculatedWidth","contentWidth","reactionsMaxWidth","noMediaCorners","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","isForAnimation","MessageText","messageOrStory","withTranslucentThumbs","canBeEmpty","ReactionStaticEmoji","renderReactionsAndMeta","meta","Reactions","metaChildren","noRecentReactors","renderWebPage","WebPage","backgroundEmojiId","onAudioPlay","onCancelMediaTransfer","renderInvertibleMediaContent","messageText","shouldRenderSenderName","renderForwardTitle","renderSenderName","shouldSkipRenderForwardTitle","shouldSkipRenderAdminTitle","senderEmojiStatus","senderIsPremium","shouldRenderForwardAvatar","hasBotSenderUsername","senderColor","fakeType","FakeIcon","customTitle","forwardAuthor","onCopy","onDoubleClick","onMouseMove","textContentClass","shouldReadMedia","EmbeddedMessage","senderChat","forwardSender","MessageEffect","shouldPlay","onStop","RoundVideo","onReadMedia","onHideTranscription","isTranscribed","canTranscribe","AudioOrigin","isSelectable","onPlay","Document","Story","StoryMention","DotAnimation","footerClass","hasContentAfterText","isMetaInText","renderInvertedMediaContent","MessageAppendix","isOutside","ContextMenuContainer","anchor","targetHref","SenderGroupContainer","handleAvatarClick","hiddenName","renderAvatar","SponsoredMessageContextMenuContainer","SponsoredMessage","viewSponsoredMessage","hideSponsoredMessages","clickSponsoredMessage","openAboutAdsModal","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","handleHideSponsoredMessage","hasMedia","handleOpenMedia","handleOpenAboutAdsModal","renderMediaContent","isRecommended","BadgeButton","isRectangular","canReport","triggerRef","MessageListContent","canShowAds","messageGroups","getContainerHeight","isViewportNewest","isEmptyThread","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isReady","shouldRenderBotInfo","onScrollDownToggle","onNotchToggle","openHistoryCalendar","getIsHeavyAnimating2","getIsHeavyAnimating","useDerivedSignal","areDatesClickable","observeIntersectionForReading","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","entry","dataset","shouldUpdateViews","albumMainId","useBackgroundMode","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","fabTrigger","offsetHeight","scrollHeight","scrollTop","fabOffsetTop","offsetTop","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","ActionMessage","isInsideTopic","currentDocumentGroupId","senderGroupElements","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","isTopicTopMessage","originalId","getMessageOriginalId","lastMessageOrAlbum","firstMessageOrAlbum","firstMessage","calculateSenderGroups","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","patternColor","themes","userName","handleOpenPremiumModal","Unlock","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isChannelWithAvatars","areProfilesShown","isCreator","isBot","isSelectModeActive","channelJoinInfo","joinInfo","noMessageSendingAnimation","isServiceNotificationsChat","MessageList","withBottomShift","withDefaultBg","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","loadFactChecks","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","handleCopy","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","prevMessage","shouldAppendJoinMessage","shouldAppendJoinMessageAfterCurrent","joinedDate","generateChannelJoinMessageId","translationValues","targetChatId","orderRule","orderBy","storyDataList","storiesByPeerIds","shouldFetch","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","computedStyle","getComputedStyle","headerActionsHeight","parseInt","getPropertyValue","top","findStuckDate","currentStuck","useStickyDates","handleScroll","shouldCancelWaiting","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","handleResize","contentRect","useResizeObserver","currentNormalHeight","normalHeight","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","requestForcedReflow","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","forceDuration","isResized","newScrollTop","newAnchorTop","getOffsetToContainer","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","beginHeavyAnimation","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","PremiumRequiredMessage","backgroundColor","MessageSelectToolbar","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","AudioPlayer","noUi","isFullWidth","onPaneStateChange","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","renderingMessage","useCurrentOrPrev","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","getMessageMediaHash","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","shouldForceOpen","useHeaderPane","onStateChange","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","volumeIcon","renderAudio","renderVoice","RippleEffect","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","customIcon","renderPlaybackRateMenuItem","drawRect","radius","PinnedMessageNavigation","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","currentElement","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","HeaderPinnedMessage","getLoadingPinnedId","getCurrentPinnedIndex","shouldHide","onFocusPinnedMessage","pinMessage","loadPinnedMessages","currentPinnedIndex","isArray","pinnedMessage","pinnedMessagesCount","pinnedMessageNumber","topMessageTitle","getMessageVideo","isVideoThumbnail","previewPhotoSizes","useThumbnail","isSpoiler","getMessageIsSpoiler","shouldShowLoader","renderingPinnedMessage","noOpenTransition","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","handleAllPinnedClick","handleMessageClick","nextMessageId","cycleRestrict","noHoverColor","markNoHoverColor","unmarkNoHoverColor","confirmLabel","isFullVideo","asSpoiler","shouldRenderVideo","MessageSummary","truncateLength","noEmoji","shouldStopPropagation","audioMessage","emojiStatusSticker","emojiStatusSlug","isRightColumnShown","currentTransitionKey","MiddleHeader","openThreadWithInfo","openPreviousChat","toggleLeftColumn","isBackButtonActive","isTablet","useWindowSize","isDesktop","isLeftColumnHideable","shouldShowCloseButton","componentRef","handleOpenSearch","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","prevTransitionKey","isAudioPlayerActive","isAudioPlayerRendering","isPinnedMessagesFullWidth","renderBackButton","asClose","withUnreadCounter","savedMessagesStatus","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","emojiStatusSize","noRtl","onEmojiStatusClick","GroupChatInfo","renderChatInfo","HeaderActions","canExpandActions","sponsoredMessage","BotAdPane","renderingSponsoredMessage","withResizeObserver","handleAboutClick","getApiPeerColorClass","selectPeerFullInfo","botVerification","wasShown","BotVerificationPane","markBotVerificationInfoShown","markAsShowed","iconId","ChatReportPane","isAutoArchived","canReportSpam","canBlockContact","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPane","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","renderingPeer","isBasicGroup","isChatBasicGroup","renderingCanAddContact","renderingCanBlockContact","renderingCanReportSpam","renderingIsAutoArchived","handleConfirmBlock","handleCloseReportPane","handleChatReportSpam","isRendering","confirmIsDestructive","Checkbox","onCheck","FALLBACK_PANE_STATE","isMiddleSearchOpen","isAudioPlayerRendered","MiddleHeaderPanes","getAudioPlayerState","setAudioPlayerState","getPinnedState","setPinnedState","getGroupCallState","setGroupCallState","getChatReportState","setChatReportState","getBotAdState","setBotAdState","getBotVerificationState","setBotVerificationState","isFirstRenderRef","useEffectOnce","audioPlayerState","botVerificationState","pinnedState","stateArray","isFirstRender","middleColumn","applyAnimationState","setExtraStyles","GroupCallTopPane","Link","isPrimary","ReactorListModal","MiddleSearch","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isMainThread","canSubscribe","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","selectIsUserBlocked","canRestartBot","canStartBot","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","GENERAL_TOPIC_ID","canShowOpenChatButton","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","dropAreaState","setDropAreaState","DropAreaState","isScrollDownNeeded","setIsScrollDownShown","isScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","handleIntersectPinnedMessage","handleFocusPinnedMessage","getPinnedIndexByKey","setPinnedIndexByKey","setLoadingPinnedId","pinnedLength","loadingPinnedId","newPinnedIndex","focusedMessageId","pinnedIndexAboveFocused","maxViewportPinnedId","isMessageLoaded","currentIndex","usePinnedMessage","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingHandleIntersectPinnedMessage","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","offsetWidth","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","IS_SAFARI","kind","isImage","QuickFile","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onDragEnter","isBlockingAnimation","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","onUnpin","teactOrderKey","MODALS","modal","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","ReportModal","WebAppModal","CollectibleInfoModal","MapModal","StarPaymentModal","Stars","StarsBalanceModal","starsTransactionModal","StarsTransactionModal","ChatInviteModal","PaidReactionModal","StarsSubscriptionModal","StarsGiftModal","GiftModal","GiftRecipientPicker","WebAppsCloseConfirmationModal","GiftInfoModal","SuggestedStatusModal","EmojiStatusAccessModal","LocationAccessModal","AboutAdsModal","GiftUpgradeModal","VerificationMonetizationModal","GiftWithdrawModal","GiftStatusInfoModal","GiftTransferModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","usersById","filterPeersByQuery","sortChatIds","canBeInvitedToGroup","handleNextStep","PeerPicker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","withDefaultPadding","noScrollRestore","allowMultiple","withStatus","itemInputType","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","GiftList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","fromPeer","SavedGift","handleOnIntersect","CUSTOM_PEER_HIDDEN","getStickerFromGift","radialPatternBackdrop","backdrop","pattern","getGiftAttributes","backdropColors","centerColor","edgeColor","RadialPatternBackground","backgroundColors","patternIcon","totalIssued","getTotalGiftAvailability","GiftRibbon","PreviewMedia","idPrefix","getMessageMediaThumbDataUri","useMediaTransitionDeprecated","decoding","maxPinnedStoriesCount","isOut","pinnedStories","pinnedStory","canPin","loadPeerSkippedStories","toggleStoryInProfile","toggleStoryPinnedToTop","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","isDense","preventMessageInputBlurWithBubbling","handleUnarchiveClick","handleArchiveClick","handleTogglePinned","MediaAreaOverlay","TABS","mediaSearchType","isTopicInfo","chatsById","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","similarBotsIds","selectSimilarBotsIds","hasCommonChatsTab","commonChatsCount","hasPreviewMediaTab","hasPreviewMedia","botPreviewMedia","hasStoriesTab","hasPinnedStories","pinnedStoryIds","storyByIds","archiveStoryIds","hasGiftsTab","starGiftCount","peerGifts","giftsTransitionKey","isNotDefaultGiftFilter","selectIsGiftProfileFilterDefault","similarChannels","similarBots","limitSimilarPeers","commonChatIds","Profile","profileState","onProfileStateChange","setSharedMediaSearchType","loadMoreMembers","loadCommonChats","searchSharedMediaMessages","setNewChatMembersDialogState","loadPeerProfileStories","loadStoriesArchive","loadChannelRecommendations","loadBotRecommendations","loadPreviewMedias","resetGiftProfileFilter","deletingUserId","setDeletingUserId","profileId","tab","initialTab","allowAutoScrollToTabs","startAutoScrollToTabsIfNeeded","stopAutoScrollToTabs","setActiveTab","giftIds","renderingActiveTab","handleLoadCommonChats","handleLoadPeerStories","handleLoadStoriesArchive","handleLoadGifts","resultType","noProfileInfo","searchMessages","loadStories","loadMoreGifts","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","handleStopAutoScrollToTabs","prevTabType","tabsEl","prevProfileState","tabListEl","maxDistance","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","newHeight","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handleSelectPreviewMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","prevHasMemberTabs","newActiveTab","handleResetGiftsFilter","renderingDelay","SLIDE_TRANSITION_DURATION","canRenderContent","noSpinner","forceRenderHiddenMembers","NothingFound","SearchingDuck","Media","MediaStory","getMessageDocument","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","avatarSize","withNodes","withMarkdown","shouldUseTransitionForContent","contentTransitionKey","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","TabList","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","canEditBot","canManage","selectCanManage","isEditingInvite","canViewStatistics","giftProfileFilter","canUseGiftFilter","selectCanUseGiftProfileFilter","canUseGiftAdminFilter","selectCanUseGiftProfileAdminFilter","RightHeader","isColumnOpen","isStatistics","isMessageStatistics","isStoryStatistics","isMonetizationStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","updateGiftProfileFilter","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","sortType","giftsSortType","shouldIncludeUnlimitedGifts","shouldIncludeLimitedGifts","shouldIncludeUniqueGifts","shouldIncludeDisplayedGifts","shouldIncludeHiddenGifts","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","MonetizationStatistics","renderingContentKey","PrimaryLinkMenuButton","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","MenuSeparator","renderHeaderContent","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","CUSTOM_PEER_STAR_TEMPLATE","isCustomPeer","avatarIcon","peerColorId","CUSTOM_PEER_TO_BE_DISTRIBUTED","titleKey","withPremiumGradient","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","customPeer","expires","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","isStarsGiveaway","GiftStar","giveawayIcon","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","AboutMonetizationModal","lovelyChartPromise","LovelyChart","MONETIZATION_GRAPHS_TITLES","topHoursGraph","revenueGraph","MONETIZATION_GRAPHS","monetization","isChannelRevenueWithdrawalEnabled","loadChannelMonetizationStatistics","openMonetizationVerificationModal","loadedCharts","isAboutMonetizationModalOpen","openAboutMonetizationModal","closeAboutMonetizationModal","isConfirmPasswordDialogOpen","openConfirmPasswordDialogOpen","closeConfirmPasswordDialogOpen","availableBalance","balances","isWithdrawalEnabled","canWithdraw","ensureLovelyChart","child","graph","create","topText","linkText","rewardsText","SafeLink","verificationMonetizationHandler","ready","isToncoin","textBottom","integerTonPart","decimalTonPart","integerUsdPart","decimalUsdPart","usdRate","availableReward","toncoin","toncoinIcon","rewardValue","decimalPart","integer","renderAvailableReward","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","closeMonetizationStatistics","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","prevChatId","prevThreadId","StoryViewerAsync","StoryViewer","AttachBotRecipientPicker","BotTrustModal","DeleteFolderDialog","DialogsAsync","Dialogs","processedHashes","downloadedHashes","DownloadManager","cancelMediaHashDownloads","handleMediaDownloaded","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","handleProgress","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","GameModal","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","NotificationsAsync","PremiumLimitReachedModal","GiveawayModal","PremiumMainModal","StarsGiftingPickerModal","SafeLinkModal","CONFETTI_COLORS","STAR_PATH","Path2D","ConfettiContainer","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","left","generateConfetti","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","scale","rotate","restore","beginPath","ellipse","prevConfettiTime","hideTimeout","leftSide","randomX","FILTER_ID","waveInfo","WaveContainer","waves","setWaves","addWave","newWave","prevWaves","overlaySize","startTime","waveWidth","addSvgDefinition","xmlns","SVG_NAMESPACE","waveRipple","in2","xChannelSelector","yChannelSelector","removeSvgDefinition","onAnimationEnd","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isDeleteMessageModalOpen","isStarsGiftingPickerModal","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadRestrictedEmojiStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadStarGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","clearReceipt","checkAppVersion","loadUserCollectibleStatuses","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPeerColors","loadTimezones","loadQuickReplies","loadAvailableEffects","loadTopBotApps","loadPaidReactionPrivacy","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","noCloseTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","endHeavyAnimation","waitForTransitionEnd","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","handleBlur","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","ModalContainer","stickerSetShortName","SnapEffectContainer","UnreadCount","passcodeSettings","LockScreen","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","IS_MULTITAB_SUPPORTED","settingValue","setThemeSettings","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Blob","blob","createObjectURL","preloadImage","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","useVerticalScroll","shouldPreventDefault","deltaY","deltaX","passive"],"sourceRoot":""}