{"version":3,"file":"6930.3e485d5dc6874282c0b6.js","mappings":"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","sources":["webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.module.scss?069e","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.module.scss?3156","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.module.scss?bbd4","webpack://telegram-t/./src/components/modals/stars/BalanceBlock.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionItem.module.scss?74b5","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionItem.tsx","webpack://telegram-t/./src/components/modals/stars/helpers/transaction.ts","webpack://telegram-t/./src/components/modals/stars/transaction/PaidMediaThumb.module.scss?605d","webpack://telegram-t/./src/components/modals/stars/transaction/PaidMediaThumb.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionItem.module.scss?b947","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionItem.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.tsx","webpack://telegram-t/./src/util/localization/format.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.tsx","webpack://telegram-t/./src/components/modals/gift/UniqueGiftHeader.module.scss?2bf6","webpack://telegram-t/./src/components/modals/gift/UniqueGiftHeader.tsx","webpack://telegram-t/./src/hooks/animations/useTransitionActiveKey.ts","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.module.scss?a215","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.module.scss?5025","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.tsx","webpack://telegram-t/./src/components/modals/paidReaction/StarSlider.module.scss?b8f3","webpack://telegram-t/./src/components/modals/paidReaction/StarSlider.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.module.scss?80b2","webpack://telegram-t/./src/components/modals/gift/GiftComposer.module.scss?dac8","webpack://telegram-t/./src/components/modals/gift/GiftComposer.tsx","webpack://telegram-t/./src/components/modals/gift/GiftItem.module.scss?c564","webpack://telegram-t/./src/components/modals/gift/GiftItemPremium.tsx","webpack://telegram-t/./src/components/modals/gift/GiftItemStar.tsx","webpack://telegram-t/./src/components/modals/gift/StarGiftCategoryList.module.scss?7d19","webpack://telegram-t/./src/components/modals/gift/StarGiftCategoryList.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.module.scss?fd13","webpack://telegram-t/./src/components/modals/gift/GiftModal.tsx","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.module.scss?b7e9","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.tsx","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.module.scss?4f0e","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.tsx","webpack://telegram-t/./src/components/modals/gift/upgrade/GiftUpgradeModal.module.scss?ae9e","webpack://telegram-t/./src/components/modals/gift/upgrade/GiftUpgradeModal.tsx","webpack://telegram-t/./src/components/modals/gift/status/GiftStatusInfoModal.module.scss?3366","webpack://telegram-t/./src/components/modals/gift/status/GiftStatusInfoModal.tsx","webpack://telegram-t/./src/components/modals/gift/withdraw/GiftWithdrawModal.module.scss?287b","webpack://telegram-t/./src/components/modals/gift/withdraw/GiftWithdrawModal.tsx","webpack://telegram-t/./src/hooks/useDebouncedMemo.ts","webpack://telegram-t/./src/hooks/usePeerSearch.ts","webpack://telegram-t/./src/components/modals/gift/transfer/GiftTransferModal.module.scss?be1f","webpack://telegram-t/./src/components/modals/gift/transfer/GiftTransferModal.tsx","webpack://telegram-t/./src/components/common/BadgeButton.module.scss?da7b","webpack://telegram-t/./src/components/common/BadgeButton.tsx","webpack://telegram-t/./src/components/common/PeerBadge.module.scss?732c","webpack://telegram-t/./src/components/common/PeerBadge.tsx","webpack://telegram-t/./src/components/common/pickers/PickerModal.tsx","webpack://telegram-t/./src/components/common/pickers/PickerModal.module.scss?7af2","webpack://telegram-t/./src/components/modals/common/TableAboutModal.module.scss?0459","webpack://telegram-t/./src/components/modals/common/TableAboutModal.tsx","webpack://telegram-t/./src/components/modals/common/TableInfoModal.module.scss?4f33","webpack://telegram-t/./src/components/modals/common/TableInfoModal.tsx","webpack://telegram-t/./src/components/modals/stars/StarTopupOptionList.module.scss?22c9","webpack://telegram-t/./src/components/modals/stars/StarTopupOptionList.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"MFXAwnxJ\",\"content\":\"Sl6xVf1R\",\"main\":\"bTN9Jeph\",\"headerInfo\":\"c6MiyJgW\",\"logo\":\"StGLWvzb\",\"logoBackground\":\"SyTXSfml\",\"description\":\"kFe3mIZo\",\"section\":\"BgfHkWd2\",\"header\":\"zMtAGfXs\",\"starHeaderText\":\"q3v8orGj\",\"hiddenHeader\":\"bq3FnXT0\",\"closeButton\":\"bDsDTkbe\",\"avatar\":\"jK36xUj4\",\"center\":\"v1PckUQn\",\"secondaryInfo\":\"TDWSRfP9\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type {\n  ApiStarTopupOption, ApiUser,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { getPeerTitle } from '../../../../global/helpers';\nimport {\n  selectUser,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatCurrencyAsString } from '../../../../util/formatCurrency';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport StarTopupOptionList from '../StarTopupOptionList';\n\nimport styles from './StarsGiftModal.module.scss';\n\nimport StarLogo from '../../../../assets/icons/StarLogo.svg';\nimport StarsBackground from '../../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsGiftModal'];\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\nconst AVATAR_SIZE = 100;\n\nconst StarsGiftModal: FC<OwnProps & StateProps> = ({\n  modal,\n  user,\n}) => {\n  const {\n    closeStarsGiftModal, openInvoice, requestConfetti,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n\n  const isOpen = Boolean(modal?.isOpen);\n\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const oldLang = useOldLang();\n\n  const [selectedOption, setSelectedOption] = useState<ApiStarTopupOption | undefined>();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n    }\n  }, [isOpen]);\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n        withStars: true,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (renderingModal?.isCompleted) {\n      showConfetti();\n    }\n  }, [renderingModal, showConfetti]);\n\n  const handleClick = useLastCallback((option: ApiStarTopupOption) => {\n    if (!renderingModal) return;\n\n    setSelectedOption(option);\n    if (user) {\n      openInvoice({\n        type: 'starsgift',\n        userId: user.id,\n        stars: option.stars,\n        currency: option.currency,\n        amount: option.amount,\n      });\n    } else {\n      openInvoice({\n        type: 'stars',\n        stars: option.stars,\n        currency: option.currency,\n        amount: option.amount,\n      });\n    }\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleClose = useLastCallback(() => {\n    closeStarsGiftModal();\n  });\n\n  function renderGiftTitle() {\n    if (renderingModal?.isCompleted) {\n      return user ? renderText(oldLang('Notification.StarsGift.SentYou',\n        formatCurrencyAsString(selectedOption!.amount, selectedOption!.currency, oldLang.code)), ['simple_markdown'])\n        : renderText(oldLang('StarsAcquiredInfo', selectedOption?.stars), ['simple_markdown']);\n    }\n\n    return user ? oldLang('GiftStarsTitle') : oldLang('Star.List.GetStars');\n  }\n\n  const bottomText = useMemo(() => {\n    const text = oldLang('lng_credits_summary_options_about');\n    const parts = text.split('{link}');\n    return [\n      parts[0],\n      <SafeLink\n        url={oldLang('StarsTOSLink')}\n        text={oldLang('lng_credits_summary_options_about_link')}\n      />,\n      parts[1],\n    ];\n  }, [oldLang]);\n\n  return (\n    <Modal\n      className={buildClassName(styles.modalDialog)}\n      contentClassName={styles.content}\n      dialogRef={dialogRef}\n      isSlim\n      onClose={handleClose}\n      isOpen={isOpen}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeStarsGiftModal()}\n          ariaLabel={oldLang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.starHeaderText}>\n            {user ? oldLang('GiftStarsTitle') : oldLang('Star.List.GetStars')}\n          </h2>\n        </div>\n        <div className={styles.headerInfo}>\n          {user ? (\n            <>\n              <Avatar\n                size={AVATAR_SIZE}\n                peer={user}\n                className={styles.avatar}\n              />\n              <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n            </>\n          ) : (\n            <>\n              <img className={styles.logo} src={StarLogo} alt=\"\" draggable={false} />\n              <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n            </>\n          )}\n        </div>\n        <h2 className={buildClassName(styles.headerText, styles.center)}>\n          {renderGiftTitle()}\n        </h2>\n        <p className={styles.description}>\n          {user ? renderText(\n            oldLang('ActionGiftStarsSubtitle', getPeerTitle(oldLang, user)), ['simple_markdown'],\n          ) : oldLang('Stars.Purchase.GetStarsInfo')}\n        </p>\n        <div className={styles.section}>\n          <StarTopupOptionList\n            options={renderingModal?.starsGiftOptions}\n            onClick={handleClick}\n          />\n          <div className={styles.secondaryInfo}>\n            {bottomText}\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal }): StateProps => {\n  const user = modal?.forUserId ? selectUser(getGlobal(), modal.forUserId) : undefined;\n\n  return {\n    user,\n  };\n})(StarsGiftModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"s3k01dTm\",\"transition\":\"BNA0_b5j\",\"main\":\"Oadi16vt\",\"filter\":\"z84KbvhX\",\"title\":\"Jnsrau29\",\"buttons\":\"NnVyYB32\",\"picker\":\"cuI2eDIY\",\"avatars\":\"ILtw_aNL\",\"center\":\"eIfMzHv5\",\"description\":\"FlNJWZ5P\",\"premiumFeatures\":\"xIv0Yaur\",\"options\":\"eNJRXn6P\",\"button\":\"KDNKXBp5\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  isDeletedUser, isUserBot,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\n\nimport styles from './StarsGiftingPickerModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  userIds?: string[];\n  activeListIds?: string[];\n  archivedListIds?: string[];\n}\n\nconst StarsGiftingPickerModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  activeListIds,\n  archivedListIds,\n  userIds,\n}) => {\n  const { closeStarsGiftingPickerModal, openStarsGiftModal } = getActions();\n\n  const oldLang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedUserIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const combinedIds = unique([\n      ...(userIds || []),\n      ...(activeListIds || []),\n      ...(archivedListIds || []),\n    ]);\n\n    const filteredUserIds = filterPeersByQuery({\n      ids: combinedIds, query: searchQuery, type: 'user',\n    });\n\n    return sortChatIds(filteredUserIds.filter((id) => {\n      const user = usersById[id];\n\n      if (!user) {\n        return false;\n      }\n\n      return !user.isSupport\n        && !isUserBot(user) && !isDeletedUser(user)\n        && id !== currentUserId && id !== SERVICE_NOTIFICATIONS_USER_ID;\n    }));\n  }, [currentUserId, searchQuery, userIds, activeListIds, archivedListIds]);\n\n  const handleSelectedUserIdsChange = useLastCallback((newSelectedId?: string) => {\n    if (newSelectedId?.length) {\n      openStarsGiftModal({ forUserId: newSelectedId });\n      closeStarsGiftingPickerModal();\n    }\n  });\n\n  return (\n    <PickerModal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={closeStarsGiftingPickerModal}\n      title={oldLang('GiftStarsTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={oldLang('Continue')}\n      onEnter={closeStarsGiftingPickerModal}\n    >\n      <PeerPicker\n        className={styles.picker}\n        itemIds={displayedUserIds}\n        filterValue={searchQuery}\n        filterPlaceholder={oldLang('Search')}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        onSelectedIdChange={handleSelectedUserIdsChange}\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    chats: {\n      listIds,\n    },\n    currentUserId,\n  } = global;\n\n  return {\n    userIds: global.contactList?.userIds,\n    activeListIds: listIds.active,\n    archivedListIds: listIds.archived,\n    currentUserId,\n  };\n})(StarsGiftingPickerModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TtE8LQNJ\",\"minimal\":\"nkV4JXHc\",\"transition\":\"nXQS4E59\",\"main\":\"JuWZY1ds\",\"container\":\"mnhBs1uK\",\"section\":\"lYkNd_gb\",\"sectionTitle\":\"FF8gm7MP\",\"tos\":\"Vu6blJk9\",\"logo\":\"sjhpNB8l\",\"logoBackground\":\"jjESKN3H\",\"headerHext\":\"xbpAOr37\",\"description\":\"teXilLxe\",\"header\":\"fnhXotO2\",\"starHeaderText\":\"iUwego5s\",\"botItem\":\"AhxcrKWn\",\"hiddenHeader\":\"DZk6d6hF\",\"closeButton\":\"piD1PXHW\",\"balance\":\"LitvQduT\",\"smallerText\":\"rUnPcfmE\",\"balanceBottom\":\"F5BTkZ9G\",\"modalBalance\":\"t8tMrx3y\",\"starButton\":\"oOt4VBD2\",\"paymentContent\":\"OReEUNTV\",\"paymentImages\":\"oKorQYTC\",\"paymentPhoto\":\"HGTrEtUF\",\"avatarStar\":\"Wu10dXoa\",\"paymentImageBackground\":\"os8jb_qv\",\"paymentButton\":\"VzR5cibf\",\"paymentButtonStar\":\"Uhg7yWxK\",\"transactions\":\"Qvc0fTTH\",\"subscriptions\":\"IX5BhCUF\",\"tabs\":\"KZVEyKOX\",\"disclaimer\":\"bpVifdwH\",\"amountBadge\":\"BPM7LKwo\",\"loadMore\":\"TKmZjMyd\",\"loadMoreIcon\":\"buepwtN1\"};","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiStarsAmount } from '../../../api/types';\n\nimport { formatStarsAmount } from '../../../global/helpers/payments';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\n\nimport styles from './StarsBalanceModal.module.scss';\n\ntype OwnProps = {\n  balance?: ApiStarsAmount;\n  className?: string;\n};\n\nconst BalanceBlock = ({ balance, className }: OwnProps) => {\n  const lang = useLang();\n\n  return (\n    <div className={buildClassName(styles.balance, className)}>\n      <span className={styles.smallerText}>{lang('StarsBalance')}</span>\n      <div className={styles.balanceBottom}>\n        <StarIcon type=\"gold\" size=\"middle\" />\n        {balance !== undefined ? formatStarsAmount(lang, balance) : '…'}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(BalanceBlock);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZXnbeQxP\",\"info\":\"zLaaDX3c\",\"status\":\"HbF2qTB2\",\"statusPricing\":\"AveGvpdV\",\"amount\":\"_CBiOQcv\",\"title\":\"k9ZIv5Pd\",\"description\":\"FlRlxMx2\",\"subtitle\":\"YN2J8dw6\",\"statusPeriod\":\"MRrP7Oew\",\"statusEnded\":\"pRHwfr8m\",\"preview\":\"t6Syyhzd\",\"subscriptionStar\":\"ftlbevPm\"};","import React, { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiStarsSubscription,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\n\nimport { getPeerTitle } from '../../../../global/helpers';\nimport { selectPeer } from '../../../../global/selectors';\nimport { formatDateToString } from '../../../../util/dates/dateFormat';\nimport { formatInteger } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\n\nimport styles from './StarsSubscriptionItem.module.scss';\n\ntype OwnProps = {\n  subscription: ApiStarsSubscription;\n};\n\nfunction selectProvidedPeer(peerId: string) {\n  return (global: GlobalState) => (\n    selectPeer(global, peerId)\n  );\n}\n\nconst StarsSubscriptionItem = ({ subscription }: OwnProps) => {\n  const { openStarsSubscriptionModal } = getActions();\n  const {\n    peerId, pricing, until, isCancelled, title, photo,\n  } = subscription;\n  const lang = useOldLang();\n\n  const peer = useSelector(selectProvidedPeer(peerId))!;\n\n  const handleClick = useLastCallback(() => {\n    openStarsSubscriptionModal({ subscription });\n  });\n\n  if (!peer) {\n    return undefined;\n  }\n\n  const hasExpired = until < Date.now() / 1000;\n  const formattedDate = formatDateToString(until * 1000, lang.code, true, 'long');\n\n  return (\n    <div className={styles.root} onClick={handleClick}>\n      <div className={styles.preview}>\n        <Avatar size=\"medium\" peer={peer} />\n        <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"small\" />\n      </div>\n      <div className={styles.info}>\n        <h3 className={styles.title}>{renderText(getPeerTitle(lang, peer) || '')}</h3>\n        {title && (\n          <p className={styles.subtitle}>\n            {photo && <Avatar webPhoto={photo} size=\"micro\" />}\n            {renderText(title)}\n          </p>\n        )}\n        <p className={styles.description}>\n          {lang(\n            hasExpired ? 'StarsSubscriptionExpired'\n              : isCancelled ? 'StarsSubscriptionExpires' : 'StarsSubscriptionRenews',\n            formattedDate,\n          )}\n        </p>\n      </div>\n      <div className={styles.status}>\n        {(isCancelled || hasExpired) ? (\n          <div className={styles.statusEnded}>\n            {lang(hasExpired ? 'StarsSubscriptionStatusExpired' : 'StarsSubscriptionStatusCancelled')}\n          </div>\n        ) : (\n          <>\n            <div className={styles.statusPricing}>\n              <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />\n              <span className={styles.amount}>\n                {formatInteger(pricing.amount)}\n              </span>\n            </div>\n            <div className={styles.statusPeriod}>{lang('StarsParticipantSubscriptionPerMonth')}</div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StarsSubscriptionItem);\n","import type { ApiStarsAmount, ApiStarsTransaction } from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\n\nimport { buildStarsTransactionCustomPeer } from '../../../../global/helpers/payments';\nimport { formatPercent } from '../../../../util/textFormat';\n\nexport function getTransactionTitle(lang: OldLangFn, transaction: ApiStarsTransaction) {\n  if (transaction.starRefCommision) {\n    return lang('StarTransactionCommission', formatPercent(transaction.starRefCommision));\n  }\n  if (transaction.isGiftUpgrade) return lang('Gift2TransactionUpgraded');\n  if (transaction.extendedMedia) return lang('StarMediaPurchase');\n  if (transaction.subscriptionPeriod) return transaction.title || lang('StarSubscriptionPurchase');\n  if (transaction.isReaction) return lang('StarsReactionsSent');\n  if (transaction.giveawayPostId) return lang('StarsGiveawayPrizeReceived');\n  if (transaction.isMyGift) return lang('StarsGiftSent');\n  if (transaction.isGift) return lang('StarsGiftReceived');\n  if (transaction.starGift) {\n    return isNegativeStarsAmount(transaction.stars) ? lang('Gift2TransactionSent') : lang('Gift2ConvertedTitle');\n  }\n\n  const customPeer = (transaction.peer && transaction.peer.type !== 'peer'\n    && buildStarsTransactionCustomPeer(transaction.peer)) || undefined;\n\n  if (customPeer) return customPeer.title || lang(customPeer.titleKey!);\n\n  return transaction.title;\n}\n\nexport function isNegativeStarsAmount(starsAmount: ApiStarsAmount) {\n  if (starsAmount.amount) return starsAmount.amount < 0;\n  return starsAmount.nanos < 0;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jQkp75Gb\",\"preview\":\"OYGSN3PF\",\"count\":\"KX1yz2Jy\",\"thumb\":\"EvinKr5k\",\"noOutline\":\"KSAAsUDv\",\"itemCount1\":\"GxDajfX_\",\"itemCount2\":\"jXuZoxq8\",\"itemCount3\":\"TPn3XGHJ\",\"blurry\":\"hWZuxLS8\",\"full\":\"w56QPFhl\",\"fadeIn\":\"ds43W8Wq\"};","import React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiMediaExtendedPreview, BoughtPaidMedia } from '../../../../api/types';\n\nimport { getMediaHash, getMediaThumbUri } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useMedia from '../../../../hooks/useMedia';\n\nimport Icon from '../../../common/icons/Icon';\nimport MediaSpoiler from '../../../common/MediaSpoiler';\n\nimport styles from './PaidMediaThumb.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  media: ApiMediaExtendedPreview[] | BoughtPaidMedia[];\n  isTransactionPreview?: boolean;\n  onClick?: NoneToVoidFunction;\n};\n\nconst THUMB_LIMIT = 3;\nconst PREVIEW_THUMB_LIMIT = 2;\n\nconst PaidMediaThumb = ({\n  media, className, isTransactionPreview, onClick,\n}: OwnProps) => {\n  const count = Math.min(media.length, isTransactionPreview ? PREVIEW_THUMB_LIMIT : THUMB_LIMIT);\n  const isLocked = 'mediaType' in media[0];\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        styles[`itemCount${count}`],\n        isTransactionPreview && styles.preview,\n        className,\n      )}\n      dir=\"rtl\"\n      onClick={onClick}\n    >\n      {media.slice(0, count).reverse().map((item, i, arr) => {\n        const realIndex = arr.length - i - 1;\n        return 'mediaType' in item ? (\n          <MediaSpoiler\n            className={styles.thumb}\n            isVisible\n            width={item.width}\n            height={item.height}\n            thumbDataUri={item.thumbnail?.dataUri}\n          />\n        ) : (\n          <SingleMediaThumb\n            className={buildClassName(isTransactionPreview && realIndex > 0 && styles.noOutline)}\n            boughtMedia={item}\n            index={realIndex}\n          />\n        );\n      })}\n      {isLocked && (\n        <div className={styles.count}>\n          <Icon name=\"stars-lock\" />\n          {media.length > 1 ? media.length : ''}\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction SingleMediaThumb({\n  boughtMedia,\n  index,\n  className,\n}: {\n  boughtMedia: BoughtPaidMedia;\n  index?: number;\n  className?: string;\n}) {\n  const media = (boughtMedia.video || boughtMedia.photo)!;\n  const mediaHash = getMediaHash(media, 'pictogram');\n  const thumb = getMediaThumbUri(media);\n\n  const mediaBlob = useMedia(mediaHash);\n\n  return (\n    <div className={buildClassName(styles.thumb, index !== undefined && `stars-transaction-media-${index}`, className)}>\n      {thumb && <img className={styles.blurry} src={thumb} alt=\"\" />}\n      {mediaBlob && <img className={styles.full} src={mediaBlob} alt=\"\" />}\n    </div>\n  );\n}\n\nexport default memo(PaidMediaThumb);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"aHAxv_Jg\",\"info\":\"oyYrn3II\",\"stars\":\"K5lc75ku\",\"amount\":\"QLQPuLAr\",\"title\":\"e0pK8CJ_\",\"description\":\"xbERdDMQ\",\"date\":\"l6CwQ0Ev\",\"positive\":\"P_42_ZWR\",\"negative\":\"TGjnLJfH\",\"preview\":\"cnjGihOT\",\"subscriptionStar\":\"z43YvnDX\",\"uniqueGiftBackground\":\"eNvzMw2p\",\"uniqueGift\":\"QsvgfDmw\"};","import React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarsTransaction,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\nimport type { CustomPeer } from '../../../../types';\n\nimport { getPeerTitle } from '../../../../global/helpers';\nimport { buildStarsTransactionCustomPeer, formatStarsTransactionAmount } from '../../../../global/helpers/payments';\nimport { selectPeer } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { CUSTOM_PEER_PREMIUM } from '../../../../util/objects/customPeer';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport renderText from '../../../common/helpers/renderText';\nimport { getTransactionTitle, isNegativeStarsAmount } from '../helpers/transaction';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport PaidMediaThumb from './PaidMediaThumb';\n\nimport styles from './StarsTransactionItem.module.scss';\n\ntype OwnProps = {\n  transaction: ApiStarsTransaction;\n  className?: string;\n};\n\nconst UNIQUE_GIFT_STICKER_SIZE = 36;\n\nfunction selectOptionalPeer(peerId?: string) {\n  return (global: GlobalState) => (\n    peerId ? selectPeer(global, peerId) : undefined\n  );\n}\n\nconst StarsTransactionItem = ({ transaction, className }: OwnProps) => {\n  const { openStarsTransactionModal } = getActions();\n  const {\n    date,\n    stars,\n    photo,\n    peer: transactionPeer,\n    extendedMedia,\n    subscriptionPeriod,\n  } = transaction;\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const peerId = transactionPeer.type === 'peer' ? transactionPeer.id : undefined;\n  const peer = useSelector(selectOptionalPeer(peerId));\n  const uniqueGift = transaction.starGift?.type === 'starGiftUnique' ? transaction.starGift : undefined;\n  const uniqueGiftSticker = uniqueGift && getStickerFromGift(uniqueGift);\n\n  const data = useMemo(() => {\n    let title = getTransactionTitle(oldLang, transaction);\n    let description;\n    let status: string | undefined;\n    let avatarPeer: ApiPeer | CustomPeer | undefined;\n\n    if (transaction.peer.type === 'peer') {\n      description = peer && getPeerTitle(oldLang, peer);\n      avatarPeer = peer || CUSTOM_PEER_PREMIUM;\n    } else {\n      const customPeer = buildStarsTransactionCustomPeer(transaction.peer);\n      title = customPeer.title || oldLang(customPeer.titleKey!);\n      description = oldLang(customPeer.subtitleKey!);\n      avatarPeer = customPeer;\n    }\n\n    if (transaction.isGiftUpgrade && transaction.starGift?.type === 'starGiftUnique') {\n      description = transaction.starGift.title;\n    }\n\n    if (transaction.photo) {\n      avatarPeer = undefined;\n    }\n\n    if (transaction.isRefund) {\n      status = oldLang('StarsRefunded');\n    }\n\n    if (transaction.hasFailed) {\n      status = oldLang('StarsFailed');\n    }\n\n    if (transaction.isPending) {\n      status = oldLang('StarsPending');\n    }\n\n    return {\n      title,\n      description,\n      avatarPeer,\n      status,\n    };\n  }, [oldLang, peer, transaction]);\n\n  const previewContent = useMemo(() => {\n    if (uniqueGiftSticker) {\n      const { backdrop } = getGiftAttributes(uniqueGift)!;\n      const backgroundColors = [backdrop!.centerColor, backdrop!.edgeColor];\n\n      return (\n        <>\n          <RadialPatternBackground\n            className={styles.uniqueGiftBackground}\n            backgroundColors={backgroundColors}\n          />\n          <AnimatedIconFromSticker\n            className={styles.uniqueGift}\n            sticker={uniqueGiftSticker}\n            size={UNIQUE_GIFT_STICKER_SIZE}\n            play={false}\n          />\n        </>\n      );\n    }\n\n    if (extendedMedia) {\n      return <PaidMediaThumb media={extendedMedia} isTransactionPreview />;\n    }\n\n    return (\n      <>\n        <Avatar size=\"medium\" webPhoto={photo} peer={data.avatarPeer} />\n        {Boolean(subscriptionPeriod) && (\n          <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"small\" />\n        )}\n      </>\n    );\n  }, [extendedMedia, photo, uniqueGiftSticker, subscriptionPeriod, data.avatarPeer, uniqueGift]);\n\n  const handleClick = useLastCallback(() => {\n    openStarsTransactionModal({ transaction });\n  });\n\n  return (\n    <div className={buildClassName(styles.root, className)} onClick={handleClick}>\n      <div className={styles.preview}>\n        {previewContent}\n      </div>\n      <div className={styles.info}>\n        <h3 className={styles.title}>{data.title}</h3>\n        {data.description && (\n          <p className={styles.description}>{renderText(data.description)}</p>\n        )}\n        <p className={styles.date}>\n          {formatDateTimeToString(date * 1000, oldLang.code, true)}\n          {data.status && ` — (${data.status})`}\n        </p>\n      </div>\n      <div className={styles.stars}>\n        <span\n          className={buildClassName(styles.amount, isNegativeStarsAmount(stars) ? styles.negative : styles.positive)}\n        >\n          {formatStarsTransactionAmount(lang, stars)}\n        </span>\n        <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StarsTransactionItem);\n","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiStarTopupOption } from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { RegularLangKey } from '../../../types/language';\n\nimport { getChatTitle, getPeerTitle, getUserFullName } from '../../../global/helpers';\nimport { selectChat, selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Modal from '../../ui/Modal';\nimport TabList, { type TabWithProperties } from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport BalanceBlock from './BalanceBlock';\nimport StarTopupOptionList from './StarTopupOptionList';\nimport StarsSubscriptionItem from './subscription/StarsSubscriptionItem';\nimport StarsTransactionItem from './transaction/StarsTransactionItem';\n\nimport styles from './StarsBalanceModal.module.scss';\n\nimport StarLogo from '../../../assets/icons/StarLogo.svg';\nimport StarsBackground from '../../../assets/stars-bg.png';\n\nconst TRANSACTION_TYPES = ['all', 'inbound', 'outbound'] as const;\nconst TRANSACTION_TABS_KEYS: RegularLangKey[] = [\n  'StarsTransactionsAll',\n  'StarsTransactionsIncoming',\n  'StarsTransactionsOutgoing',\n];\nconst TRANSACTION_ITEM_CLASS = 'StarsTransactionItem';\nconst SUBSCRIPTION_PURPOSE = 'subs';\n\nexport type OwnProps = {\n  modal: TabState['starsBalanceModal'];\n};\n\ntype StateProps = {\n  starsBalanceState?: GlobalState['stars'];\n  canBuyPremium?: boolean;\n  shouldForceHeight?: boolean;\n};\n\nconst StarsBalanceModal = ({\n  modal, starsBalanceState, canBuyPremium, shouldForceHeight,\n}: OwnProps & StateProps) => {\n  const {\n    closeStarsBalanceModal, loadStarsTransactions, loadStarsSubscriptions, openStarsGiftingPickerModal, openInvoice,\n  } = getActions();\n\n  const { balance, history, subscriptions } = starsBalanceState || {};\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [selectedTabIndex, setSelectedTabIndex] = useState(0);\n  const [areBuyOptionsShown, showBuyOptions, hideBuyOptions] = useFlag();\n\n  const isOpen = Boolean(modal && starsBalanceState);\n\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = modal || {};\n\n  const shouldOpenOnBuy = originStarsPayment || originReaction || originGift || topup;\n\n  const ongoingTransactionAmount = originStarsPayment?.form?.invoice?.totalAmount\n    || originStarsPayment?.subscriptionInfo?.subscriptionPricing?.amount\n    || originReaction?.amount\n    || originGift?.gift.stars\n    || topup?.balanceNeeded;\n  const starsNeeded = ongoingTransactionAmount ? ongoingTransactionAmount - (balance?.amount || 0) : undefined;\n  const starsNeededText = useMemo(() => {\n    const global = getGlobal();\n\n    if (originReaction) {\n      const channel = selectChat(global, originReaction.chatId);\n      if (!channel) return undefined;\n      return oldLang('StarsNeededTextReactions', getChatTitle(oldLang, channel));\n    }\n\n    if (originStarsPayment) {\n      const bot = originStarsPayment.form?.botId ? selectUser(global, originStarsPayment.form.botId) : undefined;\n      if (!bot) return undefined;\n      return oldLang('StarsNeededText', getUserFullName(bot));\n    }\n\n    if (originGift) {\n      const peer = selectUser(global, originGift.peerId);\n      if (!peer) return undefined;\n      return oldLang('StarsNeededTextGift', getPeerTitle(lang, peer));\n    }\n\n    if (topup?.purpose === SUBSCRIPTION_PURPOSE) {\n      return oldLang('StarsNeededTextLink');\n    }\n\n    return undefined;\n  }, [originReaction, originStarsPayment, originGift, topup?.purpose, lang, oldLang]);\n\n  const shouldShowItems = Boolean(history?.all?.transactions.length && !shouldOpenOnBuy);\n  const shouldSuggestGifting = !shouldOpenOnBuy;\n\n  const transactionTabs: TabWithProperties[] = useMemo(() => {\n    return TRANSACTION_TABS_KEYS.map((key) => ({\n      title: lang(key),\n    }));\n  }, [lang]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n      setSelectedTabIndex(0);\n      hideBuyOptions();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (shouldOpenOnBuy) {\n      showBuyOptions();\n      return;\n    }\n\n    hideBuyOptions();\n  }, [shouldOpenOnBuy]);\n\n  const tosText = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const text = oldLang('lng_credits_summary_options_about');\n    const parts = text.split('{link}');\n    return [\n      parts[0],\n      <SafeLink url={oldLang('StarsTOSLink')} text={oldLang('lng_credits_summary_options_about_link')} />,\n      parts[1],\n    ];\n  }, [isOpen, oldLang]);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleLoadMoreTransactions = useLastCallback(() => {\n    loadStarsTransactions({\n      type: TRANSACTION_TYPES[selectedTabIndex],\n    });\n  });\n\n  const handleLoadMoreSubscriptions = useLastCallback(() => {\n    loadStarsSubscriptions();\n  });\n\n  const openStarsGiftingPickerModalHandler = useLastCallback(() => {\n    openStarsGiftingPickerModal({});\n  });\n\n  const handleBuyStars = useLastCallback((option: ApiStarTopupOption) => {\n    openInvoice({\n      type: 'stars',\n      stars: option.stars,\n      currency: option.currency,\n      amount: option.amount,\n    });\n  });\n\n  return (\n    <Modal\n      className={buildClassName(styles.root, !shouldForceHeight && styles.minimal)}\n      isOpen={isOpen}\n      onClose={closeStarsBalanceModal}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeStarsBalanceModal()}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <BalanceBlock balance={balance} className={styles.modalBalance} />\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.starHeaderText}>\n            {oldLang('TelegramStars')}\n          </h2>\n        </div>\n        <div className={styles.section}>\n          <img className={styles.logo} src={StarLogo} alt=\"\" draggable={false} />\n          <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n          <h2 className={styles.headerText}>\n            {starsNeeded ? oldLang('StarsNeededTitle', ongoingTransactionAmount) : oldLang('TelegramStars')}\n          </h2>\n          <div className={styles.description}>\n            {renderText(\n              starsNeededText || oldLang('TelegramStarsInfo'),\n              ['simple_markdown', 'emoji'],\n            )}\n          </div>\n          {canBuyPremium && !areBuyOptionsShown && (\n            <Button\n              className={styles.starButton}\n              onClick={showBuyOptions}\n            >\n              {oldLang('Star.List.BuyMoreStars')}\n            </Button>\n          )}\n          {canBuyPremium && !areBuyOptionsShown && shouldSuggestGifting && (\n            <Button\n              isText\n              noForcedUpperCase\n              className={styles.starButton}\n              onClick={openStarsGiftingPickerModalHandler}\n            >\n              {oldLang('TelegramStarsGift')}\n            </Button>\n          )}\n          {areBuyOptionsShown && starsBalanceState?.topupOptions && (\n            <StarTopupOptionList\n              starsNeeded={starsNeeded}\n              options={starsBalanceState.topupOptions}\n              onClick={handleBuyStars}\n            />\n          )}\n        </div>\n        {areBuyOptionsShown && (\n          <div className={styles.tos}>\n            {tosText}\n          </div>\n        )}\n        {shouldShowItems && Boolean(subscriptions?.list.length) && (\n          <div className={styles.section}>\n            <h3 className={styles.sectionTitle}>{oldLang('StarMySubscriptions')}</h3>\n            <div className={styles.subscriptions}>\n              {subscriptions?.list.map((subscription) => (\n                <StarsSubscriptionItem\n                  key={subscription.id}\n                  subscription={subscription}\n                />\n              ))}\n              {subscriptions?.nextOffset && (\n                <Button\n                  isText\n                  disabled={subscriptions.isLoading}\n                  size=\"smaller\"\n                  noForcedUpperCase\n                  className={styles.loadMore}\n                  onClick={handleLoadMoreSubscriptions}\n                >\n                  <Icon name=\"down\" className={styles.loadMoreIcon} />\n                  {oldLang('StarMySubscriptionsExpand')}\n                </Button>\n              )}\n            </div>\n          </div>\n        )}\n        {shouldShowItems && (\n          <div className={styles.container}>\n            <div className={styles.section}>\n              <Transition\n                name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                activeKey={selectedTabIndex}\n                renderCount={TRANSACTION_TABS_KEYS.length}\n                shouldRestoreHeight\n                className={styles.transition}\n              >\n                <InfiniteScroll\n                  onLoadMore={handleLoadMoreTransactions}\n                  items={history?.[TRANSACTION_TYPES[selectedTabIndex]]?.transactions}\n                  scrollContainerClosest={`.${styles.main}`}\n                  itemSelector={`.${TRANSACTION_ITEM_CLASS}`}\n                  className={styles.transactions}\n                  noFastList\n                >\n                  {history?.[TRANSACTION_TYPES[selectedTabIndex]]?.transactions.map((transaction) => (\n                    <StarsTransactionItem\n                      key={`${transaction.id}-${transaction.isRefund}`}\n                      transaction={transaction}\n                      className={TRANSACTION_ITEM_CLASS}\n                    />\n                  ))}\n                </InfiniteScroll>\n              </Transition>\n            </div>\n            <TabList\n              className={styles.tabs}\n              tabClassName={styles.tab}\n              activeTab={selectedTabIndex}\n              tabs={transactionTabs}\n              onSwitchTab={setSelectedTabIndex}\n            />\n          </div>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const shouldForceHeight = Boolean(global.stars?.history?.all?.transactions.length);\n\n    return {\n      shouldForceHeight,\n      starsBalanceState: global.stars,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(StarsBalanceModal));\n","import React from '../../lib/teact/teact';\n\nimport type { LangFn } from './types';\n\nimport { STARS_ICON_PLACEHOLDER } from '../../config';\nimport buildClassName from '../buildClassName';\n\nimport Icon from '../../components/common/icons/Icon';\nimport StarIcon from '../../components/common/icons/StarIcon';\n\nexport function formatStarsAsText(lang: LangFn, amount: number) {\n  return lang('StarsAmountText', { amount }, { pluralValue: amount });\n}\n\nexport function formatStarsAsIcon(lang: LangFn, amount: number, options?: { asFont?: boolean; className?: string }) {\n  const { asFont, className } = options || {};\n  const icon = asFont\n    ? <Icon name=\"star\" className={buildClassName('star-amount-icon', className)} />\n    : <StarIcon type=\"gold\" className={buildClassName('star-amount-icon', className)} size=\"adaptive\" />;\n  return lang('StarsAmount', { amount }, {\n    withNodes: true,\n    specialReplacement: {\n      [STARS_ICON_PLACEHOLDER]: icon,\n    },\n  });\n}\n","import React, { memo, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiUser,\n} from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\n\nimport { getChatTitle, getCustomPeerFromInvite, getUserFullName } from '../../../global/helpers';\nimport {\n  selectChat, selectChatMessage, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Avatar from '../../common/Avatar';\nimport StarIcon from '../../common/icons/StarIcon';\nimport PeerBadge from '../../common/PeerBadge';\nimport PeerChip from '../../common/PeerChip';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport BalanceBlock from './BalanceBlock';\nimport PaidMediaThumb from './transaction/PaidMediaThumb';\n\nimport styles from './StarsBalanceModal.module.scss';\n\nimport StarsBackground from '../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsPayment'];\n};\n\ntype StateProps = {\n  starsBalanceState?: GlobalState['stars'];\n  bot?: ApiUser;\n  paidMediaMessage?: ApiMessage;\n  paidMediaChat?: ApiChat;\n};\n\nconst StarPaymentModal = ({\n  modal,\n  bot,\n  starsBalanceState,\n  paidMediaMessage,\n  paidMediaChat,\n}: OwnProps & StateProps) => {\n  const { closeStarsPaymentModal, openStarsBalanceModal, sendStarPaymentForm } = getActions();\n  const [isLoading, markLoading, unmarkLoading] = useFlag();\n  const isOpen = Boolean(modal?.inputInvoice && starsBalanceState);\n\n  const prevModal = usePrevious(modal);\n  const renderingModal = modal || prevModal;\n\n  const { form, subscriptionInfo } = renderingModal || {};\n  const amount = form?.invoice?.totalAmount || subscriptionInfo?.subscriptionPricing?.amount;\n  const isBotSubscription = Boolean(form?.invoice.subscriptionPeriod);\n  const canShowPeerItem = !subscriptionInfo?.subscriptionPricing;\n\n  const photo = form?.photo;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkLoading();\n    }\n  }, [isOpen]);\n\n  const descriptionText = useMemo(() => {\n    if (!renderingModal?.inputInvoice) {\n      return '';\n    }\n\n    const botName = getUserFullName(bot);\n    const starsText = oldLang('Stars.Intro.PurchasedText.Stars', amount);\n\n    if (paidMediaMessage) {\n      const extendedMedia = paidMediaMessage.content.paidMedia!.extendedMedia as ApiMediaExtendedPreview[];\n      const areAllPhotos = extendedMedia.every((media) => !media.duration);\n      const areAllVideos = extendedMedia.every((media) => !!media.duration);\n\n      const mediaText = areAllPhotos ? oldLang('Stars.Transfer.Photos', extendedMedia.length)\n        : areAllVideos ? oldLang('Stars.Transfer.Videos', extendedMedia.length)\n          : oldLang('Media', extendedMedia.length);\n\n      const channelTitle = getChatTitle(oldLang, paidMediaChat!);\n      return oldLang('Stars.Transfer.UnlockInfo', [mediaText, channelTitle, starsText]);\n    }\n\n    if (subscriptionInfo) {\n      return lang('StarsSubscribeText', {\n        chat: subscriptionInfo.title,\n        amount,\n      }, {\n        withNodes: true,\n        withMarkdown: true,\n        pluralValue: amount!,\n      });\n    }\n\n    if (isBotSubscription) {\n      return lang('StarsSubscribeBotText', {\n        name: form.title,\n        amount,\n        bot: botName,\n      }, {\n        pluralValue: amount!,\n      });\n    }\n\n    return oldLang('Stars.Transfer.Info', [form!.title, botName, starsText]);\n  }, [\n    renderingModal?.inputInvoice, bot, oldLang, amount, paidMediaMessage, subscriptionInfo, isBotSubscription, form,\n    paidMediaChat, lang,\n  ]);\n\n  const disclaimerText = useMemo(() => {\n    if (subscriptionInfo) {\n      return lang('StarsSubscribeInfo', {\n        link: <SafeLink url={lang('StarsSubscribeInfoLink')} text={lang('StarsSubscribeInfoLinkText')} />,\n      }, {\n        withNodes: true,\n      });\n    }\n\n    return undefined;\n  }, [subscriptionInfo, lang]);\n\n  const inviteCustomPeer = useMemo(() => {\n    if (!subscriptionInfo) {\n      return undefined;\n    }\n\n    return getCustomPeerFromInvite(subscriptionInfo);\n  }, [subscriptionInfo]);\n\n  const handlePayment = useLastCallback(() => {\n    const balance = starsBalanceState?.balance;\n    if (amount === undefined || balance === undefined) {\n      return;\n    }\n\n    if (amount > balance.amount) {\n      openStarsBalanceModal({\n        originStarsPayment: modal,\n      });\n      return;\n    }\n\n    sendStarPaymentForm({});\n    markLoading();\n  });\n\n  return (\n    <Modal\n      contentClassName={styles.paymentContent}\n      isOpen={isOpen}\n      hasAbsoluteCloseButton\n      isSlim\n      onClose={closeStarsPaymentModal}\n    >\n      <BalanceBlock balance={starsBalanceState?.balance} className={styles.modalBalance} />\n      <div className={styles.paymentImages} dir={oldLang.isRtl ? 'ltr' : 'rtl'}>\n        {paidMediaMessage ? (\n          <PaidMediaThumb media={paidMediaMessage.content.paidMedia!.extendedMedia} />\n        ) : inviteCustomPeer ? (\n          <>\n            <Avatar className={styles.paymentPhoto} peer={inviteCustomPeer} size=\"giant\" />\n            <StarIcon type=\"gold\" size=\"adaptive\" className={styles.avatarStar} />\n          </>\n        ) : (\n          <PeerBadge\n            peer={!photo ? bot : undefined}\n            avatarWebPhoto={photo}\n            avatarSize=\"giant\"\n            badgeIcon=\"star\"\n            badgeText={formatInteger(amount!)}\n            badgeClassName={styles.amountBadge}\n            className={styles.paymentPhoto}\n          />\n        )}\n        <img className={styles.paymentImageBackground} src={StarsBackground} alt=\"\" draggable={false} />\n      </div>\n      <h2 className={styles.headerText}>\n        {inviteCustomPeer ? oldLang('StarsSubscribeTitle') : oldLang('StarsConfirmPurchaseTitle')}\n      </h2>\n      {canShowPeerItem && <PeerChip className={styles.botItem} peerId={form?.botId} />}\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <Button className={styles.paymentButton} size=\"smaller\" onClick={handlePayment} isLoading={isLoading}>\n        {lang(isBotSubscription ? 'StarsSubscribeBotButtonMonth' : 'StarsPay', {\n          amount: formatStarsAsIcon(lang, amount!, { asFont: true }),\n        }, {\n          withNodes: true,\n        })}\n      </Button>\n      {disclaimerText && (\n        <div className={buildClassName(styles.disclaimer, styles.smallerText)}>\n          {disclaimerText}\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const bot = modal?.form?.botId ? selectUser(global, modal.form.botId) : undefined;\n\n    const messageInputInvoice = modal?.inputInvoice?.type === 'message' ? modal.inputInvoice : undefined;\n    const message = messageInputInvoice\n      ? selectChatMessage(global, messageInputInvoice.chatId, messageInputInvoice.messageId) : undefined;\n    const chat = messageInputInvoice ? selectChat(global, messageInputInvoice.chatId) : undefined;\n    const isPaidMedia = message?.content.paidMedia;\n\n    return {\n      bot,\n      starsBalanceState: global.stars,\n      paidMediaMessage: isPaidMedia ? message : undefined,\n      paidMediaChat: isPaidMedia ? chat : undefined,\n    };\n  },\n)(StarPaymentModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"irv1C8bo\",\"radialPattern\":\"UvhsGZLf\",\"sticker\":\"a1ASgPwu\",\"transition\":\"Tu6_OHoq\",\"transitionSlide\":\"iUTKLzTN\",\"title\":\"ECTvfOda\",\"subtitle\":\"S6JwvHWD\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiStarGiftAttributeBackdrop, ApiStarGiftAttributeModel, ApiStarGiftAttributePattern,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\n\nimport { useTransitionActiveKey } from '../../../hooks/animations/useTransitionActiveKey';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport RadialPatternBackground from '../../common/profile/RadialPatternBackground';\nimport Transition from '../../ui/Transition';\n\nimport styles from './UniqueGiftHeader.module.scss';\n\ntype OwnProps = {\n  modelAttribute: ApiStarGiftAttributeModel;\n  backdropAttribute: ApiStarGiftAttributeBackdrop;\n  patternAttribute: ApiStarGiftAttributePattern;\n  title?: string;\n  subtitle?: string;\n  className?: string;\n};\n\nconst STICKER_SIZE = 120;\n\nconst UniqueGiftHeader = ({\n  modelAttribute,\n  backdropAttribute,\n  patternAttribute,\n  title,\n  subtitle,\n  className,\n}: OwnProps) => {\n  const activeKey = useTransitionActiveKey([modelAttribute, backdropAttribute, patternAttribute]);\n  const subtitleColor = backdropAttribute?.textColor;\n\n  const radialPatternBackdrop = useMemo(() => {\n    const backdropColors = [backdropAttribute.centerColor, backdropAttribute.edgeColor];\n    const patternColor = backdropAttribute.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={patternAttribute.sticker}\n      />\n    );\n  }, [backdropAttribute, patternAttribute]);\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      <Transition\n        className={styles.transition}\n        slideClassName={styles.transitionSlide}\n        activeKey={activeKey}\n        direction={1}\n        name=\"zoomBounceSemiFade\"\n      >\n        {radialPatternBackdrop}\n        <AnimatedIconFromSticker\n          className={styles.sticker}\n          sticker={modelAttribute.sticker}\n          size={STICKER_SIZE}\n        />\n      </Transition>\n      {title && <h1 className={styles.title}>{title}</h1>}\n      {subtitle && (\n        <p className={styles.subtitle} style={buildStyle(subtitleColor && `color: ${subtitleColor}`)}>\n          {subtitle}\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default memo(UniqueGiftHeader);\n","import { useMemo, useRef } from '../../lib/teact/teact';\n\n/**\n * Use this hook to bind `<Transition />` animation to changes in the dependency array.\n * Use optional parameter `noAnimation` if you want to prevent the animation even if the dependency array changes.\n*/\nexport function useTransitionActiveKey(deps: unknown[], noAnimation?: boolean): number {\n  const activeKey = useRef(0);\n  let didUpdate = false;\n\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  useMemo(() => { activeKey.current += 1; didUpdate = true; }, deps);\n\n  if (noAnimation && didUpdate) activeKey.current -= 1;\n\n  return activeKey.current;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"IzhfRIWu\",\"positive\":\"jvBZSrpd\",\"negative\":\"xDyq9cc0\",\"header\":\"qBOIq6Jn\",\"uniqueGift\":\"ApoQz22o\",\"amount\":\"sso9uZM6\",\"title\":\"ZZAj3hj7\",\"description\":\"NuWOY7ED\",\"tid\":\"tMF8VIOM\",\"footer\":\"KgzPpgS6\",\"starsBackground\":\"nML8IQqX\",\"copyIcon\":\"voCttFzS\",\"mediaPreview\":\"C5r59yiV\",\"subtitle\":\"mFYcIYMJ\",\"starGiftSticker\":\"j3akHdtm\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarsTransactionPeer, ApiSticker,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMessageLink } from '../../../../global/helpers';\nimport { buildStarsTransactionCustomPeer, formatStarsTransactionAmount } from '../../../../global/helpers/payments';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectGiftStickerForStars,\n  selectPeer,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../../util/clipboard';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport { getTransactionTitle, isNegativeStarsAmount } from '../helpers/transaction';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport SafeLink from '../../../common/SafeLink';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\nimport UniqueGiftHeader from '../../gift/UniqueGiftHeader';\nimport PaidMediaThumb from './PaidMediaThumb';\n\nimport styles from './StarsTransactionModal.module.scss';\n\nimport StarsBackground from '../../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsTransactionModal'];\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n  canPlayAnimatedEmojis?: boolean;\n  topSticker?: ApiSticker;\n};\n\nconst StarsTransactionModal: FC<OwnProps & StateProps> = ({\n  modal, peer, canPlayAnimatedEmojis, topSticker,\n}) => {\n  const { showNotification, openMediaViewer, closeStarsTransactionModal } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const { transaction } = modal || {};\n\n  const handleOpenMedia = useLastCallback(() => {\n    const media = transaction?.extendedMedia;\n    if (!media) return;\n\n    openMediaViewer({\n      origin: MediaViewerOrigin.StarsTransaction,\n      standaloneMedia: media.flatMap((item) => Object.values(item)),\n    });\n  });\n\n  const starModalData = useMemo(() => {\n    if (!transaction) {\n      return undefined;\n    }\n\n    const {\n      giveawayPostId, photo, stars, isGiftUpgrade, starGift,\n    } = transaction;\n\n    const gift = transaction?.starGift;\n    const isUniqueGift = gift?.type === 'starGiftUnique';\n    const sticker = transaction?.starGift ? getStickerFromGift(transaction.starGift) : topSticker;\n\n    const giftAttributes = isUniqueGift ? getGiftAttributes(gift) : undefined;\n\n    const customPeer = (transaction.peer && transaction.peer.type !== 'peer'\n        && buildStarsTransactionCustomPeer(transaction.peer)) || undefined;\n\n    const peerId = transaction.peer?.type === 'peer' ? transaction.peer.id : undefined;\n    const toName = transaction.peer && oldLang(getStarsPeerTitleKey(transaction.peer));\n\n    const title = getTransactionTitle(oldLang, transaction);\n\n    const messageLink = peer && transaction.messageId && !isGiftUpgrade\n      ? getMessageLink(peer, undefined, transaction.messageId) : undefined;\n    const giveawayMessageLink = peer && giveawayPostId && getMessageLink(peer, undefined, giveawayPostId);\n\n    const media = transaction.extendedMedia;\n\n    const mediaAmount = media?.length || 0;\n    const areAllPhotos = media?.every((m) => !m.video);\n    const areAllVideos = media?.every((m) => !m.photo);\n\n    const mediaText = areAllPhotos ? oldLang('Stars.Transfer.Photos', mediaAmount)\n      : areAllVideos ? oldLang('Stars.Transfer.Videos', mediaAmount)\n        : oldLang('Media', mediaAmount);\n\n    const description = transaction.description\n      || (isGiftUpgrade && starGift?.type === 'starGiftUnique' ? starGift.title : undefined)\n      || (media ? mediaText : undefined);\n\n    const shouldDisplayAvatar = !media && !sticker;\n    const avatarPeer = !photo ? (peer || customPeer) : undefined;\n\n    const uniqueGiftHeader = isUniqueGift && (\n      <div className={buildClassName(styles.header, styles.uniqueGift)}>\n        <UniqueGiftHeader\n          backdropAttribute={giftAttributes!.backdrop!}\n          patternAttribute={giftAttributes!.pattern!}\n          modelAttribute={giftAttributes!.model!}\n          title={gift.title}\n          subtitle={lang('GiftInfoCollectible', { number: gift.number })}\n        />\n      </div>\n    );\n\n    const regularHeader = (\n      <div className={styles.header}>\n        {media && (\n          <PaidMediaThumb\n            className={buildClassName(styles.mediaPreview, 'transaction-media-preview')}\n            media={media}\n            onClick={handleOpenMedia}\n          />\n        )}\n        {!media && sticker && (\n          <AnimatedIconFromSticker\n            key={transaction.id}\n            sticker={sticker}\n            play={canPlayAnimatedEmojis}\n            noLoop\n          />\n        )}\n        {shouldDisplayAvatar && (\n          <Avatar peer={avatarPeer} webPhoto={photo} size=\"giant\" />\n        )}\n        {!sticker && (\n          <img\n            className={buildClassName(styles.starsBackground)}\n            src={StarsBackground}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {title && <h1 className={styles.title}>{title}</h1>}\n        <p className={styles.description}>{description}</p>\n        <p className={styles.amount}>\n          <span\n            className={buildClassName(styles.amount, isNegativeStarsAmount(stars) ? styles.negative : styles.positive)}\n          >\n            {formatStarsTransactionAmount(lang, stars)}\n          </span>\n          <StarIcon type=\"gold\" size=\"middle\" />\n        </p>\n      </div>\n    );\n\n    const tableData: TableData = [];\n\n    if (transaction.starRefCommision) {\n      tableData.push([\n        oldLang('StarsTransaction.StarRefReason.Title'),\n        oldLang('StarsTransaction.StarRefReason.Program'),\n      ]);\n    }\n\n    if (isGiftUpgrade) {\n      tableData.push([\n        oldLang('StarGiftReason'),\n        oldLang('StarGiftReasonUpgrade'),\n      ]);\n    }\n\n    let peerLabel;\n    if (isGiftUpgrade) {\n      peerLabel = oldLang('Stars.Transaction.GiftFrom');\n    } else if (isNegativeStarsAmount(stars) || transaction.isMyGift) {\n      peerLabel = oldLang('Stars.Transaction.To');\n    } else if (transaction.starRefCommision) {\n      peerLabel = oldLang('StarsTransaction.StarRefReason.Miniapp');\n    } else if (peerId) {\n      peerLabel = oldLang('Star.Transaction.From');\n    } else {\n      peerLabel = oldLang('Stars.Transaction.Via');\n    }\n\n    tableData.push([\n      peerLabel,\n      peerId ? { chatId: peerId } : toName || '',\n    ]);\n\n    if (messageLink) {\n      tableData.push([oldLang('Stars.Transaction.Reaction.Post'), <SafeLink url={messageLink} text={messageLink} />]);\n    }\n\n    if (giveawayMessageLink) {\n      tableData.push([oldLang('BoostReason'), <SafeLink url={giveawayMessageLink} text={oldLang('Giveaway')} />]);\n      tableData.push([oldLang('Gift'), oldLang('Stars', transaction.stars, 'i')]);\n    }\n\n    if (transaction.id) {\n      tableData.push([\n        oldLang('Stars.Transaction.Id'),\n        (\n          <>\n            <div\n              className={styles.tid}\n              onClick={() => {\n                copyTextToClipboard(transaction.id!);\n                showNotification({\n                  message: oldLang('StarsTransactionIDCopied'),\n                });\n              }}\n            >\n              {transaction.id}\n            </div>\n            <Icon className={styles.copyIcon} name=\"copy\" />\n          </>\n        ),\n      ]);\n    }\n\n    tableData.push([\n      oldLang('Stars.Transaction.Date'),\n      formatDateTimeToString(transaction.date * 1000, oldLang.code, true),\n    ]);\n\n    const footerText = oldLang('lng_credits_box_out_about');\n    const footerTextParts = footerText.split('{link}');\n\n    const footer = (\n      <span className={styles.footer}>\n        {footerTextParts[0]}\n        <SafeLink url={oldLang('StarsTOSLink')} text={oldLang('lng_credits_summary_options_about_link')} />\n        {footerTextParts[1]}\n      </span>\n    );\n\n    return {\n      header: isUniqueGift ? uniqueGiftHeader : regularHeader,\n      tableData,\n      footer,\n    };\n  }, [transaction, oldLang, lang, peer, canPlayAnimatedEmojis, topSticker]);\n\n  const prevModalData = usePrevious(starModalData);\n  const renderingModalData = prevModalData || starModalData;\n\n  return (\n    <TableInfoModal\n      isOpen={Boolean(transaction)}\n      className={styles.modal}\n      hasBackdrop={transaction?.starGift?.type === 'starGiftUnique'}\n      header={renderingModalData?.header}\n      tableData={renderingModalData?.tableData}\n      footer={renderingModalData?.footer}\n      buttonText={oldLang('OK')}\n      onClose={closeStarsTransactionModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const peerId = modal?.transaction?.peer?.type === 'peer' && modal.transaction.peer.id;\n    const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n    const starCount = modal?.transaction.stars;\n    const starsGiftSticker = modal?.transaction.isGift && selectGiftStickerForStars(global, starCount?.amount);\n\n    return {\n      peer,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      topSticker: starsGiftSticker,\n    };\n  },\n)(StarsTransactionModal));\n\nfunction getStarsPeerTitleKey(peer: ApiStarsTransactionPeer) {\n  switch (peer.type) {\n    case 'appStore':\n      return 'AppStore';\n    case 'playMarket':\n      return 'PlayMarket';\n    case 'fragment':\n      return 'Fragment';\n    case 'premiumBot':\n      return 'StarsTransactionBot';\n    case 'ads':\n      return 'StarsTransactionAds';\n    case 'api':\n      return 'Stars.Intro.Transaction.TelegramBotApi.Subtitle';\n    default:\n      return 'Stars.Transaction.Unsupported.Title';\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"eR_RZfGB\",\"header\":\"E3R22yAI\",\"title\":\"qdydQHgc\",\"amount\":\"FI6rEJlK\",\"footer\":\"GMWMuWCr\",\"starsBackground\":\"zGCayu45\",\"avatarWrapper\":\"wuTMXDP9\",\"subscriptionStar\":\"enRetSny\",\"amountStar\":\"J8HIcN6k\",\"secondary\":\"oBLHWBtJ\",\"danger\":\"nkwiG25Q\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { STARS_ICON_PLACEHOLDER } from '../../../../config';\nimport { isApiPeerUser } from '../../../../global/helpers/peers';\nimport {\n  selectPeer,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\n\nimport styles from './StarsSubscriptionModal.module.scss';\n\nimport StarsBackground from '../../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsSubscriptionModal'];\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n};\n\nconst StarsSubscriptionModal: FC<OwnProps & StateProps> = ({\n  modal, peer,\n}) => {\n  const {\n    closeStarsSubscriptionModal,\n    fulfillStarsSubscription,\n    changeStarsSubscription,\n    checkChatInvite,\n    loadStarStatus,\n    openInvoice,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { subscription } = modal || {};\n\n  const buttonState = useMemo(() => {\n    if (!subscription) {\n      return 'hidden';\n    }\n\n    if (subscription.canRefulfill) {\n      return 'refulfill';\n    }\n\n    const isActive = subscription.until > Date.now() / 1000;\n    if (isActive && !subscription.isCancelled) {\n      return 'cancel';\n    }\n\n    if (isActive && subscription.isCancelled) {\n      return 'renew';\n    }\n\n    const canRestart = subscription.chatInviteHash || subscription.invoiceSlug;\n    if (!isActive && canRestart) {\n      return 'restart';\n    }\n\n    return 'ok';\n  }, [subscription]);\n\n  const handleButtonClick = useLastCallback(() => {\n    if (!subscription) {\n      return;\n    }\n\n    switch (buttonState) {\n      case 'refulfill': {\n        fulfillStarsSubscription({ id: subscription.id });\n        break;\n      }\n      case 'restart': {\n        if (subscription.chatInviteHash) {\n          checkChatInvite({ hash: subscription.chatInviteHash });\n        } else if (subscription.invoiceSlug) {\n          openInvoice({\n            type: 'slug',\n            slug: subscription.invoiceSlug,\n          });\n        }\n        loadStarStatus();\n        break;\n      }\n      case 'renew': {\n        changeStarsSubscription({ id: subscription.id, isCancelled: false });\n        break;\n      }\n      case 'cancel': {\n        changeStarsSubscription({ id: subscription.id, isCancelled: true });\n        break;\n      }\n    }\n    closeStarsSubscriptionModal();\n  });\n\n  const starModalData = useMemo(() => {\n    if (!subscription || !peer) {\n      return undefined;\n    }\n\n    const {\n      pricing, until, isCancelled, canRefulfill, photo, title, hasBotCancelled,\n    } = subscription;\n\n    const isBotSubscription = isApiPeerUser(peer);\n\n    const header = (\n      <div className={styles.header}>\n        <div className={styles.avatarWrapper}>\n          <Avatar peer={!photo ? peer : undefined} webPhoto={photo} size=\"giant\" />\n          <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"adaptive\" />\n        </div>\n        <img\n          className={buildClassName(styles.starsBackground)}\n          src={StarsBackground}\n          alt=\"\"\n          draggable={false}\n        />\n        <h1 className={styles.title}>{title || oldLang('StarsSubscriptionTitle')}</h1>\n        <p className={styles.amount}>\n          {lang('StarsPerMonth', {\n            amount: pricing.amount,\n          }, {\n            withNodes: true,\n            specialReplacement: {\n              [STARS_ICON_PLACEHOLDER]: <StarIcon className={styles.amountStar} size=\"adaptive\" type=\"gold\" />,\n            },\n          })}\n        </p>\n      </div>\n    );\n\n    const tableData: TableData = [];\n\n    tableData.push([\n      oldLang(isBotSubscription ? 'StarsSubscriptionBot' : 'StarsSubscriptionChannel'),\n      { chatId: peer.id },\n    ]);\n\n    if (title) {\n      tableData.push([\n        oldLang('StarsSubscriptionBotProduct'),\n        title,\n      ]);\n    }\n\n    const hasExpired = until < Date.now() / 1000;\n    tableData.push([\n      oldLang(hasExpired ? 'StarsSubscriptionUntilExpired'\n        : isCancelled ? 'StarsSubscriptionUntilExpires' : 'StarsSubscriptionUntilRenews'),\n      formatDateTimeToString(until * 1000, oldLang.code, true),\n    ]);\n\n    const footerTos = lang('StarsTransactionTOS', {\n      link: <SafeLink url={lang('StarsTransactionTOSLink')} text={lang('StarsTransactionTOSLinkText')} />,\n    }, {\n      withNodes: true,\n    });\n\n    const footer = (\n      <span className={styles.footer}>\n        <p className={styles.secondary}>{footerTos}</p>\n        {isCancelled && (\n          <p className={styles.danger}>\n            {oldLang(hasBotCancelled ? 'StarsSubscriptionBotCancelledText' : 'StarsSubscriptionCancelledText')}\n          </p>\n        )}\n        {canRefulfill && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionRefulfillInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {!isCancelled && !canRefulfill && hasExpired && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionExpiredInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {!isCancelled && !canRefulfill && !hasExpired && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionCancelInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {buttonState !== 'hidden' && (\n          <Button\n            size=\"smaller\"\n            color={buttonState === 'cancel' ? 'danger' : 'primary'}\n            isText={buttonState === 'cancel'}\n            onClick={handleButtonClick}\n          >\n            {oldLang(\n              buttonState === 'cancel' ? 'StarsSubscriptionCancel'\n                : buttonState === 'refulfill' ? 'StarsSubscriptionRefulfill'\n                  : buttonState === 'restart' ? 'StarsSubscriptionAgain'\n                    : buttonState === 'renew' ? 'StarsSubscriptionRenew' : 'OK',\n            )}\n          </Button>\n        )}\n      </span>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [buttonState, lang, oldLang, peer, subscription]);\n\n  const prevModalData = usePrevious(starModalData);\n  const renderingModalData = prevModalData || starModalData;\n\n  return (\n    <TableInfoModal\n      isOpen={Boolean(subscription)}\n      className={styles.modal}\n      header={renderingModalData?.header}\n      tableData={renderingModalData?.tableData}\n      footer={renderingModalData?.footer}\n      onClose={closeStarsSubscriptionModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const peerId = modal?.subscription.peerId;\n    const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n    return {\n      peer,\n    };\n  },\n)(StarsSubscriptionModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CuBAw2yg\",\"slider\":\"euOOAbZi\",\"sparkles\":\"_L1YQTIP\",\"progress\":\"kwK0cNPX\",\"floatingBadgeWrapper\":\"uvlMoXj0\",\"floatingBadge\":\"BGSDWAYc\",\"floatingBadgeText\":\"qqQan8uF\",\"floatingBadgeTriangle\":\"mIdJOmsB\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport Sparkles from '../../common/Sparkles';\n\nimport styles from './StarSlider.module.scss';\n\ntype OwnProps = {\n  maxValue: number;\n  defaultValue: number;\n  className?: string;\n  onChange: (value: number) => void;\n};\n\nconst DEFAULT_POINTS = [50, 100, 500, 1000, 2000, 5000, 10000];\n\nconst StarSlider = ({\n  maxValue,\n  defaultValue,\n  className,\n  onChange,\n}: OwnProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const floatingBadgeRef = useRef<HTMLDivElement>(null);\n\n  const points = useMemo(() => {\n    const result = [];\n    for (let i = 0; i < DEFAULT_POINTS.length; i++) {\n      if (DEFAULT_POINTS[i] < maxValue) {\n        result.push(DEFAULT_POINTS[i]);\n      }\n\n      if (DEFAULT_POINTS[i] >= maxValue) {\n        result.push(maxValue);\n        break;\n      }\n    }\n\n    return result;\n  }, [maxValue]);\n\n  const [value, setValue] = useState(0);\n\n  useEffectOnce(() => {\n    setValue(getProgress(points, defaultValue));\n  });\n\n  const updateSafeBadgePosition = useLastCallback(() => {\n    const badge = floatingBadgeRef.current;\n    if (!badge) return;\n    const parent = badge.parentElement!;\n\n    requestMeasure(() => {\n      const safeMinX = parent.offsetLeft + badge.offsetWidth / 2;\n      const safeMaxX = parent.offsetLeft + parent.offsetWidth - badge.offsetWidth / 2;\n\n      requestMutation(() => {\n        parent.style.setProperty('--_min-x', `${safeMinX}px`);\n        parent.style.setProperty('--_max-x', `${safeMaxX}px`);\n      });\n    });\n  });\n\n  useResizeObserver(floatingBadgeRef, updateSafeBadgePosition);\n\n  const handleChange = useLastCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = Number(event.currentTarget.value);\n    setValue(newValue);\n\n    onChange(getValue(points, newValue));\n  });\n\n  return (\n    <div className={buildClassName(styles.root, className)} style={`--progress: ${value / points.length}`}>\n      <div className={styles.floatingBadgeWrapper}>\n        <div className={styles.floatingBadge} ref={floatingBadgeRef}>\n          <div className={styles.floatingBadgeText}>\n            <Icon name=\"star\" className={styles.floatingBadgeIcon} />\n            <AnimatedCounter text={formatInteger(getValue(points, value))} />\n          </div>\n          <svg className={styles.floatingBadgeTriangle} width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" fill=\"none\">\n            <defs>\n              <linearGradient id=\"StarBadgeTriangle\" x1=\"0\" x2=\"1\" y1=\"0\" y2=\"0\">\n                <stop offset=\"-50%\" stop-color=\"#FFAA00\" />\n                <stop offset=\"150%\" stop-color=\"#FFCD3A\" />\n              </linearGradient>\n            </defs>\n            <path d=\"m 28,4 v 9 c 0.0089,7.283278 -3.302215,5.319646 -6.750951,8.589815 l -5.8284,5.82843 c -0.781,0.78105 -2.0474,0.78104 -2.8284,0 L 6.7638083,21.589815 C 2.8288652,17.959047 0.04527024,20.332086 0,13 V 4 C 0,4 0.00150581,0.97697493 3,1 5.3786658,1.018266 22.594519,0.9142007 25,1 c 2.992326,0.1067311 3,3 3,3 z\" fill=\"url(#StarBadgeTriangle)\" />\n          </svg>\n        </div>\n      </div>\n      <div className={styles.progress} />\n      <Sparkles preset=\"progress\" className={styles.sparkles} />\n      <input\n        className={styles.slider}\n        type=\"range\"\n        min={0}\n        max={points.length}\n        defaultValue={getProgress(points, defaultValue)}\n        step=\"any\"\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nfunction getProgress(points: number[], value: number) {\n  const pointIndex = points.findIndex((point) => value <= point);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const progress = (value - prevPoint) / (nextPoint - prevPoint);\n  return pointIndex + progress;\n}\n\nfunction getValue(points: number[], progress: number) {\n  const pointIndex = Math.floor(progress);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const value = prevPoint + (nextPoint - prevPoint) * (progress - pointIndex);\n  return Math.round(value);\n}\n\nexport default memo(StarSlider);\n","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiStarsAmount, ApiUser,\n} from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { STARS_ICON_PLACEHOLDER } from '../../../config';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { selectChat, selectChatMessage, selectUser } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerBadge from '../../common/PeerBadge';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\nimport BalanceBlock from '../stars/BalanceBlock';\nimport StarSlider from './StarSlider';\n\nimport styles from './PaidReactionModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['paidReactionModal'];\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  chat?: ApiChat;\n  maxAmount: number;\n  starBalance?: ApiStarsAmount;\n  defaultPrivacy?: boolean;\n};\n\ntype ReactorData = {\n  amount: number;\n  localAmount: number;\n  isMe?: boolean;\n  isAnonymous?: boolean;\n  user?: ApiUser;\n};\n\nconst MAX_TOP_REACTORS = 3;\nconst DEFAULT_STARS_AMOUNT = 50;\nconst MAX_REACTION_AMOUNT = 2500;\nconst ANONYMOUS_PEER: CustomPeer = {\n  avatarIcon: 'author-hidden',\n  customPeerAvatarColor: '#9eaab5',\n  isCustomPeer: true,\n  titleKey: 'StarsReactionAnonymous',\n};\n\nconst PaidReactionModal = ({\n  modal,\n  chat,\n  message,\n  maxAmount,\n  starBalance,\n  defaultPrivacy,\n}: OwnProps & StateProps) => {\n  const { closePaidReactionModal, addLocalPaidReaction } = getActions();\n\n  const [starsAmount, setStarsAmount] = useState(DEFAULT_STARS_AMOUNT);\n  const [isTouched, markTouched, unmarkTouched] = useFlag();\n  const [shouldShowUp, setShouldShowUp] = useState(true);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const handleAnonimityChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setShouldShowUp(e.target.checked);\n  });\n\n  const handleAmountChange = useLastCallback((value: number) => {\n    setStarsAmount(value);\n    markTouched();\n  });\n\n  useEffect(() => {\n    if (!modal) {\n      unmarkTouched();\n    }\n  }, [modal]);\n\n  useEffect(() => {\n    const currentReactor = message?.reactions?.topReactors?.find((reactor) => reactor.isMe);\n    if (currentReactor) {\n      setShouldShowUp(!currentReactor.isAnonymous);\n      return;\n    }\n\n    setShouldShowUp(defaultPrivacy || true);\n  }, [defaultPrivacy, message?.reactions?.topReactors]);\n\n  const handleSend = useLastCallback(() => {\n    if (!modal) return;\n\n    addLocalPaidReaction({\n      chatId: modal.chatId,\n      messageId: modal.messageId,\n      count: starsAmount,\n      isPrivate: !shouldShowUp,\n    });\n    closePaidReactionModal();\n  });\n\n  const topReactors = useMemo(() => {\n    const global = getGlobal();\n    const all = message?.reactions?.topReactors;\n    if (!all) {\n      return undefined;\n    }\n\n    const result: ReactorData[] = [];\n    let hasMe = false;\n\n    all.forEach((reactor) => {\n      const user = reactor.peerId ? selectUser(global, reactor.peerId) : undefined;\n      if (!user && !reactor.isAnonymous && !reactor.isMe) return;\n\n      if (reactor.isMe) {\n        hasMe = true;\n      }\n\n      result.push({\n        amount: reactor.count,\n        localAmount: reactor.isMe && isTouched ? starsAmount : 0,\n        isMe: reactor.isMe,\n        isAnonymous: reactor.isAnonymous,\n        user,\n      });\n    });\n\n    if (!hasMe && isTouched) {\n      const me = selectUser(global, global.currentUserId!);\n      result.push({\n        amount: 0,\n        localAmount: starsAmount,\n        isMe: true,\n        user: me,\n      });\n    }\n\n    result.sort((a, b) => (b.amount + b.localAmount) - (a.amount + a.localAmount));\n\n    return result.slice(0, MAX_TOP_REACTORS);\n  }, [isTouched, message?.reactions?.topReactors, starsAmount]);\n\n  const chatTitle = chat && getChatTitle(oldLang, chat);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      onClose={closePaidReactionModal}\n      isSlim\n      hasAbsoluteCloseButton\n      contentClassName={styles.content}\n    >\n      <BalanceBlock balance={starBalance} className={styles.modalBalance} />\n      <StarSlider\n        className={styles.slider}\n        defaultValue={DEFAULT_STARS_AMOUNT}\n        maxValue={maxAmount}\n        onChange={handleAmountChange}\n      />\n      <h3 className={styles.title}>{oldLang('StarsReactionTitle')}</h3>\n      <div className={styles.description}>\n        {renderText(oldLang('StarsReactionText', chatTitle), ['simple_markdown', 'emoji'])}\n      </div>\n      <Separator>\n        {topReactors && <div className={styles.topLabel}>{oldLang('StarsReactionTopSenders')}</div>}\n      </Separator>\n      {topReactors && (\n        <div className={styles.top}>\n          {topReactors.map((reactor) => {\n            const countText = formatInteger(reactor.amount + reactor.localAmount);\n            const peer = (reactor.isAnonymous || !reactor.user || (reactor.isMe && !shouldShowUp))\n              ? ANONYMOUS_PEER : reactor.user;\n            const text = 'isCustomPeer' in peer ? oldLang(peer.titleKey) : getUserFullName(peer);\n            return (\n              <PeerBadge\n                className={styles.topPeer}\n                key={`${reactor.user?.id || 'anonymous'}-${countText}`}\n                peer={peer}\n                badgeText={countText}\n                badgeIcon=\"star\"\n                badgeClassName={styles.topBadge}\n                text={text}\n              />\n            );\n          })}\n        </div>\n      )}\n      <Checkbox\n        className=\"dialog-checkbox\"\n        checked={shouldShowUp}\n        onChange={handleAnonimityChange}\n        label={oldLang('StarsReactionShowMeInTopSenders')}\n      />\n      <Button\n        size=\"smaller\"\n        onClick={handleSend}\n      >\n        {lang('SendPaidReaction', { amount: starsAmount }, {\n          withNodes: true,\n          specialReplacement: {\n            [STARS_ICON_PLACEHOLDER]: <Icon className={styles.buttonStar} name=\"star\" />,\n          },\n        })}\n      </Button>\n      <p className={styles.disclaimer}>\n        {lang('StarsReactionTerms', {\n          link: <SafeLink text={lang('StarsReactionLinkText')} url={lang('StarsReactionLink')} />,\n        }, {\n          withNodes: true,\n        })}\n      </p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const chat = modal && selectChat(global, modal.chatId);\n    const message = modal && selectChatMessage(global, modal.chatId, modal.messageId);\n    const starBalance = global.stars?.balance;\n    const maxAmount = global.appConfig?.paidReactionMaxAmount || MAX_REACTION_AMOUNT;\n    const defaultPrivacy = global.settings.paidReactionPrivacy;\n\n    return {\n      chat,\n      message,\n      starBalance,\n      maxAmount,\n      defaultPrivacy,\n    };\n  },\n)(PaidReactionModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"RdhRpsCn\",\"title\":\"yzbjj73U\",\"slider\":\"xePPMXOI\",\"description\":\"BlpfdOtK\",\"modalBalance\":\"Q3560fzx\",\"topLabel\":\"bnou4CpV\",\"top\":\"QludQDKR\",\"topBadge\":\"JBF9pTUK\",\"buttonStar\":\"NJJFuym9\",\"topPeer\":\"Ty4Ud_Rd\",\"disclaimer\":\"KRvkHeo1\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jKOG0It6\",\"header\":\"A_fX4EXY\",\"spacer\":\"ATowWJ60\",\"title\":\"gDNtv9oz\",\"balance-container\":\"eAKZVhOT\",\"balanceContainer\":\"eAKZVhOT\",\"balance-caption\":\"vbwprYel\",\"balanceCaption\":\"vbwprYel\",\"star-balance\":\"lXuIlbVK\",\"starBalance\":\"lXuIlbVK\",\"balance\":\"dIEx_Iqi\",\"optionsSection\":\"Y68CEIKn\",\"checkboxTitle\":\"H4taXei_\",\"actionMessageView\":\"CB1mxsgp\",\"messageInput\":\"o5r2IPoA\",\"limited\":\"mWzLu0c0\",\"footer\":\"jxWZSvet\",\"switcher\":\"zZUpGRSI\",\"switcherStarIcon\":\"zAee80Dv\",\"description\":\"nTPAv1ci\",\"main-button\":\"IDuhjrne\",\"mainButton\":\"IDuhjrne\",\"star\":\"Q4NlMT0o\",\"background\":\"ZORVRSG3\",\"customBgImage\":\"Eny_G3JI\",\"customBgColor\":\"TkJZPU2u\",\"withTransition\":\"soDpW2YR\",\"blurred\":\"M6k91TdM\",\"withRightColumn\":\"FBcNO8hj\"};","import type { ChangeEvent } from 'react';\nimport React, {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport type { GiftOption } from './GiftModal';\n\nimport { STARS_CURRENCY_CODE } from '../../../config';\nimport { getPeerTitle } from '../../../global/helpers';\nimport { isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer, selectTabState, selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useCustomBackground from '../../../hooks/useCustomBackground';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport PremiumProgress from '../../common/PremiumProgress';\nimport ActionMessage from '../../middle/ActionMessage';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport styles from './GiftComposer.module.scss';\n\nexport type OwnProps = {\n  gift: GiftOption;\n  peerId: string;\n};\n\nexport type StateProps = {\n  captionLimit?: number;\n  theme: ThemeKey;\n  isBackgroundBlurred?: boolean;\n  patternColor?: string;\n  customBackground?: string;\n  backgroundColor?: string;\n  peer?: ApiPeer;\n  currentUserId?: string;\n  isPaymentFormLoading?: boolean;\n};\n\nconst LIMIT_DISPLAY_THRESHOLD = 50;\n\nfunction GiftComposer({\n  gift,\n  peerId,\n  peer,\n  captionLimit,\n  theme,\n  isBackgroundBlurred,\n  patternColor,\n  backgroundColor,\n  customBackground,\n  currentUserId,\n  isPaymentFormLoading,\n}: OwnProps & StateProps) {\n  const { sendStarGift, openInvoice, openGiftUpgradeModal } = getActions();\n\n  const lang = useLang();\n\n  const [giftMessage, setGiftMessage] = useState<string>('');\n  const [shouldHideName, setShouldHideName] = useState<boolean>(false);\n  const [shouldPayForUpgrade, setShouldPayForUpgrade] = useState<boolean>(false);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const isStarGift = 'id' in gift;\n  const isPeerUser = peer && isApiPeerUser(peer);\n\n  const localMessage = useMemo(() => {\n    if (!isStarGift) {\n      return {\n        id: -1,\n        chatId: '0',\n        isOutgoing: true,\n        senderId: currentUserId,\n        date: Math.floor(Date.now() / 1000),\n        content: {\n          action: {\n            targetChatId: peerId,\n            mediaType: 'action',\n            text: 'ActionGiftInbound',\n            type: 'giftPremium',\n            amount: gift.amount,\n            currency: gift.currency,\n            months: gift.months,\n            message: {\n              text: giftMessage,\n            },\n            translationValues: ['%action_origin%', '%gift_payment_amount%'],\n          },\n        },\n      } satisfies ApiMessage;\n    }\n\n    return {\n      id: -1,\n      chatId: currentUserId!,\n      isOutgoing: false,\n      senderId: currentUserId,\n      date: Math.floor(Date.now() / 1000),\n      content: {\n        action: {\n          targetChatId: peerId,\n          mediaType: 'action',\n          text: 'ActionGiftInbound',\n          type: 'starGift',\n          currency: STARS_CURRENCY_CODE,\n          amount: gift.stars,\n          starGift: {\n            type: 'starGift',\n            message: giftMessage?.length ? {\n              text: giftMessage,\n            } : undefined,\n            isNameHidden: shouldHideName,\n            starsToConvert: gift.starsToConvert,\n            canUpgrade: shouldPayForUpgrade || undefined,\n            alreadyPaidUpgradeStars: shouldPayForUpgrade ? gift.upgradeStars : undefined,\n            isSaved: false,\n            gift,\n            peerId,\n            fromId: currentUserId,\n          },\n          translationValues: ['%action_origin%', '%gift_payment_amount%'],\n        },\n      },\n    } satisfies ApiMessage;\n  }, [currentUserId, gift, giftMessage, isStarGift, shouldHideName, shouldPayForUpgrade, peerId]);\n\n  const handleGiftMessageChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setGiftMessage(e.target.value);\n  });\n\n  const handleShouldHideNameChange = useLastCallback(() => {\n    setShouldHideName(!shouldHideName);\n  });\n\n  const handleShouldPayForUpgradeChange = useLastCallback(() => {\n    setShouldPayForUpgrade(!shouldPayForUpgrade);\n  });\n\n  const handleOpenUpgradePreview = useLastCallback(() => {\n    if (!isStarGift) return;\n    openGiftUpgradeModal({\n      giftId: gift.id,\n      peerId,\n    });\n  });\n\n  const handleMainButtonClick = useLastCallback(() => {\n    if (isStarGift) {\n      sendStarGift({\n        peerId,\n        shouldHideName,\n        gift,\n        message: giftMessage ? { text: giftMessage } : undefined,\n        shouldUpgrade: shouldPayForUpgrade,\n      });\n      return;\n    }\n\n    openInvoice({\n      type: 'giftcode',\n      userIds: [peerId],\n      currency: gift.currency,\n      amount: gift.amount,\n      option: gift,\n      message: giftMessage ? { text: giftMessage } : undefined,\n    });\n  });\n\n  function renderOptionsSection() {\n    const symbolsLeft = captionLimit ? captionLimit - giftMessage.length : undefined;\n\n    const title = getPeerTitle(lang, peer!)!;\n    return (\n      <div className={styles.optionsSection}>\n        <TextArea\n          className={styles.messageInput}\n          onChange={handleGiftMessageChange}\n          value={giftMessage}\n          label={lang('GiftMessagePlaceholder')}\n          maxLength={captionLimit}\n          maxLengthIndicator={symbolsLeft && symbolsLeft < LIMIT_DISPLAY_THRESHOLD ? symbolsLeft.toString() : undefined}\n        />\n\n        {isStarGift && gift.upgradeStars && (\n          <ListItem className={styles.switcher} narrow ripple onClick={handleShouldPayForUpgradeChange}>\n            <span>\n              {lang('GiftMakeUnique', {\n                stars: formatStarsAsIcon(lang, gift.upgradeStars, { className: styles.switcherStarIcon }),\n              }, { withNodes: true })}\n            </span>\n            <Switcher\n              checked={shouldPayForUpgrade}\n              onChange={handleShouldPayForUpgradeChange}\n              label={lang('GiftMakeUniqueAcc')}\n            />\n          </ListItem>\n        )}\n        {isStarGift && (\n          <div className={styles.description}>\n            {isPeerUser\n              ? lang('GiftMakeUniqueDescription', {\n                user: title,\n                link: <Link isPrimary onClick={handleOpenUpgradePreview}>{lang('GiftMakeUniqueLink')}</Link>,\n              }, {\n                withNodes: true,\n              })\n              : lang('GiftMakeUniqueDescriptionChannel', {\n                peer: title,\n                link: <Link isPrimary onClick={handleOpenUpgradePreview}>{lang('GiftMakeUniqueLink')}</Link>,\n              }, {\n                withNodes: true,\n              })}\n          </div>\n        )}\n\n        {isStarGift && (\n          <ListItem className={styles.switcher} narrow ripple onClick={handleShouldHideNameChange}>\n            <span>{lang('GiftHideMyName')}</span>\n            <Switcher\n              checked={shouldHideName}\n              onChange={handleShouldHideNameChange}\n              label={lang('GiftHideMyName')}\n            />\n          </ListItem>\n        )}\n        {isStarGift && (\n          <div className={styles.description}>\n            {isPeerUser ? lang('GiftHideNameDescription', { receiver: title }) : lang('GiftHideNameDescriptionChannel')}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  function renderFooter() {\n    const amount = isStarGift\n      ? formatStarsAsIcon(lang, gift.stars + (shouldPayForUpgrade ? gift.upgradeStars! : 0), { asFont: true })\n      : formatCurrency(gift.amount, gift.currency);\n\n    return (\n      <div className={styles.footer}>\n        {isStarGift && gift.availabilityRemains && (\n          <PremiumProgress\n            isPrimary\n            progress={gift.availabilityRemains / gift.availabilityTotal!}\n            rightText={lang('GiftSoldCount', {\n              count: gift.availabilityTotal! - gift.availabilityRemains,\n            })}\n            leftText={lang('GiftLeftCount', { count: gift.availabilityRemains })}\n            className={styles.limited}\n          />\n        )}\n        <Button\n          className={styles.mainButton}\n          onClick={handleMainButtonClick}\n          isLoading={isPaymentFormLoading}\n        >\n          {lang('GiftSend', {\n            amount,\n          }, {\n            withNodes: true,\n          })}\n        </Button>\n      </div>\n    );\n  }\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n  );\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      <div\n        className={buildClassName(styles.actionMessageView, 'MessageList')}\n        // @ts-ignore -- FIXME: Find a way to disable interactions but keep a11y\n        inert\n        style={buildStyle(\n          `--pattern-color: ${patternColor}`,\n          backgroundColor && `--theme-background-color: ${backgroundColor}`,\n        )}\n      >\n        <div\n          className={bgClassName}\n          style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n        />\n        <ActionMessage key={isStarGift ? gift.id : gift.months} message={localMessage} />\n      </div>\n      {renderOptionsSection()}\n      <div className={styles.spacer} />\n      {renderFooter()}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred,\n      patternColor,\n      background: customBackground,\n      backgroundColor,\n    } = global.settings.themes[theme] || {};\n    const peer = selectPeer(global, peerId);\n\n    const tabState = selectTabState(global);\n\n    return {\n      peer,\n      theme,\n      isBackgroundBlurred,\n      patternColor,\n      customBackground,\n      backgroundColor,\n      captionLimit: global.appConfig?.starGiftMaxMessageLength,\n      currentUserId: global.currentUserId,\n      isPaymentFormLoading: tabState.isPaymentFormLoading,\n    };\n  },\n)(GiftComposer));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"G1mBmzxs\",\"starGift\":\"f5ArEO1S\",\"monthsDescription\":\"rn9aWFNA\",\"description\":\"q4_ydkAx\",\"buy\":\"a8no5WH0\",\"star\":\"DvJLTVFU\",\"amount\":\"sbo2dMcH\"};","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumGiftCodeOption,\n  ApiSticker,\n} from '../../../api/types';\n\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport GiftRibbon from '../../common/gift/GiftRibbon';\nimport Button from '../../ui/Button';\n\nimport styles from './GiftItem.module.scss';\n\nexport type OwnProps = {\n  option: ApiPremiumGiftCodeOption;\n  baseMonthAmount?: number;\n  onClick: (gift: ApiPremiumGiftCodeOption) => void;\n};\n\nexport type StateProps = {\n  sticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst GIFT_STICKER_SIZE = 86;\n\nfunction GiftItemPremium({\n  sticker, canPlayAnimatedEmojis, baseMonthAmount, option, onClick,\n}: OwnProps & StateProps) {\n  const {\n    months, amount, currency,\n  } = option;\n  const lang = useLang();\n\n  const handleGiftClick = useLastCallback(() => {\n    onClick(option);\n  });\n\n  const perMonth = Math.floor(amount / months);\n  const discount = baseMonthAmount && baseMonthAmount > perMonth\n    ? Math.ceil(100 - perMonth / (baseMonthAmount / 100))\n    : undefined;\n\n  function renderMonths() {\n    const caption = months === 12\n      ? lang('Years', { count: 1 }, { pluralValue: 1 })\n      : lang('Months', { count: months }, { pluralValue: months });\n    return (\n      <div className={styles.monthsDescription}>\n        {caption}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={styles.container}\n      tabIndex={0}\n      role=\"button\"\n      onClick={handleGiftClick}\n    >\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        play={canPlayAnimatedEmojis}\n        noLoop\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n\n      {renderMonths()}\n      <div className={styles.description}>\n        {lang('PremiumGiftDescription')}\n      </div>\n      <Button className={styles.buy} nonInteractive size=\"tiny\" pill fluid>\n        {formatCurrencyAsString(amount, currency)}\n      </Button>\n      {Boolean(discount) && (\n        <GiftRibbon color=\"red\" text={lang('GiftDiscount', { percent: discount })} />\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { option }): StateProps => {\n    const sticker = selectGiftStickerForDuration(global, option.months);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n\n    return {\n      sticker,\n      canPlayAnimatedEmojis,\n    };\n  },\n)(GiftItemPremium));\n","import React, { memo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiStarGiftRegular,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport GiftRibbon from '../../common/gift/GiftRibbon';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport styles from './GiftItem.module.scss';\n\nexport type OwnProps = {\n  gift: ApiStarGiftRegular;\n  observeIntersection?: ObserveFn;\n  onClick: (gift: ApiStarGiftRegular) => void;\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nfunction GiftItemStar({ gift, observeIntersection, onClick }: OwnProps) {\n  const { openGiftInfoModal } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const [shouldPlay, play] = useFlag();\n\n  const {\n    stars,\n    isLimited,\n    isSoldOut,\n    sticker,\n  } = gift;\n\n  const handleGiftClick = useLastCallback(() => {\n    if (isSoldOut) {\n      openGiftInfoModal({ gift });\n      return;\n    }\n\n    onClick(gift);\n  });\n\n  useOnIntersect(ref, observeIntersection, (entry) => {\n    if (entry.isIntersecting) play();\n  });\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(styles.container, styles.starGift)}\n      tabIndex={0}\n      role=\"button\"\n      onClick={handleGiftClick}\n    >\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        noLoop\n        play={shouldPlay}\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n      <Button className={styles.buy} nonInteractive size=\"tiny\" color=\"stars\" withSparkleEffect pill fluid>\n        <Icon name=\"star\" className={styles.star} />\n        <div className={styles.amount}>\n          {stars}\n        </div>\n      </Button>\n      {isLimited && !isSoldOut && <GiftRibbon color=\"blue\" text={lang('GiftLimited')} />}\n      {isSoldOut && <GiftRibbon color=\"red\" text={lang('GiftSoldOut')} />}\n    </div>\n  );\n}\n\nexport default memo(GiftItemStar);\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"cUjwvN00\",\"item-selected\":\"medfcJpd\",\"itemSelected\":\"medfcJpd\",\"item\":\"dO7FKYY4\",\"selected-item\":\"B2lEJk1v\",\"selectedItem\":\"B2lEJk1v\",\"star\":\"Pb7AU805\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { StarGiftCategory } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\n\nimport styles from './StarGiftCategoryList.module.scss';\n\ntype OwnProps = {\n  onCategoryChanged: (category: StarGiftCategory) => void;\n};\n\ntype StateProps = {\n  idsByCategory?: Record<StarGiftCategory, string[]>;\n};\n\nconst StarGiftCategoryList = ({\n  idsByCategory,\n  onCategoryChanged,\n}: StateProps & OwnProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const starCategories: number[] | undefined = useMemo(() => idsByCategory && Object.keys(idsByCategory)\n    .filter((category) => category !== 'all' && category !== 'limited')\n    .map(Number)\n    .sort((a, b) => a - b),\n  [idsByCategory]);\n\n  const [selectedCategory, setSelectedCategory] = useState<StarGiftCategory>('all');\n\n  function handleItemClick(category: StarGiftCategory) {\n    setSelectedCategory(category);\n    onCategoryChanged(\n      category,\n    );\n  }\n\n  function renderCategoryName(category: StarGiftCategory) {\n    if (category === 'all') return lang('AllGiftsCategory');\n    if (category === 'stock') return lang('StockGiftsCategory');\n    if (category === 'limited') return lang('LimitedGiftsCategory');\n    return category;\n  }\n\n  function renderCategoryItem(category: StarGiftCategory) {\n    return (\n      <div\n        className={buildClassName(\n          styles.item,\n          selectedCategory === category && styles.selectedItem,\n        )}\n        onClick={() => handleItemClick(category)}\n      >\n        {Number.isInteger(category) && (\n          <StarIcon\n            className={styles.star}\n            type=\"gold\"\n            size=\"middle\"\n          />\n        )}\n        {renderCategoryName(category)}\n      </div>\n    );\n  }\n\n  useHorizontalScroll(ref, undefined, true);\n\n  return (\n    <div ref={ref} className={buildClassName(styles.list, 'no-scrollbar')}>\n      {renderCategoryItem('all')}\n      {renderCategoryItem('limited')}\n      {renderCategoryItem('stock')}\n      {starCategories?.map(renderCategoryItem)}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { starGifts } = global;\n\n    return {\n      idsByCategory: starGifts?.idsByCategory,\n    };\n  },\n)(StarGiftCategoryList));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tJK1W0pJ\",\"transition\":\"pP8TxefR\",\"content\":\"o3V1HqbL\",\"main\":\"cVXqeu9P\",\"giftSection\":\"v4eKefwN\",\"section\":\"EqfarEYb\",\"starGiftsContainer\":\"OQX3GZl5\",\"premiumGiftsGallery\":\"n40m3BK2\",\"header\":\"iqqoyRgW\",\"headerSlide\":\"BTWhJUQB\",\"headerText\":\"lLRmbpIu\",\"hiddenHeader\":\"XgGzn1cQ\",\"commonHeaderText\":\"ybZo03if\",\"closeButton\":\"r_Y5uG1T\",\"balance\":\"soqAknia\",\"avatars\":\"N_7tYJKr\",\"logoBackground\":\"ieK4TzSb\",\"center\":\"Ey5gX40t\",\"description\":\"ZioU5h_k\",\"starGiftsDescription\":\"gFgzS8pV\",\"boostIcon\":\"Qi2YR6Dz\",\"optionBottom\":\"RTbClMKE\",\"secondaryInfo\":\"g0R9GSNq\",\"footer\":\"J3Gju3bv\",\"starGiftsTransition\":\"kB6IyXqS\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPeer,\n  ApiPremiumGiftCodeOption,\n  ApiStarGiftRegular,\n  ApiStarsAmount,\n} from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { StarGiftCategory } from '../../../types';\n\nimport { getPeerTitle, getUserFullName } from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport BalanceBlock from '../stars/BalanceBlock';\nimport GiftSendingOptions from './GiftComposer';\nimport GiftItemPremium from './GiftItemPremium';\nimport GiftItemStar from './GiftItemStar';\nimport StarGiftCategoryList from './StarGiftCategoryList';\n\nimport styles from './GiftModal.module.scss';\n\nimport StarsBackground from '../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['giftModal'];\n};\n\nexport type GiftOption = ApiPremiumGiftCodeOption | ApiStarGiftRegular;\n\ntype StateProps = {\n  boostPerSentGift?: number;\n  starGiftsById?: Record<string, ApiStarGiftRegular>;\n  starGiftIdsByCategory?: Record<StarGiftCategory, string[]>;\n  starBalance?: ApiStarsAmount;\n  peer?: ApiPeer;\n  isSelf?: boolean;\n};\n\nconst AVATAR_SIZE = 100;\nconst INTERSECTION_THROTTLE = 200;\nconst SCROLL_THROTTLE = 200;\n\nconst runThrottledForScroll = throttle((cb) => cb(), SCROLL_THROTTLE, true);\n\nconst PremiumGiftModal: FC<OwnProps & StateProps> = ({\n  modal,\n  starGiftsById,\n  starGiftIdsByCategory,\n  starBalance,\n  peer,\n  isSelf,\n}) => {\n  const {\n    closeGiftModal,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const giftHeaderRef = useRef<HTMLHeadingElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const scrollerRef = useRef<HTMLDivElement>(null);\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const user = peer && isApiPeerUser(peer) ? peer : undefined;\n  const chat = peer && isApiPeerChat(peer) ? peer : undefined;\n\n  const [selectedGift, setSelectedGift] = useState<GiftOption | undefined>();\n  const [isHeaderHidden, setIsHeaderHidden] = useState(true);\n  const [isHeaderForStarGifts, setIsHeaderForStarGifts] = useState(false);\n\n  const [selectedCategory, setSelectedCategory] = useState<StarGiftCategory>('all');\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const filteredGifts = useMemo(() => {\n    return renderingModal?.gifts?.sort((prevGift, gift) => prevGift.months - gift.months)\n      .filter((gift) => gift.users === 1);\n  }, [renderingModal]);\n\n  const baseGift = useMemo(() => {\n    return filteredGifts?.reduce((prev, gift) => (prev.amount < gift.amount ? prev : gift));\n  }, [filteredGifts]);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: scrollerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (!isOpen) {\n      setIsHeaderHidden(true);\n      setSelectedGift(undefined);\n      setSelectedCategory('all');\n    }\n  }, [isOpen]);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLDivElement>) => {\n    if (selectedGift) return;\n    const currentTarget = e.currentTarget;\n\n    runThrottledForScroll(() => {\n      const { scrollTop } = currentTarget;\n\n      setIsHeaderHidden(scrollTop <= 150);\n\n      if (transitionRef.current && giftHeaderRef.current) {\n        const { top: headerTop } = giftHeaderRef.current.getBoundingClientRect();\n        const { top: transitionTop } = transitionRef.current.getBoundingClientRect();\n        setIsHeaderForStarGifts(headerTop - transitionTop <= 0);\n      }\n    });\n  });\n\n  const giftPremiumDescription = lang('GiftPremiumDescription', {\n    user: getUserFullName(user)!,\n    link: (\n      <SafeLink\n        text={lang('GiftPremiumDescriptionLinkCaption')}\n        url={lang('GiftPremiumDescriptionLink')}\n      />\n    ),\n  }, { withNodes: true });\n\n  const starGiftDescription = chat\n    ? lang('StarGiftDescriptionChannel', { peer: getPeerTitle(lang, chat) }, {\n      withNodes: true,\n      withMarkdown: true,\n    })\n    : isSelf\n      ? lang('StarGiftDescriptionSelf', undefined, {\n        withNodes: true,\n        renderTextFilters: ['br'],\n      })\n      : lang('StarGiftDescription', {\n        user: getUserFullName(user)!,\n      }, { withNodes: true, withMarkdown: true });\n\n  function renderGiftPremiumHeader() {\n    return (\n      <h2 className={buildClassName(styles.headerText, styles.center)}>\n        {lang('GiftPremiumHeader')}\n      </h2>\n    );\n  }\n\n  function renderGiftPremiumDescription() {\n    return (\n      <p className={buildClassName(styles.description, styles.center)}>\n        {giftPremiumDescription}\n      </p>\n    );\n  }\n\n  function renderStarGiftsHeader() {\n    return (\n      <h2 ref={giftHeaderRef} className={buildClassName(styles.headerText, styles.center)}>\n        {lang(isSelf ? 'StarsGiftHeaderSelf' : 'StarsGiftHeader')}\n      </h2>\n    );\n  }\n\n  function renderStarGiftsDescription() {\n    return (\n      <p className={buildClassName(styles.description, styles.starGiftsDescription, styles.center)}>\n        {starGiftDescription}\n      </p>\n    );\n  }\n\n  const handleGiftClick = useLastCallback((gift: GiftOption) => {\n    setSelectedGift(gift);\n    setIsHeaderForStarGifts('id' in gift);\n    setIsHeaderHidden(false);\n  });\n\n  function renderStarGifts() {\n    return (\n      <div className={styles.starGiftsContainer}>\n        {starGiftsById && starGiftIdsByCategory?.[selectedCategory].map((giftId) => {\n          const gift = starGiftsById[giftId];\n          return (\n            <GiftItemStar\n              gift={gift}\n              observeIntersection={observeIntersection}\n              onClick={handleGiftClick}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderPremiumGifts() {\n    return (\n      <div className={styles.premiumGiftsGallery}>\n        {filteredGifts?.map((gift) => {\n          return (\n            <GiftItemPremium\n              option={gift}\n              baseMonthAmount={baseGift ? Math.floor(baseGift.amount / baseGift.months) : undefined}\n              onClick={handleGiftClick}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  const onCategoryChanged = useLastCallback((category: StarGiftCategory) => {\n    setSelectedCategory(category);\n  });\n\n  const handleCloseButtonClick = useLastCallback(() => {\n    if (selectedGift) {\n      setSelectedGift(undefined);\n      return;\n    }\n    closeGiftModal();\n  });\n\n  function renderMainScreen() {\n    return (\n      <div ref={scrollerRef} className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <div className={styles.avatars}>\n          <Avatar\n            size={AVATAR_SIZE}\n            peer={peer}\n          />\n          <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n        </div>\n        {!isSelf && !chat && renderGiftPremiumHeader()}\n        {!isSelf && !chat && renderGiftPremiumDescription()}\n        {!isSelf && !chat && renderPremiumGifts()}\n\n        {renderStarGiftsHeader()}\n        {renderStarGiftsDescription()}\n        <StarGiftCategoryList onCategoryChanged={onCategoryChanged} />\n        <Transition\n          name=\"zoomFade\"\n          activeKey={getCategoryKey(selectedCategory)}\n          className={styles.starGiftsTransition}\n        >\n          {renderStarGifts()}\n        </Transition>\n      </div>\n    );\n  }\n\n  const isBackButton = Boolean(selectedGift);\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n  );\n\n  return (\n    <Modal\n      dialogRef={dialogRef}\n      onClose={closeGiftModal}\n      isOpen={isOpen}\n      isSlim\n      contentClassName={styles.content}\n      className={buildClassName(styles.modalDialog, styles.root)}\n    >\n      <Button\n        className={styles.closeButton}\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleCloseButtonClick}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <BalanceBlock className={styles.balance} balance={starBalance} />\n      <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n        <Transition\n          name=\"slideVerticalFade\"\n          activeKey={Number(isHeaderForStarGifts)}\n          slideClassName={styles.headerSlide}\n        >\n          <h2 className={styles.commonHeaderText}>\n            {lang(isHeaderForStarGifts ? (isSelf ? 'StarsGiftHeaderSelf' : 'StarsGiftHeader') : 'GiftPremiumHeader')}\n          </h2>\n        </Transition>\n      </div>\n      <Transition\n        ref={transitionRef}\n        className={styles.transition}\n        name=\"pushSlide\"\n        activeKey={selectedGift ? 1 : 0}\n      >\n        {!selectedGift && renderMainScreen()}\n        {selectedGift && renderingModal?.forPeerId && (\n          <GiftSendingOptions gift={selectedGift} peerId={renderingModal.forPeerId} />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal }): StateProps => {\n  const {\n    starGifts,\n    stars,\n    currentUserId,\n  } = global;\n\n  const peer = modal?.forPeerId ? selectPeer(global, modal.forPeerId) : undefined;\n  const isSelf = Boolean(currentUserId && modal?.forPeerId === currentUserId);\n\n  return {\n    boostPerSentGift: global.appConfig?.boostsPerSentGift,\n    starGiftsById: starGifts?.byId,\n    starGiftIdsByCategory: starGifts?.idsByCategory,\n    starBalance: stars?.balance,\n    peer,\n    isSelf,\n  };\n})(PremiumGiftModal));\n\nfunction getCategoryKey(category: StarGiftCategory) {\n  if (category === 'all') return -2;\n  if (category === 'limited') return -1;\n  if (category === 'stock') return 0;\n  return category;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"W3JMs1YE\",\"picker\":\"wOipz1Y_\"};","import React, {\n  memo, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport { filterPeersByQuery } from '../../../../global/helpers/peers';\nimport { selectCanGift } from '../../../../global/selectors';\nimport { unique } from '../../../../util/iteratees';\nimport sortChatIds from '../../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport PickerModal from '../../../common/pickers/PickerModal';\n\nimport styles from './GiftRecipientPicker.module.scss';\n\nexport type OwnProps = {\n  modal?: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  userIds?: string[];\n}\n\nconst GiftRecipientPicker = ({\n  modal,\n  currentUserId,\n  userIds,\n}: OwnProps & StateProps) => {\n  const { closeGiftRecipientPicker, openGiftModal } = getActions();\n\n  const oldLang = useOldLang();\n  const isOpen = modal;\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedUserIds = useMemo(() => {\n    const global = getGlobal();\n    const idsWithSelf = userIds ? userIds.concat(currentUserId!) : undefined;\n    const filteredPeerIds = idsWithSelf ? filterPeersByQuery({ ids: idsWithSelf, query: searchQuery }) : [];\n\n    return sortChatIds(unique(filteredPeerIds).filter((peerId) => {\n      return selectCanGift(global, peerId);\n    }), undefined, [currentUserId!]);\n  }, [currentUserId, searchQuery, userIds]);\n\n  const handleSelectedUserIdsChange = useLastCallback((selectedId: string) => {\n    openGiftModal({ forUserId: selectedId });\n    closeGiftRecipientPicker();\n  });\n\n  return (\n    <PickerModal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={closeGiftRecipientPicker}\n      title={oldLang('GiftTelegramPremiumOrStarsTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n    >\n      <PeerPicker\n        className={styles.picker}\n        itemIds={displayedUserIds}\n        filterValue={searchQuery}\n        filterPlaceholder={oldLang('Search')}\n        onSelectedIdChange={handleSelectedUserIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        forceShowSelf\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { currentUserId } = global;\n\n  return {\n    currentUserId,\n    userIds: global.contactList?.userIds,\n  };\n})(GiftRecipientPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"nnublcCk\",\"header\":\"p7FTs7_p\",\"title\":\"pIbzzTir\",\"description\":\"CCPfr26t\",\"soldOut\":\"kjWcRp4W\",\"footer\":\"bho0GTYt\",\"footerDescription\":\"VUylTszM\",\"unknown\":\"zDauXmpS\",\"giftValue\":\"w_E4LkUj\",\"uniqueAttribute\":\"OJQnkf17\",\"uniqueGift\":\"I6o_pGAm\",\"starAmountIcon\":\"_5guecUe\",\"modalHeader\":\"ie9tImaj\",\"modalCloseButton\":\"p38RBGdC\",\"ownerAddress\":\"DavMRg4Q\",\"copyIcon\":\"SLX5tX8C\"};","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type {\n  ApiEmojiStatusCollectible,\n  ApiEmojiStatusType,\n  ApiPeer,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { DEFAULT_STATUS_ICON_ID, TME_LINK_PREFIX } from '../../../../config';\nimport { getHasAdminRight, getPeerTitle } from '../../../../global/helpers';\nimport { isApiPeerChat } from '../../../../global/helpers/peers';\nimport { selectPeer, selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../../util/clipboard';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { formatStarsAsIcon, formatStarsAsText } from '../../../../util/localization/format';\nimport { CUSTOM_PEER_HIDDEN } from '../../../../util/objects/customPeer';\nimport { getServerTime } from '../../../../util/serverTime';\nimport { formatInteger, formatPercent } from '../../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport BadgeButton from '../../../common/BadgeButton';\nimport Icon from '../../../common/icons/Icon';\nimport Button from '../../../ui/Button';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\nimport DropdownMenu from '../../../ui/DropdownMenu';\nimport Link from '../../../ui/Link';\nimport MenuItem from '../../../ui/MenuItem';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\nimport UniqueGiftHeader from '../UniqueGiftHeader';\n\nimport styles from './GiftInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftInfoModal'];\n};\n\ntype StateProps = {\n  fromPeer?: ApiPeer;\n  targetPeer?: ApiPeer;\n  currentUserId?: string;\n  starGiftMaxConvertPeriod?: number;\n  hasAdminRights?: boolean;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n};\n\nconst STICKER_SIZE = 120;\n\nconst GiftInfoModal = ({\n  modal,\n  fromPeer,\n  targetPeer,\n  currentUserId,\n  starGiftMaxConvertPeriod,\n  hasAdminRights,\n  currentUserEmojiStatus,\n  collectibleEmojiStatuses,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftInfoModal,\n    changeGiftVisibility,\n    convertGiftToStars,\n    openChatWithInfo,\n    focusMessage,\n    openGiftUpgradeModal,\n    showNotification,\n    openChatWithDraft,\n    openGiftStatusInfoModal,\n    setEmojiStatus,\n    openGiftTransferModal,\n  } = getActions();\n\n  const [isConvertConfirmOpen, openConvertConfirm, closeConvertConfirm] = useFlag();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  const renderingFromPeer = useCurrentOrPrev(fromPeer);\n  const renderingTargetPeer = useCurrentOrPrev(targetPeer);\n\n  const isTargetChat = renderingTargetPeer && isApiPeerChat(renderingTargetPeer);\n\n  const { gift: typeGift } = renderingModal || {};\n  const isSavedGift = typeGift && 'gift' in typeGift;\n  const savedGift = isSavedGift ? typeGift : undefined;\n  const isSender = savedGift?.fromId === currentUserId;\n  const canConvertDifference = (savedGift && starGiftMaxConvertPeriod && (\n    savedGift.date + starGiftMaxConvertPeriod - getServerTime()\n  )) || 0;\n  const conversionLeft = Math.ceil(canConvertDifference / 60 / 60 / 24);\n\n  const gift = isSavedGift ? typeGift.gift : typeGift;\n  const giftSticker = gift && getStickerFromGift(gift);\n\n  const currenUniqueEmojiStatusSlug = currentUserEmojiStatus?.type === 'collectible'\n    ? currentUserEmojiStatus.slug : undefined;\n\n  const starGiftUniqueSlug = gift?.type === 'starGiftUnique' ? gift.slug : undefined;\n  const starGiftUniqueLink = useMemo(() => {\n    if (!starGiftUniqueSlug) return undefined;\n    return `${TME_LINK_PREFIX}nft/${starGiftUniqueSlug}`;\n  }, [starGiftUniqueSlug]);\n  const userCollectibleStatus = useMemo(() => {\n    if (!starGiftUniqueSlug) return undefined;\n    return collectibleEmojiStatuses?.find((\n      status,\n    ) => status.type === 'collectible' && status.slug === starGiftUniqueSlug) as ApiEmojiStatusCollectible | undefined;\n  }, [starGiftUniqueSlug, collectibleEmojiStatuses]);\n\n  const isGiftUnique = gift && gift.type === 'starGiftUnique';\n  const canTakeOff = isGiftUnique && currenUniqueEmojiStatusSlug === gift.slug;\n  const canWear = userCollectibleStatus && !canTakeOff;\n\n  const canFocusUpgrade = Boolean(savedGift?.upgradeMsgId);\n  const canUpdate = !canFocusUpgrade && savedGift?.inputGift && (\n    isTargetChat ? hasAdminRights : renderingTargetPeer?.id === currentUserId\n  );\n\n  const handleClose = useLastCallback(() => {\n    closeGiftInfoModal();\n  });\n\n  const handleCopyLink = useLastCallback(() => {\n    if (!starGiftUniqueLink) return;\n    copyTextToClipboard(starGiftUniqueLink);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  });\n\n  const handleLinkShare = useLastCallback(() => {\n    if (!starGiftUniqueLink) return;\n    openChatWithDraft({ text: { text: starGiftUniqueLink } });\n    handleClose();\n  });\n\n  const handleTransfer = useLastCallback(() => {\n    if (savedGift?.gift.type !== 'starGiftUnique') return;\n    openGiftTransferModal({ gift: savedGift });\n  });\n\n  const handleWear = useLastCallback(() => {\n    if (gift?.type !== 'starGiftUnique' || !userCollectibleStatus) return;\n    openGiftStatusInfoModal({ emojiStatus: userCollectibleStatus });\n  });\n\n  const handleTakeOff = useLastCallback(() => {\n    if (canTakeOff) {\n      setEmojiStatus({\n        emojiStatus: { type: 'regular', documentId: DEFAULT_STATUS_ICON_ID },\n      });\n    }\n  });\n\n  const handleFocusUpgraded = useLastCallback(() => {\n    if (!savedGift?.upgradeMsgId || !renderingTargetPeer) return;\n    const { upgradeMsgId } = savedGift;\n    focusMessage({ chatId: renderingTargetPeer.id, messageId: upgradeMsgId! });\n    handleClose();\n  });\n\n  const handleTriggerVisibility = useLastCallback(() => {\n    const { inputGift, isUnsaved } = savedGift!;\n    changeGiftVisibility({ gift: inputGift!, shouldUnsave: !isUnsaved });\n    handleClose();\n  });\n\n  const handleConvertToStars = useLastCallback(() => {\n    const { inputGift } = savedGift!;\n    convertGiftToStars({ gift: inputGift! });\n    closeConvertConfirm();\n    handleClose();\n  });\n\n  const handleOpenUpgradeModal = useLastCallback(() => {\n    if (!savedGift) return;\n    openGiftUpgradeModal({ giftId: savedGift.gift.id, gift: savedGift });\n  });\n\n  const giftAttributes = useMemo(() => {\n    return gift && getGiftAttributes(gift);\n  }, [gift]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isMenuOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isMenuOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel={lang('AriaMoreButton')}\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [lang]);\n\n  const renderFooterButton = useLastCallback(() => {\n    if (canFocusUpgrade) {\n      return (\n        <Button size=\"smaller\" onClick={handleFocusUpgraded}>\n          {lang('GiftInfoViewUpgraded')}\n        </Button>\n      );\n    }\n\n    if (canUpdate && savedGift?.alreadyPaidUpgradeStars && !savedGift.upgradeMsgId) {\n      return (\n        <Button size=\"smaller\" isShiny onClick={handleOpenUpgradeModal}>\n          {lang('GiftInfoUpgradeForFree')}\n        </Button>\n      );\n    }\n\n    return (\n      <Button size=\"smaller\" onClick={handleClose}>\n        {lang('OK')}\n      </Button>\n    );\n  });\n\n  const modalData = useMemo(() => {\n    if (!typeGift || !gift) {\n      return undefined;\n    }\n\n    const {\n      fromId, isNameHidden, starsToConvert, isUnsaved, isConverted,\n    } = savedGift || {};\n\n    const isVisibleForMe = isNameHidden && renderingTargetPeer;\n\n    const description = (() => {\n      if (!savedGift) return lang('GiftInfoSoldOutDescription');\n      if (isTargetChat) return undefined;\n\n      if (savedGift.upgradeMsgId) return lang('GiftInfoDescriptionUpgraded');\n      if (savedGift.canUpgrade && savedGift.alreadyPaidUpgradeStars) {\n        return canUpdate\n          ? lang('GiftInfoDescriptionFreeUpgrade')\n          : lang('GiftInfoPeerDescriptionFreeUpgradeOut', { peer: getPeerTitle(lang, renderingTargetPeer!)! });\n      }\n      if (!canUpdate && !isSender) return undefined;\n      if (isConverted && starsToConvert) {\n        return canUpdate\n          ? lang('GiftInfoDescriptionConverted', {\n            amount: formatInteger(starsToConvert!),\n          }, {\n            pluralValue: starsToConvert,\n            withNodes: true,\n            withMarkdown: true,\n          })\n          : lang('GiftInfoPeerDescriptionOutConverted', {\n            amount: formatInteger(starsToConvert!),\n            peer: getPeerTitle(lang, renderingTargetPeer!)!,\n          }, {\n            pluralValue: starsToConvert,\n            withNodes: true,\n            withMarkdown: true,\n          });\n      }\n\n      if (savedGift.canUpgrade && canUpdate) {\n        return lang('GiftInfoDescriptionUpgrade', {\n          amount: formatInteger(starsToConvert!),\n        }, {\n          pluralValue: starsToConvert!,\n          withNodes: true,\n          withMarkdown: true,\n        });\n      }\n\n      return canUpdate\n        ? lang('GiftInfoDescription', {\n          amount: starsToConvert,\n        }, {\n          withNodes: true,\n          withMarkdown: true,\n          pluralValue: starsToConvert || 0,\n        })\n        : lang('GiftInfoPeerDescriptionOut', {\n          amount: starsToConvert,\n          peer: getPeerTitle(lang, renderingTargetPeer!)!,\n        }, {\n          withNodes: true,\n          withMarkdown: true,\n          pluralValue: starsToConvert || 0,\n        });\n    })();\n\n    function getTitle() {\n      if (isGiftUnique) return gift.title;\n      if (!savedGift) return lang('GiftInfoSoldOutTitle');\n\n      return canUpdate ? lang('GiftInfoReceived') : lang('GiftInfoTitle');\n    }\n\n    const uniqueGiftContextMenu = (\n      <DropdownMenu\n        className=\"with-menu-transitions\"\n        trigger={SettingsMenuButton}\n        positionX=\"right\"\n      >\n        <MenuItem icon=\"link-badge\" onClick={handleCopyLink}>\n          {lang('CopyLink')}\n        </MenuItem>\n        <MenuItem icon=\"forward\" onClick={handleLinkShare}>\n          {lang('Share')}\n        </MenuItem>\n        {canUpdate && isGiftUnique && (\n          <MenuItem icon=\"diamond\" onClick={handleTransfer}>\n            {lang('GiftInfoTransfer')}\n          </MenuItem>\n        )}\n        {canWear && (\n          <MenuItem icon=\"crown-wear\" onClick={handleWear}>\n            {lang('GiftInfoWear')}\n          </MenuItem>\n        )}\n        {canTakeOff && (\n          <MenuItem icon=\"crown-take-off\" onClick={handleTakeOff}>\n            {lang('GiftInfoTakeOff')}\n          </MenuItem>\n        )}\n      </DropdownMenu>\n    );\n\n    const uniqueGiftModalHeader = (\n      <div\n        className={styles.modalHeader}\n      >\n        <Button\n          className={styles.modalCloseButton}\n          round\n          color=\"translucent-white\"\n          size=\"smaller\"\n          ariaLabel={lang('Close')}\n          onClick={handleClose}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        {isOpen && uniqueGiftContextMenu}\n      </div>\n    );\n\n    const uniqueGiftHeader = isGiftUnique && (\n      <div className={buildClassName(styles.header, styles.uniqueGift)}>\n        <UniqueGiftHeader\n          backdropAttribute={giftAttributes!.backdrop!}\n          patternAttribute={giftAttributes!.pattern!}\n          modelAttribute={giftAttributes!.model!}\n          title={gift.title}\n          subtitle={lang('GiftInfoCollectible', { number: gift.number })}\n        />\n      </div>\n    );\n\n    const regularHeader = (\n      <div className={styles.header}>\n        <AnimatedIconFromSticker\n          className={styles.giftSticker}\n          sticker={giftSticker}\n          size={STICKER_SIZE}\n        />\n        <h1 className={styles.title}>\n          {getTitle()}\n        </h1>\n        {description && (\n          <p className={buildClassName(styles.description, !savedGift && gift?.type === 'starGift' && styles.soldOut)}>\n            {description}\n          </p>\n        )}\n      </div>\n    );\n\n    const tableData: TableData = [];\n    if (gift.type === 'starGift') {\n      if ((fromId || isNameHidden)) {\n        tableData.push([\n          lang('GiftInfoFrom'),\n          fromId ? { chatId: fromId } : (\n            <>\n              <Avatar size=\"small\" peer={CUSTOM_PEER_HIDDEN} />\n              <span className={styles.unknown}>{oldLang(CUSTOM_PEER_HIDDEN.titleKey!)}</span>\n            </>\n          ),\n        ]);\n      }\n\n      if (savedGift?.date) {\n        tableData.push([\n          lang('GiftInfoDate'),\n          formatDateTimeToString(savedGift.date * 1000, lang.code, true),\n        ]);\n      }\n\n      if (gift.firstSaleDate) {\n        tableData.push([\n          lang('GiftInfoFirstSale'),\n          formatDateTimeToString(gift.firstSaleDate * 1000, lang.code, true),\n        ]);\n      }\n\n      if (gift.lastSaleDate) {\n        tableData.push([\n          lang('GiftInfoLastSale'),\n          formatDateTimeToString(gift.lastSaleDate * 1000, lang.code, true),\n        ]);\n      }\n\n      const starsValue = gift.stars + (savedGift?.alreadyPaidUpgradeStars || 0);\n\n      tableData.push([\n        lang('GiftInfoValue'),\n        <div className={styles.giftValue}>\n          {formatStarsAsIcon(lang, starsValue, { className: styles.starAmountIcon })}\n          {canUpdate && canConvertDifference > 0 && Boolean(starsToConvert) && (\n            <BadgeButton onClick={openConvertConfirm}>\n              {lang('GiftInfoConvert', { amount: starsToConvert }, { pluralValue: starsToConvert })}\n            </BadgeButton>\n          )}\n        </div>,\n      ]);\n\n      if (gift.availabilityTotal) {\n        tableData.push([\n          lang('GiftInfoAvailability'),\n          lang('GiftInfoAvailabilityValue', {\n            count: gift.availabilityRemains || 0,\n            total: gift.availabilityTotal,\n          }, {\n            pluralValue: gift.availabilityRemains || 0,\n          }),\n        ]);\n      }\n\n      if (gift.upgradeStars && !savedGift?.upgradeMsgId) {\n        tableData.push([\n          lang('GiftInfoStatus'),\n          <div className={styles.giftValue}>\n            {lang('GiftInfoStatusNonUnique')}\n            {canUpdate && <BadgeButton onClick={handleOpenUpgradeModal}>{lang('GiftInfoUpgradeBadge')}</BadgeButton>}\n          </div>,\n        ]);\n      }\n\n      if (savedGift?.message) {\n        tableData.push([\n          undefined,\n          renderTextWithEntities(savedGift.message),\n        ]);\n      }\n    }\n\n    if (isGiftUnique) {\n      const { ownerName, ownerAddress, ownerId } = gift;\n      const {\n        model, backdrop, pattern, originalDetails,\n      } = giftAttributes || {};\n\n      if (ownerAddress) {\n        tableData.push([\n          lang('GiftInfoOwner'),\n          <span\n            className={styles.ownerAddress}\n            onClick={() => {\n              copyTextToClipboard(ownerAddress);\n              showNotification({\n                message: { key: 'WalletAddressCopied' },\n                icon: 'copy',\n              });\n            }}\n          >\n            {ownerAddress}\n            <Icon className={styles.copyIcon} name=\"copy\" />\n          </span>,\n        ]);\n      } else {\n        tableData.push([\n          lang('GiftInfoOwner'),\n          ownerId ? { chatId: ownerId, withEmojiStatus: true } : ownerName || '',\n        ]);\n      }\n\n      if (model) {\n        tableData.push([\n          lang('GiftAttributeModel'),\n          <span className={styles.uniqueAttribute}>\n            {model.name}<BadgeButton>{formatPercent(model.rarityPercent)}</BadgeButton>\n          </span>,\n        ]);\n      }\n\n      if (backdrop) {\n        tableData.push([\n          lang('GiftAttributeBackdrop'),\n          <span className={styles.uniqueAttribute}>\n            {backdrop.name}<BadgeButton>{formatPercent(backdrop.rarityPercent)}</BadgeButton>\n          </span>,\n        ]);\n      }\n\n      if (pattern) {\n        tableData.push([\n          lang('GiftAttributeSymbol'),\n          <span className={styles.uniqueAttribute}>\n            {pattern.name}<BadgeButton>{formatPercent(pattern.rarityPercent)}</BadgeButton>\n          </span>,\n        ]);\n      }\n\n      tableData.push([\n        lang('GiftInfoAvailability'),\n        lang('GiftInfoIssued', {\n          issued: gift.issuedCount,\n          total: gift.totalCount,\n        }),\n      ]);\n\n      if (originalDetails) {\n        const {\n          date, recipientId, message, senderId,\n        } = originalDetails;\n        const global = getGlobal(); // Peer titles do not need to be reactive\n\n        const openChat = (id: string) => {\n          openChatWithInfo({ id });\n          closeGiftInfoModal();\n        };\n\n        const recipient = selectPeer(global, recipientId)!;\n        const sender = senderId ? selectPeer(global, senderId) : undefined;\n\n        const formattedDate = formatDateTimeToString(date * 1000, lang.code, true);\n        const recipientLink = (\n          // eslint-disable-next-line react/jsx-no-bind\n          <Link onClick={() => openChat(recipientId)} isPrimary>\n            {getPeerTitle(lang, recipient)}\n          </Link>\n        );\n\n        let text: TeactNode | undefined;\n        if (!sender || senderId === recipientId) {\n          text = message ? lang('GiftInfoPeerOriginalInfoText', {\n            peer: recipientLink,\n            text: renderTextWithEntities(message),\n            date: formattedDate,\n          }, {\n            withNodes: true,\n          }) : lang('GiftInfoPeerOriginalInfo', {\n            peer: recipientLink,\n            date: formattedDate,\n          }, {\n            withNodes: true,\n          });\n        } else {\n          const senderLink = (\n            // eslint-disable-next-line react/jsx-no-bind\n            <Link onClick={() => openChat(sender.id)} isPrimary>\n              {getPeerTitle(lang, sender)}\n            </Link>\n          );\n          text = message ? lang('GiftInfoPeerOriginalInfoTextSender', {\n            peer: recipientLink,\n            sender: senderLink,\n            text: renderTextWithEntities(message),\n            date: formattedDate,\n          }, {\n            withNodes: true,\n          }) : lang('GiftInfoPeerOriginalInfoSender', {\n            peer: recipientLink,\n            date: formattedDate,\n            sender: senderLink,\n          }, {\n            withNodes: true,\n          });\n        }\n\n        tableData.push([\n          undefined,\n          <span>{text}</span>,\n        ]);\n      }\n    }\n\n    const footer = (\n      <div className={styles.footer}>\n        {canUpdate && (\n          <div className={styles.footerDescription}>\n            <div>\n              {lang(`GiftInfo${isTargetChat ? 'Channel' : ''}${isUnsaved ? 'Hidden' : 'Saved'}`, {\n                link: (\n                  <Link isPrimary onClick={handleTriggerVisibility}>\n                    {lang(`GiftInfoSaved${isUnsaved ? 'Show' : 'Hide'}`)}\n                  </Link>\n                ),\n              }, {\n                withNodes: true,\n              })}\n            </div>\n            {isVisibleForMe && (\n              <div>\n                {lang('GiftInfoSenderHidden')}\n              </div>\n            )}\n          </div>\n        )}\n        {renderFooterButton()}\n      </div>\n    );\n\n    return {\n      modalHeader: isGiftUnique ? uniqueGiftModalHeader : undefined,\n      header: isGiftUnique ? uniqueGiftHeader : regularHeader,\n      tableData,\n      footer,\n    };\n  }, [\n    typeGift, savedGift, renderingTargetPeer, giftSticker, lang,\n    canUpdate, canConvertDifference, isSender, oldLang,\n    gift, giftAttributes, renderFooterButton, isTargetChat,\n    SettingsMenuButton, isOpen, isGiftUnique, canWear, canTakeOff,\n  ]);\n\n  return (\n    <>\n      <TableInfoModal\n        isOpen={isOpen}\n        modalHeader={modalData?.modalHeader}\n        header={modalData?.header}\n        hasBackdrop={isGiftUnique}\n        tableData={modalData?.tableData}\n        footer={modalData?.footer}\n        className={styles.modal}\n        onClose={handleClose}\n      />\n      {savedGift && (\n        <ConfirmDialog\n          isOpen={isConvertConfirmOpen}\n          onClose={closeConvertConfirm}\n          confirmHandler={handleConvertToStars}\n          title={lang('GiftInfoConvertTitle')}\n        >\n          <div>\n            {lang('GiftInfoPeerConvertDescription', {\n              amount: formatStarsAsText(lang, savedGift.starsToConvert!),\n              peer: getPeerTitle(lang, renderingFromPeer!)!,\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n            })}\n          </div>\n          {canConvertDifference > 0 && (\n            <div>\n              {lang('GiftInfoConvertDescriptionPeriod', {\n                count: conversionLeft,\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n                pluralValue: conversionLeft,\n              })}\n            </div>\n          )}\n          <div>{lang('GiftInfoConvertDescription2')}</div>\n        </ConfirmDialog>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const typeGift = modal?.gift;\n    const isSavedGift = typeGift && 'gift' in typeGift;\n\n    const fromId = isSavedGift && typeGift.fromId;\n    const fromPeer = fromId ? selectPeer(global, fromId) : undefined;\n    const targetPeer = modal?.peerId ? selectPeer(global, modal.peerId) : undefined;\n    const chat = targetPeer && isApiPeerChat(targetPeer) ? targetPeer : undefined;\n    const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const currentUserEmojiStatus = currentUser?.emojiStatus;\n    const collectibleEmojiStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      fromPeer,\n      targetPeer,\n      currentUserId: global.currentUserId,\n      starGiftMaxConvertPeriod: global.appConfig?.starGiftMaxConvertPeriod,\n      hasAdminRights,\n      currentUserEmojiStatus,\n      collectibleEmojiStatuses,\n    };\n  },\n)(GiftInfoModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"footer\":\"EWaVCxY4\",\"footerButton\":\"_Dt6RSQV\"};","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarGiftAttribute,\n  ApiStarGiftAttributeBackdrop,\n  ApiStarGiftAttributeModel,\n  ApiStarGiftAttributePattern,\n  ApiStarGiftRegular,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport { getPeerTitle, getStickerMediaHash } from '../../../../global/helpers';\nimport { selectPeer } from '../../../../global/selectors';\nimport { formatStarsAsIcon } from '../../../../util/localization/format';\nimport { fetch } from '../../../../util/mediaLoader';\n\nimport useInterval from '../../../../hooks/schedulers/useInterval';\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Button from '../../../ui/Button';\nimport Checkbox from '../../../ui/Checkbox';\nimport TableAboutModal, { type TableAboutData } from '../../common/TableAboutModal';\nimport UniqueGiftHeader from '../UniqueGiftHeader';\n\nimport styles from './GiftUpgradeModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftUpgradeModal'];\n};\n\ntype StateProps = {\n  recipient?: ApiPeer;\n};\n\ntype Attributes = {\n  model: ApiStarGiftAttributeModel;\n  pattern: ApiStarGiftAttributePattern;\n  backdrop: ApiStarGiftAttributeBackdrop;\n};\n\nconst PREVIEW_UPDATE_INTERVAL = 3000;\n\nconst GiftUpgradeModal = ({ modal, recipient }: OwnProps & StateProps) => {\n  const { closeGiftUpgradeModal, upgradeGift } = getActions();\n  const isOpen = Boolean(modal);\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const renderingRecipient = useCurrentOrPrev(recipient);\n  const [shouldKeepOriginalDetails, setShouldKeepOriginalDetails] = useState(false);\n\n  const [previewAttributes, setPreviewAttributes] = useState<Attributes | undefined>();\n\n  const lang = useLang();\n\n  const handleClose = useLastCallback(() => closeGiftUpgradeModal());\n\n  const handleUpgrade = useLastCallback(() => {\n    const gift = renderingModal?.gift;\n    if (!gift?.inputGift) return;\n\n    upgradeGift({\n      gift: gift.inputGift,\n      shouldKeepOriginalDetails,\n      upgradeStars: !gift.alreadyPaidUpgradeStars ? (gift.gift as ApiStarGiftRegular).upgradeStars : undefined,\n    });\n    handleClose();\n  });\n\n  const updatePreviewAttributes = useLastCallback(() => {\n    if (!renderingModal?.sampleAttributes) return;\n    setPreviewAttributes(getRandomAttributes(renderingModal.sampleAttributes, previewAttributes));\n  });\n\n  useInterval(updatePreviewAttributes, isOpen ? PREVIEW_UPDATE_INTERVAL : undefined, true);\n\n  useEffect(() => {\n    if (isOpen && renderingModal?.sampleAttributes) {\n      updatePreviewAttributes();\n    }\n  }, [isOpen, renderingModal?.sampleAttributes]);\n\n  // Preload stickers and patterns\n  useEffect(() => {\n    const attributes = renderingModal?.sampleAttributes;\n    if (!attributes) return;\n    const patternStickers = attributes.filter((attr): attr is ApiStarGiftAttributeModel => attr.type === 'pattern')\n      .map((attr) => attr.sticker);\n    const modelStickers = attributes.filter((attr): attr is ApiStarGiftAttributeModel => attr.type === 'model')\n      .map((attr) => attr.sticker);\n\n    const mediaHashes = [...patternStickers, ...modelStickers].map((sticker) => getStickerMediaHash(sticker, 'full'));\n    mediaHashes.forEach((hash) => {\n      fetch(hash, ApiMediaFormat.BlobUrl);\n    });\n  }, [renderingModal?.sampleAttributes]);\n\n  const modalData = useMemo(() => {\n    if (!previewAttributes) {\n      return undefined;\n    }\n\n    const gift = renderingModal?.gift;\n\n    const listItemData = [\n      ['diamond', lang('GiftUpgradeUniqueTitle'), lang('GiftUpgradeUniqueDescription')],\n      ['trade', lang('GiftUpgradeTransferableTitle'), lang('GiftUpgradeTransferableDescription')],\n      ['auction', lang('GiftUpgradeTradeableTitle'), lang('GiftUpgradeTradeableDescription')],\n    ] satisfies TableAboutData;\n\n    const subtitle = renderingRecipient\n      ? lang('GiftPeerUpgradeText', { peer: getPeerTitle(lang, renderingRecipient) })\n      : lang('GiftUpgradeTextOwn');\n\n    const header = (\n      <UniqueGiftHeader\n        modelAttribute={previewAttributes.model}\n        backdropAttribute={previewAttributes.backdrop}\n        patternAttribute={previewAttributes.pattern}\n        title={lang('GiftUpgradeTitle')}\n        subtitle={subtitle}\n      />\n    );\n\n    const footer = (\n      <div className={styles.footer}>\n        {!gift && (\n          <Button className={styles.footerButton} size=\"smaller\" onClick={handleClose}>\n            {lang('OK')}\n          </Button>\n        )}\n        {gift && (\n          <>\n            <Checkbox\n              label={lang('GiftUpgradeKeepDetails')}\n              onCheck={setShouldKeepOriginalDetails}\n              checked={shouldKeepOriginalDetails}\n            />\n            <Button className={styles.footerButton} size=\"smaller\" isShiny onClick={handleUpgrade}>\n              {gift.alreadyPaidUpgradeStars\n                ? lang('GeneralConfirm')\n                : lang('GiftUpgradeButton', {\n                  amount: formatStarsAsIcon(lang, (gift.gift as ApiStarGiftRegular).upgradeStars!, { asFont: true }),\n                }, { withNodes: true })}\n            </Button>\n          </>\n        )}\n      </div>\n    );\n\n    return {\n      listItemData,\n      header,\n      footer,\n    };\n  }, [previewAttributes, lang, renderingRecipient, renderingModal?.gift, shouldKeepOriginalDetails]);\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      header={modalData?.header}\n      footer={modalData?.footer}\n      listItemData={modalData?.listItemData}\n      hasBackdrop\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const recipientId = modal?.recipientId;\n    const recipient = recipientId ? selectPeer(global, recipientId) : undefined;\n\n    return {\n      recipient,\n    };\n  },\n)(GiftUpgradeModal));\n\nfunction getRandomAttributes(list: ApiStarGiftAttribute[], previousSelection?: Attributes): Attributes {\n  const models = list.filter((attr): attr is ApiStarGiftAttributeModel => (\n    attr.type === 'model' && attr.name !== previousSelection?.model.name\n  ));\n  const patterns = list.filter((attr): attr is ApiStarGiftAttributePattern => (\n    attr.type === 'pattern' && attr.name !== previousSelection?.pattern.name\n  ));\n  const backdrops = list.filter((attr): attr is ApiStarGiftAttributeBackdrop => (\n    attr.type === 'backdrop' && attr.name !== previousSelection?.backdrop.name\n  ));\n\n  const randomModel = models[Math.floor(Math.random() * models.length)];\n  const randomPattern = patterns[Math.floor(Math.random() * patterns.length)];\n  const randomBackdrop = backdrops[Math.floor(Math.random() * backdrops.length)];\n\n  return {\n    model: randomModel,\n    pattern: randomPattern,\n    backdrop: randomBackdrop,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"qL0cHbwS\",\"profileBlock\":\"t18QCmAb\",\"titleContainer\":\"q8w7tnmR\",\"radialPattern\":\"_1RfhkfB\",\"lockIcon\":\"jiPObOWv\",\"avatar\":\"JK2zOWA7\",\"userTitle\":\"lxxbgNCl\",\"status\":\"MLMdxkUg\",\"giftTitle\":\"wxg_5ou_\",\"infoDescription\":\"KSCLIMZm\",\"footer\":\"VDrvalBo\"};","import React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiUser,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { selectIsCurrentUserPremium, selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport buildStyle from '../../../../util/buildStyle';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useCustomEmoji from '../../../common/hooks/useCustomEmoji';\n\nimport Avatar from '../../../common/Avatar';\nimport FullNameTitle from '../../../common/FullNameTitle';\nimport Icon from '../../../common/icons/Icon';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport Button from '../../../ui/Button';\nimport TableAboutModal, { type TableAboutData } from '../../common/TableAboutModal';\n\nimport styles from './GiftStatusInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftStatusInfoModal'];\n};\n\ntype StateProps = {\n  currentUser: ApiUser;\n  isCurrentUserPremium?: boolean;\n};\n\nconst GiftStatusInfoModal = ({\n  modal,\n  currentUser,\n  isCurrentUserPremium,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftStatusInfoModal,\n    setEmojiStatus,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const { emojiStatus } = renderingModal || {};\n\n  const subtitleColor = emojiStatus?.textColor;\n\n  const patternIcon = useCustomEmoji(emojiStatus?.patternDocumentId);\n\n  const handleClose = useLastCallback(() => {\n    closeGiftStatusInfoModal();\n  });\n\n  const onWearClick = useLastCallback(() => {\n    if (emojiStatus) {\n      setEmojiStatus({ emojiStatus });\n    }\n    closeGiftStatusInfoModal();\n  });\n\n  const radialPatternBackdrop = useMemo(() => {\n    if (!emojiStatus || !isOpen) return undefined;\n\n    const backdropColors = [emojiStatus.centerColor, emojiStatus.edgeColor];\n    const patternColor = emojiStatus.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={patternIcon.customEmoji}\n      />\n    );\n  }, [emojiStatus, isOpen, patternIcon]);\n\n  const mockPeerWithStatus = useMemo(() => {\n    return {\n      ...currentUser,\n      emojiStatus,\n    } satisfies ApiUser;\n  }, [currentUser, emojiStatus]);\n\n  const header = useMemo(() => {\n    return (\n      <div className={styles.header}>\n        <div\n          className={buildClassName(styles.profileBlock)}\n          style={buildStyle(subtitleColor && `color: ${subtitleColor}`)}\n        >\n\n          {radialPatternBackdrop}\n          <Avatar peer={mockPeerWithStatus} size=\"jumbo\" className={styles.avatar} />\n          <FullNameTitle\n            peer={mockPeerWithStatus}\n            className={styles.userTitle}\n            withEmojiStatus\n            noFake\n            noVerified\n            statusSparklesColor={subtitleColor}\n          />\n          <p className={styles.status} style={buildStyle(subtitleColor && `color: ${subtitleColor}`)}>\n            {lang('Online')}\n          </p>\n        </div>\n        <div className={styles.titleContainer}>\n          <div className={styles.giftTitle}>{\n            lang('UniqueStatusWearTitle', {\n              gift: mockPeerWithStatus?.emojiStatus?.title,\n            })\n          }\n          </div>\n          <div className={styles.infoDescription}>{\n            lang('UniqueStatusBenefitsDescription')\n          }\n          </div>\n        </div>\n      </div>\n    );\n  }, [subtitleColor, radialPatternBackdrop, mockPeerWithStatus, lang]);\n\n  const listItemData = [\n    ['radial-badge', lang('UniqueStatusBadgeBenefitTitle'), lang('UniqueStatusBadgeDescription')],\n    ['unique-profile', lang('UniqueStatusProfileDesignBenefitTitle'), lang('UniqueStatusProfileDesignDescription')],\n    ['proof-of-ownership', lang('UniqueStatusProofOfOwnershipBenefitTitle'),\n      lang('UniqueStatusProofOfOwnershipDescription')],\n  ] satisfies TableAboutData;\n\n  const footer = useMemo(() => {\n    if (!isOpen) return undefined;\n    return (\n      <div className={styles.footer}>\n        <Button\n          size=\"smaller\"\n          onClick={onWearClick}\n        >\n          {lang('UniqueStatusWearButton')}\n          {!isCurrentUserPremium && <Icon name=\"lock-badge\" className={styles.lockIcon} />}\n        </Button>\n      </div>\n    );\n  }, [lang, isCurrentUserPremium, isOpen]);\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      header={header}\n      listItemData={listItemData}\n      footer={footer}\n      hasBackdrop\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!)!;\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      currentUser,\n      isCurrentUserPremium,\n    };\n  },\n)(GiftStatusInfoModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"LQgz8Nlx\",\"giftPreview\":\"hgs0ts_O\",\"backdrop\":\"OnBhMaBw\",\"description\":\"HBxB4QPY\",\"arrow\":\"kXTOUpfb\",\"noPassword\":\"BnqLhoKr\"};","import React, {\n  memo,\n  useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiStarGiftUnique } from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport type { CustomPeer } from '../../../../types';\n\nimport { getDays } from '../../../../util/dates/units';\nimport { getServerTime } from '../../../../util/serverTime';\nimport { getGiftAttributes } from '../../../common/helpers/gifts';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport PasswordForm from '../../../common/PasswordForm';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport Modal from '../../../ui/Modal';\n\nimport styles from './GiftWithdrawModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftWithdrawModal'];\n};\n\ntype StateProps = {\n  hasPassword?: boolean;\n  passwordHint?: string;\n};\n\nconst FRAGMENT_PEER: CustomPeer = {\n  isCustomPeer: true,\n  avatarIcon: 'fragment',\n  title: '',\n  customPeerAvatarColor: '#000000',\n};\nconst GIFT_STICKER_SIZE = 4.5 * REM;\n\nconst GiftWithdrawModal = ({ modal, hasPassword, passwordHint }: OwnProps & StateProps) => {\n  const { closeGiftWithdrawModal, clearGiftWithdrawError, processStarGiftWithdrawal } = getActions();\n  const isOpen = Boolean(modal);\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const lang = useLang();\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const gift = renderingModal?.gift?.gift as ApiStarGiftUnique;\n  const giftAttributes = gift && getGiftAttributes(gift);\n  const exportDelay = renderingModal?.gift?.canExportAt\n    ? Math.max(renderingModal.gift.canExportAt - getServerTime(), 0) : undefined;\n\n  const handleClose = useLastCallback(() => {\n    closeGiftWithdrawModal();\n  });\n\n  const handleSubmit = useLastCallback((password: string) => {\n    processStarGiftWithdrawal({\n      gift: renderingModal!.gift.inputGift!,\n      password,\n    });\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={lang('GiftWithdrawTitle')}\n      hasCloseButton\n      isSlim\n      onClose={handleClose}\n    >\n      {giftAttributes && (\n        <>\n          <div className={styles.header}>\n            <div className={styles.giftPreview}>\n              <RadialPatternBackground\n                className={styles.backdrop}\n                backgroundColors={[giftAttributes.backdrop!.centerColor, giftAttributes.backdrop!.edgeColor]}\n                patternColor={giftAttributes.backdrop?.patternColor}\n                patternIcon={giftAttributes.pattern?.sticker}\n              />\n              <AnimatedIconFromSticker\n                className={styles.sticker}\n                size={GIFT_STICKER_SIZE}\n                sticker={giftAttributes.model?.sticker}\n              />\n            </div>\n            <Icon name=\"next\" className={styles.arrow} />\n            <Avatar\n              peer={FRAGMENT_PEER}\n              size=\"giant\"\n              className={styles.avatar}\n            />\n          </div>\n          <p className={styles.description}>\n            {lang('GiftWithdrawDescription', {\n              gift: `${gift.title} #${gift.number}`,\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n              renderTextFilters: ['br'],\n            })}\n          </p>\n        </>\n      )}\n      {Boolean(exportDelay) && (\n        <p className={styles.exportHint}>\n          {lang('GiftWithdrawWait', { days: getDays(exportDelay) }, { pluralValue: getDays(exportDelay) })}\n        </p>\n      )}\n      {!hasPassword && <span className={styles.noPassword}>{lang('ErrorPasswordMissing')}</span>}\n      {hasPassword && !exportDelay && (\n        <PasswordForm\n          shouldShowSubmit\n          placeholder={lang('CheckPasswordPlaceholder')}\n          error={renderingModal?.errorKey && lang.withRegular(renderingModal?.errorKey)}\n          description={lang('CheckPasswordDescription')}\n          clearError={clearGiftWithdrawError}\n          isLoading={renderingModal?.isLoading}\n          hint={passwordHint}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isOpen}\n          onChangePasswordVisibility={setShouldShowPassword}\n          submitLabel={lang('GiftWithdrawSubmit')}\n          onSubmit={handleSubmit}\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n      twoFaSettings: {\n        hint: passwordHint,\n      },\n    } = global;\n\n    return {\n      hasPassword,\n      passwordHint,\n    };\n  },\n)(GiftWithdrawModal));\n","import {\n  getIsHeavyAnimating, useCallback, useRef, useState,\n} from '../lib/teact/teact';\n\nimport useForceUpdate from './useForceUpdate';\nimport useHeavyAnimation from './useHeavyAnimation';\nimport useRunDebounced from './useRunDebounced';\nimport useSyncEffect from './useSyncEffect';\n\nexport default function useDebouncedMemo<R extends any, D extends any[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const [value, setValue] = useState<R>();\n  const { isFrozen, updateWhenUnfrozen } = useHeavyAnimationFreeze();\n  const runDebounced = useRunDebounced(ms, true);\n\n  useSyncEffect(() => {\n    if (isFrozen) {\n      updateWhenUnfrozen();\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n\nfunction useHeavyAnimationFreeze() {\n  const isPending = useRef(false);\n\n  const updateWhenUnfrozen = useCallback(() => {\n    isPending.current = true;\n  }, []);\n\n  const forceUpdate = useForceUpdate();\n  const handleUnfreeze = useCallback(() => {\n    if (!isPending.current) {\n      return;\n    }\n\n    isPending.current = false;\n    forceUpdate();\n  }, [forceUpdate]);\n  useHeavyAnimation(noop, handleUnfreeze);\n\n  return {\n    isFrozen: getIsHeavyAnimating(),\n    updateWhenUnfrozen,\n  };\n}\n\nfunction noop() {\n}\n","import { useState } from '../lib/teact/teact';\n\nimport type { ApiChat } from '../api/types';\n\nimport { callApi } from '../api/gramjs';\nimport useAsync from './useAsync';\nimport useDebouncedMemo from './useDebouncedMemo';\nimport useLastCallback from './useLastCallback';\n\nconst DEBOUNCE_TIMEOUT = 300;\n\nexport async function peerGlobalSearch(query: string) {\n  const searchResult = await callApi('searchChats', { query });\n  if (!searchResult) return undefined;\n\n  const ids = [...searchResult.accountResultIds, ...searchResult.globalResultIds];\n\n  return ids;\n}\n\nexport function prepareChatMemberSearch(chat: ApiChat) {\n  return async (query: string) => {\n    const searchResult = await callApi('fetchMembers', {\n      chat,\n      memberFilter: 'search',\n      query,\n    });\n\n    return searchResult?.members?.map((member) => member.userId) || [];\n  };\n}\n\nexport default function usePeerSearch({\n  query,\n  queryFn = peerGlobalSearch,\n  defaultValue,\n  debounceTimeout = DEBOUNCE_TIMEOUT,\n  isDisabled,\n}: {\n  query: string;\n  queryFn?: (query: string) => Promise<string[] | undefined>;\n  defaultValue?: string[];\n  debounceTimeout?: number;\n  isDisabled?: boolean;\n}) {\n  const debouncedQuery = useDebouncedMemo(() => query, debounceTimeout, [query]);\n  const [currentResultsQuery, setCurrentResultsQuery] = useState<string>('');\n  const searchQuery = !query ? query : debouncedQuery; // Ignore debounce if query is empty\n  const queryCallback = useLastCallback(queryFn);\n\n  const result = useAsync(async () => {\n    if (!searchQuery || isDisabled) {\n      setCurrentResultsQuery('');\n      return Promise.resolve(defaultValue);\n    }\n\n    const answer = await queryCallback(searchQuery);\n    setCurrentResultsQuery(searchQuery);\n    return answer;\n  }, [searchQuery, defaultValue, queryCallback, isDisabled], defaultValue);\n\n  return {\n    ...result,\n    currentResultsQuery,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"PvaNNycU\",\"giftPreview\":\"nCQxWKdu\",\"backdrop\":\"JCP9JNuS\",\"arrow\":\"p_1cyCau\"};","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiStarGiftUnique } from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport type { UniqueCustomPeer } from '../../../../types';\n\nimport { ALL_FOLDER_ID } from '../../../../config';\nimport { getPeerTitle } from '../../../../global/helpers';\nimport { selectCanGift, selectPeer } from '../../../../global/selectors';\nimport { unique } from '../../../../util/iteratees';\nimport { formatStarsAsIcon, formatStarsAsText } from '../../../../util/localization/format';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { getGiftAttributes } from '../../../common/helpers/gifts';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport sortChatIds from '../../../common/helpers/sortChatIds';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport usePeerSearch from '../../../../hooks/usePeerSearch';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport PickerModal from '../../../common/pickers/PickerModal';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\n\nimport styles from './GiftTransferModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftTransferModal'];\n};\n\ntype StateProps = {\n  contactIds?: string[];\n  currentUserId?: string;\n};\n\ntype Categories = 'withdraw';\n\nconst AVATAR_SIZE = 4 * REM;\nconst GIFT_STICKER_SIZE = 3 * REM;\n\nconst GiftTransferModal = ({\n  modal, contactIds, currentUserId,\n}: OwnProps & StateProps) => {\n  const { closeGiftTransferModal, openGiftWithdrawModal, transferGift } = getActions();\n  const isOpen = Boolean(modal);\n\n  const lang = useLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const uniqueGift = renderingModal?.gift?.gift as ApiStarGiftUnique;\n  const giftAttributes = uniqueGift && getGiftAttributes(uniqueGift);\n\n  const [selectedId, setSelectedId] = useState<string | undefined>();\n\n  const renderingSelectedPeerId = useCurrentOrPrev(selectedId);\n  const renderingSelectedPeer = useMemo(() => {\n    const global = getGlobal();\n    return renderingSelectedPeerId ? selectPeer(global, renderingSelectedPeerId) : undefined;\n  }, [renderingSelectedPeerId]);\n\n  const orderedChatIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n\n  const sortedLocalIds = useMemo(() => {\n    return unique([\n      ...(contactIds || []),\n      ...(orderedChatIds || []),\n    ]);\n  }, [contactIds, orderedChatIds]);\n\n  const { result: foundIds, currentResultsQuery } = usePeerSearch({\n    query: searchQuery,\n    defaultValue: sortedLocalIds,\n  });\n\n  const isLoading = currentResultsQuery !== searchQuery;\n\n  const categories = useMemo(() => {\n    if (currentResultsQuery) return MEMO_EMPTY_ARRAY;\n\n    return [{\n      type: 'withdraw',\n      isCustomPeer: true,\n      avatarIcon: 'toncoin',\n      peerColorId: 5,\n      title: lang('GiftTransferTON'),\n    }] satisfies UniqueCustomPeer<Categories>[];\n  }, [lang, currentResultsQuery]);\n\n  const handleCategoryChange = useLastCallback((category: Categories) => {\n    if (category !== 'withdraw') return;\n\n    openGiftWithdrawModal({\n      gift: renderingModal!.gift,\n    });\n    closeGiftTransferModal();\n  });\n\n  const displayIds = useMemo(() => {\n    if (isLoading) return MEMO_EMPTY_ARRAY;\n    const global = getGlobal();\n\n    return sortChatIds((foundIds || []).filter((peerId) => (\n      peerId !== currentUserId && selectCanGift(global, peerId)\n    )),\n    false);\n  }, [isLoading, foundIds, currentUserId]);\n\n  const closeConfirmModal = useLastCallback(() => {\n    setSelectedId(undefined);\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      setSelectedId(undefined);\n    }\n  }, [isOpen]);\n\n  const handleTransfer = useLastCallback(() => {\n    if (!renderingModal?.gift.inputGift) return;\n    transferGift({\n      gift: renderingModal.gift.inputGift,\n      recipientId: renderingSelectedPeerId!,\n      transferStars: renderingModal.gift.transferStars,\n    });\n\n    closeConfirmModal();\n    closeGiftTransferModal();\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={closeGiftTransferModal}\n      title={lang('GiftTransferTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      ignoreFreeze\n    >\n      <PeerPicker<Categories>\n        itemIds={displayIds}\n        categories={categories}\n        onSelectedCategoryChange={handleCategoryChange}\n        withDefaultPadding\n        withPeerUsernames\n        isSearchable\n        noScrollRestore\n        isLoading={isLoading}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onFilterChange={setSearchQuery}\n        onSelectedIdChange={setSelectedId}\n      />\n      {giftAttributes && (\n        <ConfirmDialog\n          isOpen={Boolean(selectedId)}\n          noDefaultTitle\n          onClose={closeConfirmModal}\n          confirmLabel={renderingModal?.gift.transferStars\n            ? lang(\n              'GiftTransferConfirmButton',\n              { amount: formatStarsAsIcon(lang, renderingModal.gift.transferStars, { asFont: true }) },\n              { withNodes: true },\n            ) : lang('GiftTransferConfirmButtonFree')}\n          confirmHandler={handleTransfer}\n        >\n          <div className={styles.header}>\n            <div className={styles.giftPreview}>\n              <RadialPatternBackground\n                className={styles.backdrop}\n                backgroundColors={[giftAttributes.backdrop!.centerColor, giftAttributes.backdrop!.edgeColor]}\n                patternColor={giftAttributes.backdrop?.patternColor}\n                patternIcon={giftAttributes.pattern?.sticker}\n              />\n              <AnimatedIconFromSticker\n                className={styles.sticker}\n                size={GIFT_STICKER_SIZE}\n                sticker={giftAttributes.model?.sticker}\n              />\n            </div>\n            <Icon name=\"next\" className={styles.arrow} />\n            <Avatar\n              peer={renderingSelectedPeer}\n              size={AVATAR_SIZE}\n              className={styles.avatar}\n            />\n          </div>\n          <p>\n            {renderingModal?.gift.transferStars\n              ? lang('GiftTransferConfirmDescription', {\n                gift: lang('GiftUnique', { title: uniqueGift.title, number: uniqueGift.number }),\n                amount: formatStarsAsText(lang, renderingModal.gift.transferStars),\n                peer: getPeerTitle(lang, renderingSelectedPeer!),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })\n              : lang('GiftTransferConfirmDescriptionFree', {\n                gift: lang('GiftUnique', { title: uniqueGift.title, number: uniqueGift.number }),\n                peer: getPeerTitle(lang, renderingSelectedPeer!),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })}\n          </p>\n        </ConfirmDialog>\n      )}\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { contactList, currentUserId } = global;\n\n    return {\n      contactIds: contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(GiftTransferModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"hJUqHi4B\",\"clickable\":\"hjDEmFaT\"};","import React from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './BadgeButton.module.scss';\n\ntype OwnProps = {\n  children: React.ReactNode;\n  className?: string;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n};\n\nconst BadgeButton = ({\n  children,\n  className,\n  onClick,\n}: OwnProps) => {\n  return (\n    <div className={buildClassName(styles.root, onClick && styles.clickable, className)} onClick={onClick}>\n      {children}\n    </div>\n  );\n};\n\nexport default BadgeButton;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"hyRfEyRz\",\"top\":\"p_Ny8jqJ\",\"badge\":\"QRrryqp4\",\"text\":\"I5jdPgFL\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiPeer, ApiWebDocument } from '../../api/types';\nimport type { CustomPeer } from '../../types';\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport Avatar, { type AvatarSize } from './Avatar';\nimport Icon from './icons/Icon';\n\nimport styles from './PeerBadge.module.scss';\n\ntype OwnProps = {\n  peer?: ApiPeer | CustomPeer;\n  avatarWebPhoto?: ApiWebDocument;\n  avatarSize?: AvatarSize;\n  text?: string;\n  badgeText?: string;\n  badgeIcon?: IconName;\n  className?: string;\n  badgeClassName?: string;\n  badgeIconClassName?: string;\n  textClassName?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst PeerBadge = ({\n  peer: avatarPeer,\n  avatarWebPhoto,\n  avatarSize,\n  text,\n  badgeText,\n  badgeIcon,\n  className,\n  badgeClassName,\n  badgeIconClassName,\n  textClassName,\n  onClick,\n}: OwnProps) => {\n  return (\n    <div\n      className={buildClassName(styles.root, onClick && styles.clickable, className)}\n      onClick={onClick}\n    >\n      <div className={styles.top}>\n        <Avatar size={avatarSize} peer={avatarPeer} webPhoto={avatarWebPhoto} />\n        {badgeText && (\n          <div className={buildClassName(styles.badge, badgeClassName)}>\n            {badgeIcon && <Icon name={badgeIcon} className={badgeIconClassName} />}\n            {badgeText}\n          </div>\n        )}\n      </div>\n      {text && <p className={buildClassName(styles.text, textClassName)}>{text}</p>}\n    </div>\n  );\n};\n\nexport default memo(PeerBadge);\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport Modal, { type OwnProps as ModalProps } from '../../ui/Modal';\n\nimport styles from './PickerModal.module.scss';\n\ntype OwnProps = {\n  confirmButtonText?: string;\n  isConfirmDisabled?: boolean;\n  shouldAdaptToSearch?: boolean;\n  withFixedHeight?: boolean;\n  withPremiumGradient?: boolean;\n  onConfirm?: NoneToVoidFunction;\n} & ModalProps;\n\nconst PickerModal = ({\n  confirmButtonText,\n  isConfirmDisabled,\n  shouldAdaptToSearch,\n  withFixedHeight,\n  onConfirm,\n  withPremiumGradient,\n  ...modalProps\n}: OwnProps) => {\n  const lang = useOldLang();\n  const hasButton = Boolean(confirmButtonText || onConfirm);\n\n  return (\n    <Modal\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...modalProps}\n      isSlim\n      className={buildClassName(\n        shouldAdaptToSearch && styles.withSearch,\n        withFixedHeight && styles.fixedHeight,\n        modalProps.className,\n      )}\n      contentClassName={buildClassName(styles.content, modalProps.contentClassName)}\n      headerClassName={buildClassName(styles.header, modalProps.headerClassName)}\n    >\n      {modalProps.children}\n      {hasButton && (\n        <div className={styles.buttonWrapper}>\n          <Button\n            withPremiumGradient={withPremiumGradient}\n            onClick={onConfirm || modalProps.onClose}\n            color=\"primary\"\n            size=\"smaller\"\n            disabled={isConfirmDisabled}\n          >\n            {confirmButtonText || lang('Confirm')}\n          </Button>\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(PickerModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"FuFYE0AA\",\"fixedHeight\":\"CrEsDylb\",\"withSearch\":\"WGSZ8u75\",\"header\":\"iEptOmIp\",\"buttonWrapper\":\"HqeDTaSr\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LAh8evux\",\"title\":\"yfODVQ1M\",\"description\":\"QaQn08BX\",\"secondary\":\"sQZslvAr\",\"topIcon\":\"jySLtQNG\",\"listItemIcon\":\"hQbEPsTU\",\"content\":\"hrizpMDe\",\"separator\":\"En1zD2cT\"};","import React, { memo, type TeactNode } from '../../../lib/teact/teact';\n\nimport type { IconName } from '../../../types/icons';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\n\nimport styles from './TableAboutModal.module.scss';\n\nexport type TableAboutData = [IconName | undefined, TeactNode, TeactNode][];\n\ntype OwnProps = {\n  contentClassName?: string;\n  isOpen?: boolean;\n  listItemData?: TableAboutData;\n  headerIconName?: IconName;\n  header?: TeactNode;\n  footer?: TeactNode;\n  buttonText?: string;\n  hasBackdrop?: boolean;\n  withSeparator?: boolean;\n  onClose: NoneToVoidFunction;\n  onButtonClick?: NoneToVoidFunction;\n};\n\nconst TableAboutModal = ({\n  isOpen,\n  listItemData,\n  headerIconName,\n  header,\n  footer,\n  buttonText,\n  hasBackdrop,\n  withSeparator,\n  onClose,\n  onButtonClick,\n  contentClassName,\n}: OwnProps) => {\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={buildClassName(styles.root, contentClassName)}\n      contentClassName={styles.content}\n      hasAbsoluteCloseButton\n      absoluteCloseButtonColor={hasBackdrop ? 'translucent-white' : undefined}\n      onClose={onClose}\n    >\n      {headerIconName && <div className={styles.topIcon}><Icon name={headerIconName} /></div>}\n      {header}\n      <div>\n        {listItemData?.map(([icon, title, subtitle]) => {\n          return (\n            <ListItem\n              isStatic\n              multiline\n              icon={icon}\n              iconClassName={styles.listItemIcon}\n            >\n              <span className=\"title\">{title}</span>\n              <span className=\"subtitle\">{subtitle}</span>\n            </ListItem>\n          );\n        })}\n      </div>\n      {withSeparator && <Separator className={styles.separator} />}\n      {footer}\n      {buttonText && (\n        <Button size=\"smaller\" onClick={onButtonClick || onClose}>{buttonText}</Button>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(TableAboutModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"KYHkJ9Qf\",\"title\":\"AwnUe4Qk\",\"value\":\"JGH6P9Az\",\"table\":\"DFRB0Ad4\",\"noFooter\":\"cSamlkt9\",\"cell\":\"Cnh5ENvm\",\"fullWidth\":\"UssCZwgy\",\"avatar\":\"SHQbPR5Y\",\"chatItem\":\"aS9U4hiQ\"};","import React, { memo, type TeactNode } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './TableInfoModal.module.scss';\n\ntype ChatItem = { chatId: string; withEmojiStatus?: boolean };\n\nexport type TableData = [TeactNode | undefined, TeactNode | ChatItem][];\n\ntype OwnProps = {\n  isOpen?: boolean;\n  title?: string;\n  tableData?: TableData;\n  headerAvatarPeer?: ApiPeer | CustomPeer;\n  header?: TeactNode;\n  modalHeader?: TeactNode;\n  footer?: TeactNode;\n  buttonText?: string;\n  className?: string;\n  hasBackdrop?: boolean;\n  onClose: NoneToVoidFunction;\n  onButtonClick?: NoneToVoidFunction;\n};\n\nconst TableInfoModal = ({\n  isOpen,\n  title,\n  tableData,\n  headerAvatarPeer,\n  header,\n  modalHeader,\n  footer,\n  buttonText,\n  className,\n  hasBackdrop,\n  onClose,\n  onButtonClick,\n}: OwnProps) => {\n  const { openChat } = getActions();\n  const handleOpenChat = useLastCallback((peerId: string) => {\n    openChat({ id: peerId });\n    onClose();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton={Boolean(title)}\n      hasAbsoluteCloseButton={!title}\n      absoluteCloseButtonColor={hasBackdrop ? 'translucent-white' : undefined}\n      isSlim\n      header={modalHeader}\n      title={title}\n      className={className}\n      contentClassName={styles.content}\n      onClose={onClose}\n    >\n      {headerAvatarPeer && (\n        <Avatar peer={headerAvatarPeer} size=\"jumbo\" className={styles.avatar} />\n      )}\n      {header}\n      <div className={styles.table}>\n        {tableData?.map(([label, value]) => (\n          <>\n            {label && <div className={buildClassName(styles.cell, styles.title)}>{label}</div>}\n            <div className={buildClassName(styles.cell, styles.value, !label && styles.fullWidth)}>\n              {typeof value === 'object' && 'chatId' in value ? (\n                <PeerChip\n                  peerId={value.chatId}\n                  className={styles.chatItem}\n                  forceShowSelf\n                  withEmojiStatus={value.withEmojiStatus}\n                  clickArg={value.chatId}\n                  onClick={handleOpenChat}\n                />\n              ) : value}\n            </div>\n          </>\n        ))}\n      </div>\n      {footer}\n      {buttonText && (\n        <Button\n          className={!footer ? styles.noFooter : undefined}\n          size=\"smaller\"\n          onClick={onButtonClick || onClose}\n        >{buttonText}\n        </Button>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(TableInfoModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"options\":\"OnCj9kef\",\"option\":\"tpTHQAUF\",\"active\":\"U_9MXPG5\",\"wideOption\":\"dJcJl33b\",\"optionTop\":\"x9G4lqMf\",\"stackedStars\":\"etXLebjM\",\"stackedStar\":\"swttXv9P\",\"optionBottom\":\"tK7La7L2\",\"moreOptions\":\"AWXBaWLW\",\"iconDown\":\"zWYHZJmd\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\n\nimport type { ApiStarGiveawayOption, ApiStarTopupOption } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\n\nimport styles from './StarTopupOptionList.module.scss';\n\nconst MAX_STARS_COUNT = 6;\n\ntype OwnProps = {\n  isActive?: boolean;\n  options?: ApiStarTopupOption[] | ApiStarGiveawayOption[];\n  selectedStarOption?: ApiStarTopupOption | ApiStarGiveawayOption;\n  selectedStarCount?: number;\n  starsNeeded?: number;\n  className?: string;\n  onClick: (option: ApiStarTopupOption | ApiStarGiveawayOption) => void;\n};\n\nconst StarTopupOptionList: FC<OwnProps> = ({\n  isActive,\n  className,\n  options,\n  selectedStarOption,\n  selectedStarCount,\n  starsNeeded,\n  onClick,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [areOptionsExtended, markOptionsExtended, unmarkOptionsExtended] = useFlag();\n\n  useEffect(() => {\n    if (!isActive) {\n      unmarkOptionsExtended();\n    }\n  }, [isActive]);\n\n  const [renderingOptions, canExtend] = useMemo(() => {\n    if (!options) return [undefined, false];\n\n    const maxOption = options.reduce((max, option) => (\n      max.stars > option.stars ? max : option\n    ));\n    const forceShowAll = starsNeeded && maxOption.stars < starsNeeded;\n\n    const result: { option: ApiStarTopupOption | ApiStarGiveawayOption; starsCount: number; isWide: boolean }[] = [];\n    let currentStackedStarsCount = 0;\n    let canExtendOptions = false;\n    options.forEach((option, index) => {\n      if (!option.isExtended) currentStackedStarsCount++;\n\n      if (starsNeeded && !forceShowAll && option.stars < starsNeeded) return;\n      if (!areOptionsExtended && option.isExtended) {\n        canExtendOptions = true;\n        return;\n      }\n      result.push({\n        option,\n        starsCount: Math.min(currentStackedStarsCount, MAX_STARS_COUNT),\n        isWide: index === options.length - 1,\n      });\n    });\n\n    return [result, canExtendOptions];\n  }, [areOptionsExtended, options, starsNeeded]);\n\n  return (\n    <div className={buildClassName(styles.options, className)}>\n      {renderingOptions?.map(({ option, starsCount, isWide }) => {\n        const length = renderingOptions?.length;\n        const isOdd = length % 2 === 0;\n        const isActiveOption = option === selectedStarOption;\n\n        let perUserStarCount;\n        if (option && 'winners' in option) {\n          const winner = option.winners.find((opt) => opt.users === selectedStarCount)\n            || option.winners.reduce((max, opt) => (opt.users > max.users ? opt : max), option.winners[0]);\n          perUserStarCount = winner?.perUserStars;\n        }\n\n        return (\n          <div\n            className={buildClassName(\n              styles.option, (!isOdd && isWide) && styles.wideOption, isActiveOption && styles.active,\n            )}\n            key={option.stars}\n            onClick={() => onClick?.(option)}\n          >\n            <div className={styles.optionTop}>\n              +{formatInteger(option.stars)}\n              <div className={styles.stackedStars} dir={lang.isRtl ? 'ltr' : 'rtl'}>\n                {Array.from({ length: starsCount }).map(() => (\n                  <StarIcon className={styles.stackedStar} type=\"gold\" size=\"big\" />\n                ))}\n              </div>\n            </div>\n            <div className={styles.optionBottom}>\n              {formatCurrency(option.amount, option.currency, oldLang.code)}\n            </div>\n            {(isActiveOption || (selectedStarOption && 'winners' in selectedStarOption)) && perUserStarCount && (\n              <div className={styles.optionBottom}>\n                <div className={styles.perUserStars}>\n                  {renderText(oldLang('BoostGift.Stars.PerUser', formatInteger(perUserStarCount)))}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      })}\n      {!areOptionsExtended && canExtend && (\n        <Button className={styles.moreOptions} isText noForcedUpperCase onClick={markOptionsExtended}>\n          {oldLang('Stars.Purchase.ShowMore')}\n          <Icon className={styles.iconDown} name=\"down\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StarTopupOptionList);\n","import { useEffect, useState } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME, DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const { setThemeSettings } = getActions();\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        })\n        .catch(() => {\n          setThemeSettings({\n            theme,\n            background: undefined,\n            backgroundColor: undefined,\n            isBlurred: true,\n            patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n          });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n"],"names":["memo","withGlobal","global","modal","user","forUserId","selectUser","getGlobal","undefined","StarsGiftModal","closeStarsGiftModal","openInvoice","requestConfetti","getActions","dialogRef","useRef","isOpen","Boolean","renderingModal","useCurrentOrPrev","oldLang","useOldLang","selectedOption","setSelectedOption","useState","isHeaderHidden","setHeaderHidden","useEffect","showConfetti","useLastCallback","dialog","current","top","left","width","height","querySelector","getBoundingClientRect","withStars","isCompleted","handleClick","option","type","userId","id","stars","currency","amount","handleClose","bottomText","useMemo","parts","split","React","createElement","SafeLink","url","text","Modal","className","buildClassName","styles","modalDialog","contentClassName","content","isSlim","onClose","main","onScroll","e","scrollTop","currentTarget","Button","round","size","closeButton","color","onClick","ariaLabel","Icon","name","header","hiddenHeader","starHeaderText","headerInfo","Fragment","Avatar","peer","avatar","logoBackground","src","StarsBackground","alt","draggable","logo","StarLogo","headerText","center","renderText","formatCurrencyAsString","code","description","getPeerTitle","section","StarTopupOptionList","options","starsGiftOptions","secondaryInfo","chats","listIds","currentUserId","userIds","contactList","activeListIds","active","archivedListIds","archived","StarsGiftingPickerModal","closeStarsGiftingPickerModal","openStarsGiftModal","searchQuery","setSearchQuery","displayedUserIds","usersById","users","byId","combinedIds","unique","filteredUserIds","filterPeersByQuery","ids","query","sortChatIds","filter","isSupport","isUserBot","isDeletedUser","SERVICE_NOTIFICATIONS_USER_ID","handleSelectedUserIdsChange","newSelectedId","length","PickerModal","title","hasCloseButton","shouldAdaptToSearch","withFixedHeight","confirmButtonText","onEnter","PeerPicker","itemIds","filterValue","filterPlaceholder","onFilterChange","isSearchable","withDefaultPadding","withStatus","onSelectedIdChange","BalanceBlock","balance","lang","useLang","smallerText","balanceBottom","StarIcon","formatStarsAmount","StarsSubscriptionItem","subscription","openStarsSubscriptionModal","peerId","pricing","until","isCancelled","photo","useSelector","selectPeer","selectProvidedPeer","hasExpired","Date","now","formattedDate","formatDateToString","root","preview","subscriptionStar","info","subtitle","webPhoto","status","statusEnded","statusPricing","star","formatInteger","statusPeriod","getTransactionTitle","transaction","starRefCommision","formatPercent","isGiftUpgrade","extendedMedia","subscriptionPeriod","isReaction","giveawayPostId","isMyGift","isGift","starGift","isNegativeStarsAmount","customPeer","buildStarsTransactionCustomPeer","titleKey","starsAmount","nanos","SingleMediaThumb","boughtMedia","index","media","video","mediaHash","getMediaHash","thumb","getMediaThumbUri","mediaBlob","useMedia","blurry","full","PaidMediaThumb","isTransactionPreview","count","Math","min","isLocked","dir","slice","reverse","map","item","i","arr","realIndex","MediaSpoiler","isVisible","thumbDataUri","thumbnail","dataUri","noOutline","StarsTransactionItem","openStarsTransactionModal","date","transactionPeer","selectOptionalPeer","uniqueGift","uniqueGiftSticker","getStickerFromGift","data","avatarPeer","CUSTOM_PEER_PREMIUM","subtitleKey","isRefund","hasFailed","isPending","previewContent","backdrop","getGiftAttributes","backgroundColors","centerColor","edgeColor","RadialPatternBackground","uniqueGiftBackground","AnimatedIconFromSticker","sticker","play","formatDateTimeToString","negative","positive","formatStarsTransactionAmount","TRANSACTION_TYPES","TRANSACTION_TABS_KEYS","TRANSACTION_ITEM_CLASS","shouldForceHeight","history","all","transactions","starsBalanceState","canBuyPremium","selectIsPremiumPurchaseBlocked","StarsBalanceModal","closeStarsBalanceModal","loadStarsTransactions","loadStarsSubscriptions","openStarsGiftingPickerModal","subscriptions","selectedTabIndex","setSelectedTabIndex","areBuyOptionsShown","showBuyOptions","hideBuyOptions","useFlag","originStarsPayment","originReaction","originGift","topup","shouldOpenOnBuy","ongoingTransactionAmount","form","invoice","totalAmount","subscriptionInfo","subscriptionPricing","gift","balanceNeeded","starsNeeded","starsNeededText","channel","selectChat","chatId","getChatTitle","bot","botId","getUserFullName","purpose","shouldShowItems","shouldSuggestGifting","transactionTabs","key","tosText","handleLoadMoreTransactions","handleLoadMoreSubscriptions","openStarsGiftingPickerModalHandler","handleBuyStars","minimal","modalBalance","starButton","isText","noForcedUpperCase","topupOptions","tos","list","sectionTitle","nextOffset","disabled","isLoading","loadMore","loadMoreIcon","container","Transition","isRtl","activeKey","renderCount","shouldRestoreHeight","transition","InfiniteScroll","onLoadMore","items","scrollContainerClosest","itemSelector","noFastList","TabList","tabs","tabClassName","tab","activeTab","onSwitchTab","formatStarsAsText","pluralValue","formatStarsAsIcon","asFont","icon","withNodes","specialReplacement","STARS_ICON_PLACEHOLDER","messageInputInvoice","inputInvoice","message","selectChatMessage","messageId","chat","isPaidMedia","paidMedia","paidMediaMessage","paidMediaChat","StarPaymentModal","closeStarsPaymentModal","openStarsBalanceModal","sendStarPaymentForm","markLoading","unmarkLoading","prevModal","usePrevious","isBotSubscription","canShowPeerItem","descriptionText","botName","starsText","areAllPhotos","every","duration","areAllVideos","mediaText","channelTitle","withMarkdown","disclaimerText","link","inviteCustomPeer","getCustomPeerFromInvite","handlePayment","paymentContent","hasAbsoluteCloseButton","paymentImages","paymentPhoto","avatarStar","PeerBadge","avatarWebPhoto","avatarSize","badgeIcon","badgeText","badgeClassName","amountBadge","paymentImageBackground","PeerChip","botItem","paymentButton","disclaimer","UniqueGiftHeader","modelAttribute","backdropAttribute","patternAttribute","deps","noAnimation","didUpdate","useTransitionActiveKey","subtitleColor","textColor","radialPatternBackdrop","backdropColors","patternColor","patternIcon","slideClassName","direction","style","buildStyle","starCount","starsGiftSticker","selectGiftStickerForStars","canPlayAnimatedEmojis","selectCanPlayAnimatedEmojis","topSticker","StarsTransactionModal","showNotification","openMediaViewer","closeStarsTransactionModal","handleOpenMedia","origin","MediaViewerOrigin","StarsTransaction","standaloneMedia","flatMap","Object","values","starModalData","isUniqueGift","giftAttributes","toName","getStarsPeerTitleKey","messageLink","getMessageLink","giveawayMessageLink","mediaAmount","m","shouldDisplayAvatar","uniqueGiftHeader","pattern","model","number","regularHeader","noLoop","tableData","peerLabel","push","copyTextToClipboard","footerTextParts","footer","renderingModalData","TableInfoModal","hasBackdrop","buttonText","StarsSubscriptionModal","closeStarsSubscriptionModal","fulfillStarsSubscription","changeStarsSubscription","checkChatInvite","loadStarStatus","buttonState","canRefulfill","isActive","canRestart","chatInviteHash","invoiceSlug","handleButtonClick","hash","slug","hasBotCancelled","isApiPeerUser","footerTos","DEFAULT_POINTS","getProgress","points","value","pointIndex","findIndex","point","prevPoint","nextPoint","getValue","progress","floor","StarSlider","maxValue","defaultValue","onChange","floatingBadgeRef","result","setValue","useEffectOnce","updateSafeBadgePosition","badge","parent","parentElement","requestMeasure","safeMinX","offsetLeft","offsetWidth","safeMaxX","requestMutation","setProperty","useResizeObserver","handleChange","event","newValue","Number","floatingBadgeWrapper","floatingBadge","ref","floatingBadgeText","floatingBadgeIcon","AnimatedCounter","floatingBadgeTriangle","viewBox","fill","x1","x2","y1","y2","offset","d","Sparkles","preset","sparkles","slider","max","step","ANONYMOUS_PEER","avatarIcon","customPeerAvatarColor","isCustomPeer","starBalance","maxAmount","appConfig","paidReactionMaxAmount","defaultPrivacy","settings","paidReactionPrivacy","PaidReactionModal","closePaidReactionModal","addLocalPaidReaction","setStarsAmount","isTouched","markTouched","unmarkTouched","shouldShowUp","setShouldShowUp","handleAnonimityChange","target","checked","handleAmountChange","currentReactor","reactions","topReactors","find","reactor","isMe","isAnonymous","handleSend","isPrivate","hasMe","forEach","localAmount","me","sort","a","b","chatTitle","Separator","countText","Checkbox","label","theme","selectTheme","isBlurred","isBackgroundBlurred","background","customBackground","backgroundColor","themes","tabState","selectTabState","captionLimit","starGiftMaxMessageLength","isPaymentFormLoading","sendStarGift","openGiftUpgradeModal","giftMessage","setGiftMessage","shouldHideName","setShouldHideName","shouldPayForUpgrade","setShouldPayForUpgrade","customBackgroundValue","useCustomBackground","isStarGift","isPeerUser","localMessage","isOutgoing","senderId","action","targetChatId","mediaType","STARS_CURRENCY_CODE","isNameHidden","starsToConvert","canUpgrade","alreadyPaidUpgradeStars","upgradeStars","isSaved","fromId","translationValues","months","handleGiftMessageChange","handleShouldHideNameChange","handleShouldPayForUpgradeChange","handleOpenUpgradePreview","giftId","handleMainButtonClick","shouldUpgrade","bgClassName","inert","ActionMessage","symbolsLeft","TextArea","maxLength","maxLengthIndicator","toString","ListItem","narrow","ripple","Switcher","Link","isPrimary","receiver","renderOptionsSection","formatCurrency","availabilityRemains","PremiumProgress","availabilityTotal","rightText","leftText","renderFooter","selectGiftStickerForDuration","baseMonthAmount","handleGiftClick","perMonth","discount","ceil","tabIndex","role","nonInteractive","caption","renderMonths","pill","fluid","GiftRibbon","percent","observeIntersection","openGiftInfoModal","shouldPlay","isLimited","isSoldOut","useOnIntersect","entry","isIntersecting","withSparkleEffect","starGifts","idsByCategory","StarGiftCategoryList","onCategoryChanged","starCategories","keys","category","selectedCategory","setSelectedCategory","renderCategoryItem","handleItemClick","isInteger","renderCategoryName","useHorizontalScroll","runThrottledForScroll","throttle","cb","forPeerId","isSelf","boostPerSentGift","boostsPerSentGift","starGiftsById","starGiftIdsByCategory","PremiumGiftModal","closeGiftModal","transitionRef","giftHeaderRef","scrollerRef","isApiPeerChat","selectedGift","setSelectedGift","setIsHeaderHidden","isHeaderForStarGifts","setIsHeaderForStarGifts","filteredGifts","gifts","prevGift","baseGift","reduce","prev","observe","useIntersectionObserver","rootRef","throttleMs","isDisabled","handleScroll","headerTop","transitionTop","giftPremiumDescription","starGiftDescription","renderTextFilters","handleCloseButtonClick","isBackButton","buttonClassName","headerSlide","commonHeaderText","avatars","premiumGiftsGallery","GiftItemPremium","starGiftsDescription","starGiftsTransition","starGiftsContainer","GiftItemStar","GiftSendingOptions","GiftRecipientPicker","closeGiftRecipientPicker","openGiftModal","idsWithSelf","concat","filteredPeerIds","selectCanGift","selectedId","forceShowSelf","typeGift","fromPeer","targetPeer","hasAdminRights","getHasAdminRight","currentUser","currentUserEmojiStatus","emojiStatus","collectibleEmojiStatuses","statuses","starGiftMaxConvertPeriod","GiftInfoModal","closeGiftInfoModal","changeGiftVisibility","convertGiftToStars","openChatWithInfo","focusMessage","openChatWithDraft","openGiftStatusInfoModal","setEmojiStatus","openGiftTransferModal","isConvertConfirmOpen","openConvertConfirm","closeConvertConfirm","renderingFromPeer","renderingTargetPeer","isTargetChat","isSavedGift","savedGift","isSender","canConvertDifference","getServerTime","conversionLeft","giftSticker","currenUniqueEmojiStatusSlug","starGiftUniqueSlug","starGiftUniqueLink","TME_LINK_PREFIX","userCollectibleStatus","isGiftUnique","canTakeOff","canWear","canFocusUpgrade","upgradeMsgId","canUpdate","inputGift","handleCopyLink","handleLinkShare","handleTransfer","handleWear","handleTakeOff","documentId","DEFAULT_STATUS_ICON_ID","handleFocusUpgraded","handleTriggerVisibility","isUnsaved","shouldUnsave","handleConvertToStars","handleOpenUpgradeModal","SettingsMenuButton","onTrigger","isMenuOpen","renderFooterButton","isShiny","modalData","isConverted","isVisibleForMe","uniqueGiftContextMenu","DropdownMenu","trigger","positionX","MenuItem","uniqueGiftModalHeader","modalHeader","modalCloseButton","soldOut","CUSTOM_PEER_HIDDEN","unknown","firstSaleDate","lastSaleDate","starsValue","giftValue","starAmountIcon","BadgeButton","total","renderTextWithEntities","ownerName","ownerAddress","ownerId","originalDetails","copyIcon","withEmojiStatus","uniqueAttribute","rarityPercent","issued","issuedCount","totalCount","recipientId","openChat","recipient","sender","recipientLink","senderLink","footerDescription","ConfirmDialog","confirmHandler","GiftUpgradeModal","closeGiftUpgradeModal","upgradeGift","renderingRecipient","shouldKeepOriginalDetails","setShouldKeepOriginalDetails","previewAttributes","setPreviewAttributes","handleUpgrade","updatePreviewAttributes","sampleAttributes","previousSelection","models","attr","patterns","backdrops","random","getRandomAttributes","useInterval","attributes","getStickerMediaHash","fetch","ApiMediaFormat","BlobUrl","listItemData","onCheck","TableAboutModal","isCurrentUserPremium","selectIsCurrentUserPremium","GiftStatusInfoModal","closeGiftStatusInfoModal","useCustomEmoji","patternDocumentId","onWearClick","customEmoji","mockPeerWithStatus","FullNameTitle","noFake","noVerified","statusSparklesColor","FRAGMENT_PEER","GIFT_STICKER_SIZE","REM","byKey","hasPassword","twoFaSettings","hint","passwordHint","GiftWithdrawModal","closeGiftWithdrawModal","clearGiftWithdrawError","processStarGiftWithdrawal","shouldShowPassword","setShouldShowPassword","exportDelay","canExportAt","handleSubmit","password","giftPreview","arrow","exportHint","days","getDays","noPassword","PasswordForm","shouldShowSubmit","placeholder","error","errorKey","withRegular","clearError","isPasswordVisible","shouldResetValue","onChangePasswordVisibility","submitLabel","onSubmit","noop","async","peerGlobalSearch","searchResult","callApi","accountResultIds","globalResultIds","AVATAR_SIZE","contactIds","GiftTransferModal","closeGiftTransferModal","openGiftWithdrawModal","transferGift","setSelectedId","renderingSelectedPeerId","renderingSelectedPeer","orderedChatIds","useFolderManagerForOrderedIds","ALL_FOLDER_ID","sortedLocalIds","foundIds","currentResultsQuery","queryFn","debounceTimeout","debouncedQuery","resolverFn","ms","dependencies","isFrozen","updateWhenUnfrozen","useCallback","forceUpdate","useForceUpdate","handleUnfreeze","useHeavyAnimation","getIsHeavyAnimating","useHeavyAnimationFreeze","runDebounced","useRunDebounced","useSyncEffect","useDebouncedMemo","setCurrentResultsQuery","queryCallback","useAsync","Promise","resolve","answer","usePeerSearch","categories","MEMO_EMPTY_ARRAY","peerColorId","handleCategoryChange","displayIds","closeConfirmModal","transferStars","ignoreFreeze","onSelectedCategoryChange","withPeerUsernames","noScrollRestore","noDefaultTitle","confirmLabel","children","badgeIconClassName","textClassName","clickable","isConfirmDisabled","onConfirm","withPremiumGradient","modalProps","hasButton","_extends","headerClassName","headerIconName","withSeparator","onButtonClick","absoluteCloseButtonColor","isStatic","multiline","iconClassName","headerAvatarPeer","handleOpenChat","clickArg","selectedStarOption","selectedStarCount","areOptionsExtended","markOptionsExtended","unmarkOptionsExtended","renderingOptions","canExtend","maxOption","forceShowAll","currentStackedStarsCount","canExtendOptions","isExtended","starsCount","isWide","isOdd","isActiveOption","perUserStarCount","winner","winners","opt","perUserStars","wideOption","optionTop","stackedStars","Array","from","stackedStar","optionBottom","moreOptions","iconDown","settingValue","setThemeSettings","startsWith","cacheApi","CUSTOM_BG_CACHE_NAME","Blob","then","blob","URL","createObjectURL","preloadImage","catch","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR"],"sourceRoot":""}